(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["hello-world"] = factory();
	else
		root["hello-world"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "fae3");
/******/ })
/************************************************************************/
/******/ ({

/***/ "00ee":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "0366":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("1c0b");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "0481":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var flattenIntoArray = __webpack_require__("a2bf");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var toInteger = __webpack_require__("a691");
var arraySpeciesCreate = __webpack_require__("65f0");

// `Array.prototype.flat` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});


/***/ }),

/***/ "057f":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var nativeGetOwnPropertyNames = __webpack_require__("241c").f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "06cf":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createPropertyDescriptor = __webpack_require__("5c6c");
var toIndexedObject = __webpack_require__("fc6a");
var toPrimitive = __webpack_require__("c04e");
var has = __webpack_require__("5135");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "0b25":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};


/***/ }),

/***/ "0cfb":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var createElement = __webpack_require__("cc12");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "0d3b":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "0e21":
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "1148":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),

/***/ "1276":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var isRegExp = __webpack_require__("44e7");
var anObject = __webpack_require__("825a");
var requireObjectCoercible = __webpack_require__("1d80");
var speciesConstructor = __webpack_require__("4840");
var advanceStringIndex = __webpack_require__("8aa5");
var toLength = __webpack_require__("50c4");
var callRegExpExec = __webpack_require__("14c3");
var regexpExec = __webpack_require__("9263");
var fails = __webpack_require__("d039");

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);


/***/ }),

/***/ "13d5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $reduce = __webpack_require__("d58f").left;
var arrayMethodIsStrict = __webpack_require__("a640");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var STRICT_METHOD = arrayMethodIsStrict('reduce');
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "14c3":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");
var regexpExec = __webpack_require__("9263");

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),

/***/ "159b":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var DOMIterables = __webpack_require__("fdbc");
var forEach = __webpack_require__("17c2");
var createNonEnumerableProperty = __webpack_require__("9112");

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}


/***/ }),

/***/ "17c2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $forEach = __webpack_require__("b727").forEach;
var arrayMethodIsStrict = __webpack_require__("a640");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var STRICT_METHOD = arrayMethodIsStrict('forEach');
var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;


/***/ }),

/***/ "182d":
/***/ (function(module, exports, __webpack_require__) {

var toPositiveInteger = __webpack_require__("f8cd");

module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};


/***/ }),

/***/ "19aa":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};


/***/ }),

/***/ "1be4":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "1c0b":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "1c7e":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "1cdc":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("342f");

module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "1d80":
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "1dde":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("2d00");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "219c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});


/***/ }),

/***/ "2266":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var isArrayIteratorMethod = __webpack_require__("e95a");
var toLength = __webpack_require__("50c4");
var bind = __webpack_require__("0366");
var getIteratorMethod = __webpack_require__("35a1");
var callWithSafeIterationClosing = __webpack_require__("9bdd");

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, next, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};


/***/ }),

/***/ "23cb":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "23e7":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var setGlobal = __webpack_require__("ce4e");
var copyConstructorProperties = __webpack_require__("e893");
var isForced = __webpack_require__("94ca");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "241c":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "2532":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "25f0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefine = __webpack_require__("6eeb");
var anObject = __webpack_require__("825a");
var fails = __webpack_require__("d039");
var flags = __webpack_require__("ad6d");

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}


/***/ }),

/***/ "2626":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__("d066");
var definePropertyModule = __webpack_require__("9bf2");
var wellKnownSymbol = __webpack_require__("b622");
var DESCRIPTORS = __webpack_require__("83ab");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "26e9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var isArray = __webpack_require__("e8b5");

var nativeReverse = [].reverse;
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign
    if (isArray(this)) this.length = this.length;
    return nativeReverse.call(this);
  }
});


/***/ }),

/***/ "2b0e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "production" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "production" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (false) { var repeat, classify, classifyRE, hasConsole; }

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (false) {}
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (false) {}
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (false) {}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       false && false;

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     false && false;
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (false) {}
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "production" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (false) {}
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (false) {}
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (false) {}
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (false) {}

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (false) {}
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    false
  ) {}
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (false) {}
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (false) {}
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (false) { var perf; }

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       false && false;
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (false) { var keyInLowerCase; }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (false) {} else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (false) {}
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (false) {}
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       false && false;
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       false && false;
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (false) {}
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (false) {}
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (false) {}
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     false && false;
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (false
  ) {}
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (false) {}
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (false) {} else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (false) {} else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (false) {}
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       false && false;
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 false
                  ? (undefined)
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (false) { var lowerCaseEvent; }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (false) {}
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (false) {} else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (false) {}

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (false) {}
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (false) {}
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (false) {}
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (false) {}
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  false
    ? undefined
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       false && false;
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (false) { var hyphenatedKey; } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     false && false;
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (false) {}
    if (props && hasOwn(props, key)) {
       false && false;
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (false) {}

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (false) {}
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (false) {}
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (false) {}
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (false) {}
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (false) {}

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (false) {} else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (false) {}

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (false
  ) {}
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (false) {}

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (false) {}
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (false) {}
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.11';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
       false && false;
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (false) {}

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (false) {}
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (false) {}
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (false) {}

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (false) {}
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (false) {}
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (false) {}
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */

/*  */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (false) {}

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (false) {}

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
     false && false;
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (false) {}

    var mode = this.mode;

    // warn invalid mode
    if (false
    ) {}

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (false) { var name, opts; }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        false
      ) {}
    }
    if (false
    ) {}
  }, 0);
}

/*  */

/* harmony default export */ __webpack_exports__["a"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "2b3d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("3ca3");
var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var global = __webpack_require__("da84");
var defineProperties = __webpack_require__("37e8");
var redefine = __webpack_require__("6eeb");
var anInstance = __webpack_require__("19aa");
var has = __webpack_require__("5135");
var assign = __webpack_require__("60da");
var arrayFrom = __webpack_require__("4df4");
var codeAt = __webpack_require__("6547").codeAt;
var toASCII = __webpack_require__("5fb2");
var setToStringTag = __webpack_require__("d44e");
var URLSearchParamsModule = __webpack_require__("9861");
var InternalStateModule = __webpack_require__("69f3");

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "2ca0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var toLength = __webpack_require__("50c4");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");
var IS_PURE = __webpack_require__("c430");

var nativeStartsWith = ''.startsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "2cf4":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");
var bind = __webpack_require__("0366");
var html = __webpack_require__("1be4");
var createElement = __webpack_require__("cc12");
var IS_IOS = __webpack_require__("1cdc");

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "2d00":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var userAgent = __webpack_require__("342f");

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;


/***/ }),

/***/ "342f":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "35a1":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("f5df");
var Iterators = __webpack_require__("3f8c");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "37e8":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var anObject = __webpack_require__("825a");
var objectKeys = __webpack_require__("df75");

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),

/***/ "3bbe":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),

/***/ "3ca3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "3f8c":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "4069":
/***/ (function(module, exports, __webpack_require__) {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__("44d2");

addToUnscopables('flat');


/***/ }),

/***/ "408a":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};


/***/ }),

/***/ "4160":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var forEach = __webpack_require__("17c2");

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});


/***/ }),

/***/ "428f":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = global;


/***/ }),

/***/ "4362":
/***/ (function(module, exports, __webpack_require__) {

exports.nextTick = function nextTick(fn) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    setTimeout(function () {
        fn.apply(null, args);
    }, 0);
};

exports.platform = exports.arch = 
exports.execPath = exports.title = 'browser';
exports.pid = 1;
exports.browser = true;
exports.env = {};
exports.argv = [];

exports.binding = function (name) {
	throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    exports.cwd = function () { return cwd };
    exports.chdir = function (dir) {
        if (!path) path = __webpack_require__("df7c");
        cwd = path.resolve(dir, cwd);
    };
})();

exports.exit = exports.kill = 
exports.umask = exports.dlopen = 
exports.uptime = exports.memoryUsage = 
exports.uvCounters = function() {};
exports.features = {};


/***/ }),

/***/ "44ad":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "44d2":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var create = __webpack_require__("7c73");
var definePropertyModule = __webpack_require__("9bf2");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "44de":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "44e7":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var classof = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "45fc":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $some = __webpack_require__("b727").some;
var arrayMethodIsStrict = __webpack_require__("a640");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var STRICT_METHOD = arrayMethodIsStrict('some');
var USES_TO_LENGTH = arrayMethodUsesToLength('some');

// `Array.prototype.some` method
// https://tc39.github.io/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "466d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var toLength = __webpack_require__("50c4");
var requireObjectCoercible = __webpack_require__("1d80");
var advanceStringIndex = __webpack_require__("8aa5");
var regExpExec = __webpack_require__("14c3");

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "4840":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var aFunction = __webpack_require__("1c0b");
var wellKnownSymbol = __webpack_require__("b622");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};


/***/ }),

/***/ "4930":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "498a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $trim = __webpack_require__("58a8").trim;
var forcedStringTrimMethod = __webpack_require__("c8d2");

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "4d63":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isForced = __webpack_require__("94ca");
var inheritIfRequired = __webpack_require__("7156");
var defineProperty = __webpack_require__("9bf2").f;
var getOwnPropertyNames = __webpack_require__("241c").f;
var isRegExp = __webpack_require__("44e7");
var getFlags = __webpack_require__("ad6d");
var stickyHelpers = __webpack_require__("9f7f");
var redefine = __webpack_require__("6eeb");
var fails = __webpack_require__("d039");
var setInternalState = __webpack_require__("69f3").set;
var setSpecies = __webpack_require__("2626");
var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var sticky;

    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
      return pattern;
    }

    if (CORRECT_NEW) {
      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
    } else if (pattern instanceof RegExpWrapper) {
      if (flagsAreUndefined) flags = getFlags.call(pattern);
      pattern = pattern.source;
    }

    if (UNSUPPORTED_Y) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    var result = inheritIfRequired(
      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
      thisIsRegExp ? this : RegExpPrototype,
      RegExpWrapper
    );

    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

    return result;
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');


/***/ }),

/***/ "4d64":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var toLength = __webpack_require__("50c4");
var toAbsoluteIndex = __webpack_require__("23cb");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "4de4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $filter = __webpack_require__("b727").filter;
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// Edge 14- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "4df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bind = __webpack_require__("0366");
var toObject = __webpack_require__("7b0b");
var callWithSafeIterationClosing = __webpack_require__("9bdd");
var isArrayIteratorMethod = __webpack_require__("e95a");
var toLength = __webpack_require__("50c4");
var createProperty = __webpack_require__("8418");
var getIteratorMethod = __webpack_require__("35a1");

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "4e82":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var aFunction = __webpack_require__("1c0b");
var toObject = __webpack_require__("7b0b");
var fails = __webpack_require__("d039");
var arrayMethodIsStrict = __webpack_require__("a640");

var test = [];
var nativeSort = test.sort;

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "50c4":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "5135":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "5319":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");
var advanceStringIndex = __webpack_require__("8aa5");
var regExpExec = __webpack_require__("14c3");

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (
        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
      ) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "5692":
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__("c430");
var store = __webpack_require__("c6cd");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.6.4',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "56ef":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var anObject = __webpack_require__("825a");

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "5899":
/***/ (function(module, exports) {

// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "58a8":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");
var whitespaces = __webpack_require__("5899");

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "5a34":
/***/ (function(module, exports, __webpack_require__) {

var isRegExp = __webpack_require__("44e7");

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),

/***/ "5c6c":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "5c7d":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {__webpack_require__("7db0");

__webpack_require__("c740");

__webpack_require__("4160");

__webpack_require__("caad");

__webpack_require__("c975");

__webpack_require__("e260");

__webpack_require__("ace4");

__webpack_require__("a9e3");

__webpack_require__("cca6");

__webpack_require__("d3b7");

__webpack_require__("e6cf");

__webpack_require__("a79d");

__webpack_require__("25f0");

__webpack_require__("8a79");

__webpack_require__("2532");

__webpack_require__("2ca0");

__webpack_require__("8a59");

__webpack_require__("82f8");

__webpack_require__("219c");

__webpack_require__("b39a");

__webpack_require__("72f7");

__webpack_require__("159b");

/*!
 * Quasar Framework v1.7.4
 * (c) 2015-present Razvan Stoenescu
 * Released under the MIT License.
 */
function objectOrFunction(e) {
  var t = typeof e;
  return null !== e && ("object" === t || "function" === t);
}

function isFunction(e) {
  return "function" == typeof e;
}

"undefined" != typeof window && function (e) {
  [Element.prototype, CharacterData.prototype, DocumentType.prototype].forEach(function (e) {
    e.hasOwnProperty("remove") || Object.defineProperty(e, "remove", {
      configurable: !0,
      enumerable: !0,
      writable: !0,
      value: function value() {
        null !== this.parentNode && this.parentNode.removeChild(this);
      }
    });
  });

  try {
    new MouseEvent("test");
  } catch (r) {
    var t = function t(_t, r) {
      r = r || {
        bubbles: !1,
        cancelable: !1
      };
      var n = document.createEvent("MouseEvent");
      return n.initMouseEvent(_t, r.bubbles, r.cancelable, e, 0, r.screenX || 0, r.screenY || 0, r.clientX || 0, r.clientY || 0, r.ctrlKey || !1, r.altKey || !1, r.shiftKey || !1, r.metaKey || !1, r.button || 0, r.relatedTarget || null), n;
    };

    t.prototype = Event.prototype, e.MouseEvent = t;
  }

  "function" != typeof Object.assign && Object.defineProperty(Object, "assign", {
    value: function value(e, t) {
      var r = arguments;
      if (null === e || void 0 === e) throw new TypeError("Cannot convert undefined or null to object");

      for (var n = Object(e), o = 1; o < arguments.length; o++) {
        var i = r[o];
        if (null !== i && void 0 !== i) for (var s in i) {
          Object.prototype.hasOwnProperty.call(i, s) && (n[s] = i[s]);
        }
      }

      return n;
    },
    writable: !0,
    configurable: !0
  }), String.prototype.startsWith || Object.defineProperty(String.prototype, "startsWith", {
    value: function value(e, t) {
      var r = t > 0 ? 0 | t : 0;
      return this.substring(r, r + e.length) === e;
    }
  }), String.prototype.endsWith || (String.prototype.endsWith = function (e, t) {
    return (void 0 === t || t > this.length) && (t = this.length), this.substring(t - e.length, t) === e;
  }), Number.isInteger || (Number.isInteger = function (e) {
    return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
  }), Array.prototype.includes || (Array.prototype.includes = function (e) {
    return !!~this.indexOf(e);
  }), Element.prototype.closest || (Element.prototype.closest = function (e) {
    var t,
        r = (this.document || this.ownerDocument).querySelectorAll(e),
        n = this;

    do {
      for (t = r.length; --t >= 0 && r.item(t) !== n;) {
        ;
      }
    } while (t < 0 && (n = n.parentElement));

    return n;
  }), Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
    value: function value(e) {
      if (null == this) throw TypeError('"this" is null or not defined');
      var t = Object(this),
          r = t.length >>> 0;
      if ("function" != typeof e) throw TypeError("predicate must be a function");

      for (var n = arguments[1], o = 0; o < r;) {
        var i = t[o];
        if (e.call(n, i, o, t)) return i;
        o++;
      }
    },
    configurable: !0,
    writable: !0
  }), Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {
    value: function value(e) {
      if (null == this) throw new TypeError("Array.prototype.findIndex called on null or undefined");
      if ("function" != typeof e) throw new TypeError("predicate must be a function");

      for (var t = Object(this), r = t.length >>> 0, n = arguments[1], o = 0; o < r; o++) {
        if (e.call(n, t[o], o, t)) return o;
      }

      return -1;
    }
  });
}(window);

var _isArray = void 0,
    isArray = _isArray = Array.isArray ? Array.isArray : function (e) {
  return "[object Array]" === Object.prototype.toString.call(e);
},
    len = 0,
    vertxNext = void 0,
    customSchedulerFn = void 0,
    asap = function asap(e, t) {
  queue[len] = e, queue[len + 1] = t, 2 === (len += 2) && (customSchedulerFn ? customSchedulerFn(flush) : scheduleFlush());
};

function setScheduler(e) {
  customSchedulerFn = e;
}

function setAsap(e) {
  asap = e;
}

var browserWindow = "undefined" != typeof window ? window : void 0,
    browserGlobal = browserWindow || {},
    BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver,
    isNode = "undefined" == typeof self && "undefined" != typeof process && "[object process]" === {}.toString.call(process),
    isWorker = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;

function useNextTick() {
  return function () {
    return process.nextTick(flush);
  };
}

function useVertxTimer() {
  return void 0 !== vertxNext ? function () {
    vertxNext(flush);
  } : useSetTimeout();
}

function useMutationObserver() {
  var e = 0,
      t = new BrowserMutationObserver(flush),
      r = document.createTextNode("");
  return t.observe(r, {
    characterData: !0
  }), function () {
    r.data = e = ++e % 2;
  };
}

function useMessageChannel() {
  var e = new MessageChannel();
  return e.port1.onmessage = flush, function () {
    return e.port2.postMessage(0);
  };
}

function useSetTimeout() {
  var e = setTimeout;
  return function () {
    return e(flush, 1);
  };
}

var queue = new Array(1e3);

function flush() {
  for (var e = 0; e < len; e += 2) {
    (0, queue[e])(queue[e + 1]), queue[e] = void 0, queue[e + 1] = void 0;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var e = Function("return this")().require("vertx");

    return vertxNext = e.runOnLoop || e.runOnContext, useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;

function then(e, t) {
  var r = this,
      n = new this.constructor(noop);
  void 0 === n[PROMISE_ID] && makePromise(n);
  var o = r._state;

  if (o) {
    var i = arguments[o - 1];
    asap(function () {
      return invokeCallback(o, n, i, r._result);
    });
  } else subscribe(r, n, e, t);

  return n;
}

function resolve$1(e) {
  if (e && "object" == typeof e && e.constructor === this) return e;
  var t = new this(noop);
  return resolve(t, e), t;
}

scheduleFlush = isNode ? useNextTick() : BrowserMutationObserver ? useMutationObserver() : isWorker ? useMessageChannel() : void 0 === browserWindow && "function" == "function" ? attemptVertx() : useSetTimeout();
var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0,
    FULFILLED = 1,
    REJECTED = 2,
    TRY_CATCH_ERROR = {
  error: null
};

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError("A promises callback cannot return that same promise.");
}

function getThen(e) {
  try {
    return e.then;
  } catch (e) {
    return TRY_CATCH_ERROR.error = e, TRY_CATCH_ERROR;
  }
}

function tryThen(e, t, r, n) {
  try {
    e.call(t, r, n);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(e, t, r) {
  asap(function (e) {
    var n = !1,
        o = tryThen(r, t, function (r) {
      n || (n = !0, t !== r ? resolve(e, r) : fulfill(e, r));
    }, function (t) {
      n || (n = !0, reject(e, t));
    }, "Settle: " + (e._label || " unknown promise"));
    !n && o && (n = !0, reject(e, o));
  }, e);
}

function handleOwnThenable(e, t) {
  t._state === FULFILLED ? fulfill(e, t._result) : t._state === REJECTED ? reject(e, t._result) : subscribe(t, void 0, function (t) {
    return resolve(e, t);
  }, function (t) {
    return reject(e, t);
  });
}

function handleMaybeThenable(e, t, r) {
  t.constructor === e.constructor && r === then && t.constructor.resolve === resolve$1 ? handleOwnThenable(e, t) : r === TRY_CATCH_ERROR ? (reject(e, TRY_CATCH_ERROR.error), TRY_CATCH_ERROR.error = null) : void 0 === r ? fulfill(e, t) : isFunction(r) ? handleForeignThenable(e, t, r) : fulfill(e, t);
}

function resolve(e, t) {
  e === t ? reject(e, selfFulfillment()) : objectOrFunction(t) ? handleMaybeThenable(e, t, getThen(t)) : fulfill(e, t);
}

function publishRejection(e) {
  e._onerror && e._onerror(e._result), publish(e);
}

function fulfill(e, t) {
  e._state === PENDING && (e._result = t, e._state = FULFILLED, 0 !== e._subscribers.length && asap(publish, e));
}

function reject(e, t) {
  e._state === PENDING && (e._state = REJECTED, e._result = t, asap(publishRejection, e));
}

function subscribe(e, t, r, n) {
  var o = e._subscribers,
      i = o.length;
  e._onerror = null, o[i] = t, o[i + FULFILLED] = r, o[i + REJECTED] = n, 0 === i && e._state && asap(publish, e);
}

function publish(e) {
  var t = e._subscribers,
      r = e._state;

  if (0 !== t.length) {
    for (var n = void 0, o = void 0, i = e._result, s = 0; s < t.length; s += 3) {
      n = t[s], o = t[s + r], n ? invokeCallback(r, n, o, i) : o(i);
    }

    e._subscribers.length = 0;
  }
}

function tryCatch(e, t) {
  try {
    return e(t);
  } catch (e) {
    return TRY_CATCH_ERROR.error = e, TRY_CATCH_ERROR;
  }
}

function invokeCallback(e, t, r, n) {
  var o = isFunction(r),
      i = void 0,
      s = void 0,
      u = void 0,
      l = void 0;

  if (o) {
    if ((i = tryCatch(r, n)) === TRY_CATCH_ERROR ? (l = !0, s = i.error, i.error = null) : u = !0, t === i) return void reject(t, cannotReturnOwn());
  } else i = n, u = !0;

  t._state !== PENDING || (o && u ? resolve(t, i) : l ? reject(t, s) : e === FULFILLED ? fulfill(t, i) : e === REJECTED && reject(t, i));
}

function initializePromise(e, t) {
  try {
    t(function (t) {
      resolve(e, t);
    }, function (t) {
      reject(e, t);
    });
  } catch (t) {
    reject(e, t);
  }
}

var uid = 0;

function nextId() {
  return uid++;
}

function makePromise(e) {
  e[PROMISE_ID] = id++, e._state = void 0, e._result = void 0, e._subscribers = [];
}

function validationError() {
  return new Error("Array Methods must be provided an Array");
}

var Enumerator = function () {
  function e(e, t) {
    this._instanceConstructor = e, this.promise = new e(noop), this.promise[PROMISE_ID] || makePromise(this.promise), isArray(t) ? (this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? fulfill(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(t), 0 === this._remaining && fulfill(this.promise, this._result))) : reject(this.promise, validationError());
  }

  return e.prototype._enumerate = function (e) {
    for (var t = 0; this._state === PENDING && t < e.length; t++) {
      this._eachEntry(e[t], t);
    }
  }, e.prototype._eachEntry = function (e, t) {
    var r = this._instanceConstructor,
        n = r.resolve;

    if (n === resolve$1) {
      var o = getThen(e);
      if (o === then && e._state !== PENDING) this._settledAt(e._state, t, e._result);else if ("function" != typeof o) this._remaining--, this._result[t] = e;else if (r === Promise$2) {
        var i = new r(noop);
        handleMaybeThenable(i, e, o), this._willSettleAt(i, t);
      } else this._willSettleAt(new r(function (t) {
        return t(e);
      }), t);
    } else this._willSettleAt(n(e), t);
  }, e.prototype._settledAt = function (e, t, r) {
    var n = this.promise;
    n._state === PENDING && (this._remaining--, e === REJECTED ? reject(n, r) : this._result[t] = r), 0 === this._remaining && fulfill(n, this._result);
  }, e.prototype._willSettleAt = function (e, t) {
    var r = this;
    subscribe(e, void 0, function (e) {
      return r._settledAt(FULFILLED, t, e);
    }, function (e) {
      return r._settledAt(REJECTED, t, e);
    });
  }, e;
}();

function all(e) {
  return new Enumerator(this, e).promise;
}

function race(e) {
  var t = this;
  return isArray(e) ? new t(function (r, n) {
    for (var o = e.length, i = 0; i < o; i++) {
      t.resolve(e[i]).then(r, n);
    }
  }) : new t(function (e, t) {
    return t(new TypeError("You must pass an array to race."));
  });
}

function reject$1(e) {
  var t = new this(noop);
  return reject(t, e), t;
}

function needsResolver() {
  throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

var Promise$2 = function () {
  function e(t) {
    this[PROMISE_ID] = nextId(), this._result = this._state = void 0, this._subscribers = [], noop !== t && ("function" != typeof t && needsResolver(), this instanceof e ? initializePromise(this, t) : needsNew());
  }

  return e.prototype.catch = function (e) {
    return this.then(null, e);
  }, e.prototype.finally = function (e) {
    var t = this.constructor;
    return this.then(function (r) {
      return t.resolve(e()).then(function () {
        return r;
      });
    }, function (r) {
      return t.resolve(e()).then(function () {
        throw r;
      });
    });
  }, e;
}();

function polyfill() {
  var e = void 0;
  if ("undefined" != typeof global) e = global;else if ("undefined" != typeof self) e = self;else try {
    e = Function("return this")();
  } catch (e) {
    throw new Error("polyfill failed because global object is unavailable in this environment");
  }
  var t = e.Promise;

  if (t) {
    var r = null;

    try {
      r = Object.prototype.toString.call(t.resolve());
    } catch (e) {}

    if ("[object Promise]" === r && !t.cast) return;
  }

  e.Promise = Promise$2;
}

Promise$2.prototype.then = then, Promise$2.all = all, Promise$2.race = race, Promise$2.resolve = resolve$1, Promise$2.reject = reject$1, Promise$2._setScheduler = setScheduler, Promise$2._setAsap = setAsap, Promise$2._asap = asap, polyfill();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362"), __webpack_require__("c8ba")))

/***/ }),

/***/ "5fb2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};


/***/ }),

/***/ "60da":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var objectKeys = __webpack_require__("df75");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var toObject = __webpack_require__("7b0b");
var IndexedObject = __webpack_require__("44ad");

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;


/***/ }),

/***/ "621a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var DESCRIPTORS = __webpack_require__("83ab");
var NATIVE_ARRAY_BUFFER = __webpack_require__("a981");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefineAll = __webpack_require__("e2cc");
var fails = __webpack_require__("d039");
var anInstance = __webpack_require__("19aa");
var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");
var toIndex = __webpack_require__("0b25");
var IEEE754 = __webpack_require__("77a7");
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var getOwnPropertyNames = __webpack_require__("241c").f;
var defineProperty = __webpack_require__("9bf2").f;
var arrayFill = __webpack_require__("81d5");
var setToStringTag = __webpack_require__("d44e");
var InternalStateModule = __webpack_require__("69f3");

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var RangeError = global.RangeError;

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
    setPrototypeOf($DataViewPrototype, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataViewPrototype.setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};


/***/ }),

/***/ "6547":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "65f0":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var isArray = __webpack_require__("e8b5");
var wellKnownSymbol = __webpack_require__("b622");

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};


/***/ }),

/***/ "69f3":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");
var createNonEnumerableProperty = __webpack_require__("9112");
var objectHas = __webpack_require__("5135");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "6eeb":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var setGlobal = __webpack_require__("ce4e");
var inspectSource = __webpack_require__("8925");
var InternalStateModule = __webpack_require__("69f3");

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "7156":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var setPrototypeOf = __webpack_require__("d2bb");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "72f7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exportTypedArrayMethod = __webpack_require__("ebb5").exportTypedArrayMethod;
var fails = __webpack_require__("d039");
var global = __webpack_require__("da84");

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);


/***/ }),

/***/ "7418":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "746f":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("428f");
var has = __webpack_require__("5135");
var wrappedWellKnownSymbolModule = __webpack_require__("e538");
var defineProperty = __webpack_require__("9bf2").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "74e8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var DESCRIPTORS = __webpack_require__("83ab");
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__("8aa7");
var ArrayBufferViewCore = __webpack_require__("ebb5");
var ArrayBufferModule = __webpack_require__("621a");
var anInstance = __webpack_require__("19aa");
var createPropertyDescriptor = __webpack_require__("5c6c");
var createNonEnumerableProperty = __webpack_require__("9112");
var toLength = __webpack_require__("50c4");
var toIndex = __webpack_require__("0b25");
var toOffset = __webpack_require__("182d");
var toPrimitive = __webpack_require__("c04e");
var has = __webpack_require__("5135");
var classof = __webpack_require__("f5df");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var setPrototypeOf = __webpack_require__("d2bb");
var getOwnPropertyNames = __webpack_require__("241c").f;
var typedArrayFrom = __webpack_require__("a078");
var forEach = __webpack_require__("b727").forEach;
var setSpecies = __webpack_require__("2626");
var definePropertyModule = __webpack_require__("9bf2");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var InternalStateModule = __webpack_require__("69f3");
var inheritIfRequired = __webpack_require__("7156");

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };


/***/ }),

/***/ "77a7":
/***/ (function(module, exports) {

// IEEE754 conversions based on https://github.com/feross/ieee754
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

module.exports = {
  pack: pack,
  unpack: unpack
};


/***/ }),

/***/ "7839":
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "7b0b":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "7c73":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var defineProperties = __webpack_require__("37e8");
var enumBugKeys = __webpack_require__("7839");
var hiddenKeys = __webpack_require__("d012");
var html = __webpack_require__("1be4");
var documentCreateElement = __webpack_require__("cc12");
var sharedKey = __webpack_require__("f772");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),

/***/ "7d6e":
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "7db0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $find = __webpack_require__("b727").find;
var addToUnscopables = __webpack_require__("44d2");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var FIND = 'find';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND);

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),

/***/ "7dd0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createIteratorConstructor = __webpack_require__("9ed3");
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var setToStringTag = __webpack_require__("d44e");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");
var Iterators = __webpack_require__("3f8c");
var IteratorsCore = __webpack_require__("ae93");

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "7f9a":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var inspectSource = __webpack_require__("8925");

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "81d5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__("7b0b");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "825a":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "82f8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $includes = __webpack_require__("4d64").includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "83ab":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "8418":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPrimitive = __webpack_require__("c04e");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "861d":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "8925":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("c6cd");

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "8a59":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Uint8ClampedArray` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),

/***/ "8a79":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var toLength = __webpack_require__("50c4");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");
var IS_PURE = __webpack_require__("c430");

var nativeEndsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "8aa5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "8aa7":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-new */
var global = __webpack_require__("da84");
var fails = __webpack_require__("d039");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");
var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__("ebb5").NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});


/***/ }),

/***/ "90e3":
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),

/***/ "9112":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "9263":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpFlags = __webpack_require__("ad6d");
var stickyHelpers = __webpack_require__("9f7f");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "94ca":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "9861":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("e260");
var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var redefine = __webpack_require__("6eeb");
var redefineAll = __webpack_require__("e2cc");
var setToStringTag = __webpack_require__("d44e");
var createIteratorConstructor = __webpack_require__("9ed3");
var InternalStateModule = __webpack_require__("69f3");
var anInstance = __webpack_require__("19aa");
var hasOwn = __webpack_require__("5135");
var bind = __webpack_require__("0366");
var classof = __webpack_require__("f5df");
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var getIterator = __webpack_require__("9a1f");
var getIteratorMethod = __webpack_require__("35a1");
var wellKnownSymbol = __webpack_require__("b622");

var $fetch = getBuiltIn('fetch');
var Headers = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if (
            (first = entryNext.call(entryIterator)).done ||
            (second = entryNext.call(entryIterator)).done ||
            !entryNext.call(entryIterator).done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.appent` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
  $({ global: true, enumerable: true, forced: true }, {
    fetch: function fetch(input /* , init */) {
      var args = [input];
      var init, body, headers;
      if (arguments.length > 1) {
        init = arguments[1];
        if (isObject(init)) {
          body = init.body;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headers.has('content-type')) {
              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            init = create(init, {
              body: createPropertyDescriptor(0, String(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        args.push(init);
      } return $fetch.apply(this, args);
    }
  });
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "99af":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var isArray = __webpack_require__("e8b5");
var isObject = __webpack_require__("861d");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var createProperty = __webpack_require__("8418");
var arraySpeciesCreate = __webpack_require__("65f0");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("2d00");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "9a1f":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var getIteratorMethod = __webpack_require__("35a1");

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};


/***/ }),

/***/ "9bdd":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};


/***/ }),

/***/ "9bf2":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");
var anObject = __webpack_require__("825a");
var toPrimitive = __webpack_require__("c04e");

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "9ed3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var setToStringTag = __webpack_require__("d44e");
var Iterators = __webpack_require__("3f8c");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "9f7f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__("d039");

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),

/***/ "a078":
/***/ (function(module, exports, __webpack_require__) {

var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var getIteratorMethod = __webpack_require__("35a1");
var isArrayIteratorMethod = __webpack_require__("e95a");
var bind = __webpack_require__("0366");
var aTypedArrayConstructor = __webpack_require__("ebb5").aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    O = [];
    while (!(step = next.call(iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};


/***/ }),

/***/ "a2bf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray = __webpack_require__("e8b5");
var toLength = __webpack_require__("50c4");
var bind = __webpack_require__("0366");

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
  var element;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;


/***/ }),

/***/ "a434":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var toAbsoluteIndex = __webpack_require__("23cb");
var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");
var toObject = __webpack_require__("7b0b");
var arraySpeciesCreate = __webpack_require__("65f0");
var createProperty = __webpack_require__("8418");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
var USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "a4d3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var getBuiltIn = __webpack_require__("d066");
var IS_PURE = __webpack_require__("c430");
var DESCRIPTORS = __webpack_require__("83ab");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
var fails = __webpack_require__("d039");
var has = __webpack_require__("5135");
var isArray = __webpack_require__("e8b5");
var isObject = __webpack_require__("861d");
var anObject = __webpack_require__("825a");
var toObject = __webpack_require__("7b0b");
var toIndexedObject = __webpack_require__("fc6a");
var toPrimitive = __webpack_require__("c04e");
var createPropertyDescriptor = __webpack_require__("5c6c");
var nativeObjectCreate = __webpack_require__("7c73");
var objectKeys = __webpack_require__("df75");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertyNamesExternal = __webpack_require__("057f");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var shared = __webpack_require__("5692");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");
var uid = __webpack_require__("90e3");
var wellKnownSymbol = __webpack_require__("b622");
var wrappedWellKnownSymbolModule = __webpack_require__("e538");
var defineWellKnownSymbol = __webpack_require__("746f");
var setToStringTag = __webpack_require__("d44e");
var InternalStateModule = __webpack_require__("69f3");
var $forEach = __webpack_require__("b727").forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "a623":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $every = __webpack_require__("b727").every;
var arrayMethodIsStrict = __webpack_require__("a640");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var STRICT_METHOD = arrayMethodIsStrict('every');
var USES_TO_LENGTH = arrayMethodUsesToLength('every');

// `Array.prototype.every` method
// https://tc39.github.io/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "a640":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("d039");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),

/***/ "a691":
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "a79d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var IS_PURE = __webpack_require__("c430");
var NativePromise = __webpack_require__("fea9");
var fails = __webpack_require__("d039");
var getBuiltIn = __webpack_require__("d066");
var speciesConstructor = __webpack_require__("4840");
var promiseResolve = __webpack_require__("cdf9");
var redefine = __webpack_require__("6eeb");

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function () {
  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = typeof onFinally == 'function';
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// patch native Promise.prototype for native async functions
if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
}


/***/ }),

/***/ "a981":
/***/ (function(module, exports) {

module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';


/***/ }),

/***/ "a9e3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isForced = __webpack_require__("94ca");
var redefine = __webpack_require__("6eeb");
var has = __webpack_require__("5135");
var classof = __webpack_require__("c6b6");
var inheritIfRequired = __webpack_require__("7156");
var toPrimitive = __webpack_require__("c04e");
var fails = __webpack_require__("d039");
var create = __webpack_require__("7c73");
var getOwnPropertyNames = __webpack_require__("241c").f;
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var defineProperty = __webpack_require__("9bf2").f;
var trim = __webpack_require__("58a8").trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}


/***/ }),

/***/ "ab13":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};


/***/ }),

/***/ "ac1f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var exec = __webpack_require__("9263");

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "ace4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var ArrayBufferModule = __webpack_require__("621a");
var anObject = __webpack_require__("825a");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");
var speciesConstructor = __webpack_require__("4840");

var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
$({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice !== undefined && end === undefined) {
      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
    }
    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      viewTarget.setUint8(index++, viewSource.getUint8(first++));
    } return result;
  }
});


/***/ }),

/***/ "ad6d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__("825a");

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "ae40":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var has = __webpack_require__("5135");

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};


/***/ }),

/***/ "ae93":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__("e163");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "b041":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var classof = __webpack_require__("f5df");

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "b39a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var ArrayBufferViewCore = __webpack_require__("ebb5");
var fails = __webpack_require__("d039");

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);


/***/ }),

/***/ "b575":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var classof = __webpack_require__("c6b6");
var macrotask = __webpack_require__("2cf4").set;
var IS_IOS = __webpack_require__("1cdc");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !IS_IOS) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "b622":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var shared = __webpack_require__("5692");
var has = __webpack_require__("5135");
var uid = __webpack_require__("90e3");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "b64b":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var toObject = __webpack_require__("7b0b");
var nativeKeys = __webpack_require__("df75");
var fails = __webpack_require__("d039");

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "b680":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var toInteger = __webpack_require__("a691");
var thisNumberValue = __webpack_require__("408a");
var repeat = __webpack_require__("1148");
var fails = __webpack_require__("d039");

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  // eslint-disable-next-line max-statements
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    var multiply = function (n, c) {
      var index = -1;
      var c2 = c;
      while (++index < 6) {
        c2 += n * data[index];
        data[index] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function (n) {
      var index = 6;
      var c = 0;
      while (--index >= 0) {
        c += data[index];
        data[index] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };

    var dataToString = function () {
      var index = 6;
      var s = '';
      while (--index >= 0) {
        if (s !== '' || index === 0 || data[index] !== 0) {
          var t = String(data[index]);
          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
        }
      } return s;
    };

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        result = dataToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        result = dataToString() + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});


/***/ }),

/***/ "b727":
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__("0366");
var IndexedObject = __webpack_require__("44ad");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var arraySpeciesCreate = __webpack_require__("65f0");

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};


/***/ }),

/***/ "c04e":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "c0a8":
/***/ (function(module) {

module.exports = JSON.parse("{\"a\":\"1.7.4\"}");

/***/ }),

/***/ "c430":
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "c6b6":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "c6cd":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var setGlobal = __webpack_require__("ce4e");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "c740":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $findIndex = __webpack_require__("b727").findIndex;
var addToUnscopables = __webpack_require__("44d2");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),

/***/ "c8ba":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "c8d2":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var whitespaces = __webpack_require__("5899");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};


/***/ }),

/***/ "c975":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $indexOf = __webpack_require__("4d64").indexOf;
var arrayMethodIsStrict = __webpack_require__("a640");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "ca84":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toIndexedObject = __webpack_require__("fc6a");
var indexOf = __webpack_require__("4d64").indexOf;
var hiddenKeys = __webpack_require__("d012");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "caad":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $includes = __webpack_require__("4d64").includes;
var addToUnscopables = __webpack_require__("44d2");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "cb29":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fill = __webpack_require__("81d5");
var addToUnscopables = __webpack_require__("44d2");

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');


/***/ }),

/***/ "cc12":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "cca6":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var assign = __webpack_require__("60da");

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "cdf9":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var newPromiseCapability = __webpack_require__("f069");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "ce4e":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "cf05":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/logo.8c4120b4.png";

/***/ }),

/***/ "d012":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "d039":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "d066":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("428f");
var global = __webpack_require__("da84");

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "d1e7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "d28b":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),

/***/ "d2bb":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var aPossiblePrototype = __webpack_require__("3bbe");

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "d3b7":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var redefine = __webpack_require__("6eeb");
var toString = __webpack_require__("b041");

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "d44e":
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__("9bf2").f;
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "d58f":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("1c0b");
var toObject = __webpack_require__("7b0b");
var IndexedObject = __webpack_require__("44ad");
var toLength = __webpack_require__("50c4");

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),

/***/ "d784":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__("ac1f");
var redefine = __webpack_require__("6eeb");
var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var regexpExec = __webpack_require__("9263");
var createNonEnumerableProperty = __webpack_require__("9112");

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "d81d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $map = __webpack_require__("b727").map;
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "da84":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "dbb4":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var ownKeys = __webpack_require__("56ef");
var toIndexedObject = __webpack_require__("fc6a");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var createProperty = __webpack_require__("8418");

// `Object.getOwnPropertyDescriptors` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});


/***/ }),

/***/ "ddb0":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var DOMIterables = __webpack_require__("fdbc");
var ArrayIteratorMethods = __webpack_require__("e260");
var createNonEnumerableProperty = __webpack_require__("9112");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),

/***/ "df75":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "df7c":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "e01a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var has = __webpack_require__("5135");
var isObject = __webpack_require__("861d");
var defineProperty = __webpack_require__("9bf2").f;
var copyConstructorProperties = __webpack_require__("e893");

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),

/***/ "e163":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toObject = __webpack_require__("7b0b");
var sharedKey = __webpack_require__("f772");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "e177":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "e260":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__("fc6a");
var addToUnscopables = __webpack_require__("44d2");
var Iterators = __webpack_require__("3f8c");
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "e2cc":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("6eeb");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "e538":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "e54f":
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "e667":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "e6cf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var IS_PURE = __webpack_require__("c430");
var global = __webpack_require__("da84");
var getBuiltIn = __webpack_require__("d066");
var NativePromise = __webpack_require__("fea9");
var redefine = __webpack_require__("6eeb");
var redefineAll = __webpack_require__("e2cc");
var setToStringTag = __webpack_require__("d44e");
var setSpecies = __webpack_require__("2626");
var isObject = __webpack_require__("861d");
var aFunction = __webpack_require__("1c0b");
var anInstance = __webpack_require__("19aa");
var classof = __webpack_require__("c6b6");
var inspectSource = __webpack_require__("8925");
var iterate = __webpack_require__("2266");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");
var speciesConstructor = __webpack_require__("4840");
var task = __webpack_require__("2cf4").set;
var microtask = __webpack_require__("b575");
var promiseResolve = __webpack_require__("cdf9");
var hostReportErrors = __webpack_require__("44de");
var newPromiseCapabilityModule = __webpack_require__("f069");
var perform = __webpack_require__("e667");
var InternalStateModule = __webpack_require__("69f3");
var isForced = __webpack_require__("94ca");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("2d00");

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = NativePromise;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = getBuiltIn('fetch');
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  if (!GLOBAL_CORE_JS_PROMISE) {
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (V8_VERSION === 66) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
  }
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function') {
    nativeThen = NativePromise.prototype.then;

    // wrap native Promise#then for native async functions
    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
      var that = this;
      return new PromiseConstructor(function (resolve, reject) {
        nativeThen.call(that, resolve, reject);
      }).then(onFulfilled, onRejected);
    // https://github.com/zloirock/core-js/issues/640
    }, { unsafe: true });

    // wrap fetch result
    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input /* , init */) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
      }
    });
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "e893":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var ownKeys = __webpack_require__("56ef");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "e8b5":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};


/***/ }),

/***/ "e95a":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var Iterators = __webpack_require__("3f8c");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "ebb5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NATIVE_ARRAY_BUFFER = __webpack_require__("a981");
var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");
var has = __webpack_require__("5135");
var classof = __webpack_require__("f5df");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var defineProperty = __webpack_require__("9bf2").f;
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var wellKnownSymbol = __webpack_require__("b622");
var uid = __webpack_require__("90e3");

var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};


/***/ }),

/***/ "f069":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__("1c0b");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "f5df":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var classofRaw = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "f6fd":
/***/ (function(module, exports) {

// document.currentScript polyfill by Adam Miller

// MIT license

(function(document){
  var currentScript = "currentScript",
      scripts = document.getElementsByTagName('script'); // Live NodeList collection

  // If browser needs currentScript polyfill, add get currentScript() to the document object
  if (!(currentScript in document)) {
    Object.defineProperty(document, currentScript, {
      get: function(){

        // IE 6-10 supports script readyState
        // IE 10+ support stack trace
        try { throw new Error(); }
        catch (err) {

          // Find the second match for the "at" string to get file src url from stack.
          // Specifically works with the format of stack traces in IE.
          var i, res = ((/.*at [^\(]*\((.*):.+:.+\)$/ig).exec(err.stack) || [false])[1];

          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag
          for(i in scripts){
            if(scripts[i].src == res || scripts[i].readyState == "interactive"){
              return scripts[i];
            }
          }

          // If no match, return null
          return null;
        }
      }
    });
  }
})(document);


/***/ }),

/***/ "f772":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("5692");
var uid = __webpack_require__("90e3");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "f8cd":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

module.exports = function (it) {
  var result = toInteger(it);
  if (result < 0) throw RangeError("The argument can't be less than 0");
  return result;
};


/***/ }),

/***/ "fae3":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var components_namespaceObject = {};
__webpack_require__.r(components_namespaceObject);
__webpack_require__.d(components_namespaceObject, "QAjaxBar", function() { return QAjaxBar; });
__webpack_require__.d(components_namespaceObject, "QAvatar", function() { return QAvatar; });
__webpack_require__.d(components_namespaceObject, "QBadge", function() { return QBadge; });
__webpack_require__.d(components_namespaceObject, "QBanner", function() { return QBanner; });
__webpack_require__.d(components_namespaceObject, "QBar", function() { return QBar; });
__webpack_require__.d(components_namespaceObject, "QBreadcrumbs", function() { return QBreadcrumbs; });
__webpack_require__.d(components_namespaceObject, "QBreadcrumbsEl", function() { return QBreadcrumbsEl; });
__webpack_require__.d(components_namespaceObject, "QBtn", function() { return QBtn; });
__webpack_require__.d(components_namespaceObject, "QBtnDropdown", function() { return QBtnDropdown; });
__webpack_require__.d(components_namespaceObject, "QBtnGroup", function() { return QBtnGroup; });
__webpack_require__.d(components_namespaceObject, "QBtnToggle", function() { return QBtnToggle; });
__webpack_require__.d(components_namespaceObject, "QCard", function() { return QCard; });
__webpack_require__.d(components_namespaceObject, "QCardSection", function() { return QCardSection; });
__webpack_require__.d(components_namespaceObject, "QCardActions", function() { return QCardActions; });
__webpack_require__.d(components_namespaceObject, "QCarousel", function() { return QCarousel; });
__webpack_require__.d(components_namespaceObject, "QCarouselSlide", function() { return QCarouselSlide; });
__webpack_require__.d(components_namespaceObject, "QCarouselControl", function() { return QCarouselControl; });
__webpack_require__.d(components_namespaceObject, "QChatMessage", function() { return QChatMessage; });
__webpack_require__.d(components_namespaceObject, "QCheckbox", function() { return QCheckbox; });
__webpack_require__.d(components_namespaceObject, "QChip", function() { return QChip; });
__webpack_require__.d(components_namespaceObject, "QCircularProgress", function() { return QCircularProgress; });
__webpack_require__.d(components_namespaceObject, "QColor", function() { return QColor; });
__webpack_require__.d(components_namespaceObject, "QDate", function() { return QDate; });
__webpack_require__.d(components_namespaceObject, "QDialog", function() { return QDialog; });
__webpack_require__.d(components_namespaceObject, "QDrawer", function() { return QDrawer; });
__webpack_require__.d(components_namespaceObject, "QEditor", function() { return QEditor; });
__webpack_require__.d(components_namespaceObject, "QExpansionItem", function() { return QExpansionItem; });
__webpack_require__.d(components_namespaceObject, "QFab", function() { return QFab; });
__webpack_require__.d(components_namespaceObject, "QFabAction", function() { return QFabAction; });
__webpack_require__.d(components_namespaceObject, "QField", function() { return QField; });
__webpack_require__.d(components_namespaceObject, "QFooter", function() { return QFooter; });
__webpack_require__.d(components_namespaceObject, "QForm", function() { return QForm; });
__webpack_require__.d(components_namespaceObject, "QHeader", function() { return QHeader; });
__webpack_require__.d(components_namespaceObject, "QIcon", function() { return QIcon; });
__webpack_require__.d(components_namespaceObject, "QImg", function() { return QImg; });
__webpack_require__.d(components_namespaceObject, "QInfiniteScroll", function() { return QInfiniteScroll; });
__webpack_require__.d(components_namespaceObject, "QInnerLoading", function() { return QInnerLoading; });
__webpack_require__.d(components_namespaceObject, "QInput", function() { return QInput; });
__webpack_require__.d(components_namespaceObject, "QIntersection", function() { return QIntersection; });
__webpack_require__.d(components_namespaceObject, "QList", function() { return QList; });
__webpack_require__.d(components_namespaceObject, "QItem", function() { return QItem; });
__webpack_require__.d(components_namespaceObject, "QItemSection", function() { return QItemSection; });
__webpack_require__.d(components_namespaceObject, "QItemLabel", function() { return QItemLabel; });
__webpack_require__.d(components_namespaceObject, "QKnob", function() { return QKnob; });
__webpack_require__.d(components_namespaceObject, "QLayout", function() { return QLayout; });
__webpack_require__.d(components_namespaceObject, "QMarkupTable", function() { return QMarkupTable; });
__webpack_require__.d(components_namespaceObject, "QMenu", function() { return QMenu; });
__webpack_require__.d(components_namespaceObject, "QNoSsr", function() { return QNoSsr; });
__webpack_require__.d(components_namespaceObject, "QOptionGroup", function() { return QOptionGroup; });
__webpack_require__.d(components_namespaceObject, "QPage", function() { return QPage; });
__webpack_require__.d(components_namespaceObject, "QPageContainer", function() { return QPageContainer; });
__webpack_require__.d(components_namespaceObject, "QPageScroller", function() { return QPageScroller; });
__webpack_require__.d(components_namespaceObject, "QPageSticky", function() { return QPageSticky; });
__webpack_require__.d(components_namespaceObject, "QPagination", function() { return QPagination; });
__webpack_require__.d(components_namespaceObject, "QParallax", function() { return QParallax; });
__webpack_require__.d(components_namespaceObject, "QPopupEdit", function() { return QPopupEdit; });
__webpack_require__.d(components_namespaceObject, "QPopupProxy", function() { return QPopupProxy; });
__webpack_require__.d(components_namespaceObject, "QLinearProgress", function() { return QLinearProgress; });
__webpack_require__.d(components_namespaceObject, "QPullToRefresh", function() { return QPullToRefresh; });
__webpack_require__.d(components_namespaceObject, "QRadio", function() { return QRadio; });
__webpack_require__.d(components_namespaceObject, "QRange", function() { return QRange; });
__webpack_require__.d(components_namespaceObject, "QRating", function() { return QRating; });
__webpack_require__.d(components_namespaceObject, "QResizeObserver", function() { return QResizeObserver; });
__webpack_require__.d(components_namespaceObject, "QScrollArea", function() { return QScrollArea; });
__webpack_require__.d(components_namespaceObject, "QScrollObserver", function() { return QScrollObserver; });
__webpack_require__.d(components_namespaceObject, "QSelect", function() { return QSelect; });
__webpack_require__.d(components_namespaceObject, "QSeparator", function() { return QSeparator; });
__webpack_require__.d(components_namespaceObject, "QSkeleton", function() { return QSkeleton; });
__webpack_require__.d(components_namespaceObject, "QSlideItem", function() { return QSlideItem; });
__webpack_require__.d(components_namespaceObject, "QSlideTransition", function() { return QSlideTransition; });
__webpack_require__.d(components_namespaceObject, "QSlider", function() { return QSlider; });
__webpack_require__.d(components_namespaceObject, "QSpace", function() { return QSpace; });
__webpack_require__.d(components_namespaceObject, "QSpinner", function() { return QSpinner; });
__webpack_require__.d(components_namespaceObject, "QSpinnerAudio", function() { return QSpinnerAudio; });
__webpack_require__.d(components_namespaceObject, "QSpinnerBall", function() { return QSpinnerBall; });
__webpack_require__.d(components_namespaceObject, "QSpinnerBars", function() { return QSpinnerBars; });
__webpack_require__.d(components_namespaceObject, "QSpinnerComment", function() { return QSpinnerComment; });
__webpack_require__.d(components_namespaceObject, "QSpinnerCube", function() { return QSpinnerCube; });
__webpack_require__.d(components_namespaceObject, "QSpinnerDots", function() { return QSpinnerDots; });
__webpack_require__.d(components_namespaceObject, "QSpinnerFacebook", function() { return QSpinnerFacebook; });
__webpack_require__.d(components_namespaceObject, "QSpinnerGears", function() { return QSpinnerGears; });
__webpack_require__.d(components_namespaceObject, "QSpinnerGrid", function() { return QSpinnerGrid; });
__webpack_require__.d(components_namespaceObject, "QSpinnerHearts", function() { return QSpinnerHearts; });
__webpack_require__.d(components_namespaceObject, "QSpinnerHourglass", function() { return QSpinnerHourglass; });
__webpack_require__.d(components_namespaceObject, "QSpinnerInfinity", function() { return QSpinnerInfinity; });
__webpack_require__.d(components_namespaceObject, "QSpinnerIos", function() { return QSpinnerIos; });
__webpack_require__.d(components_namespaceObject, "QSpinnerOval", function() { return QSpinnerOval; });
__webpack_require__.d(components_namespaceObject, "QSpinnerPie", function() { return QSpinnerPie; });
__webpack_require__.d(components_namespaceObject, "QSpinnerPuff", function() { return QSpinnerPuff; });
__webpack_require__.d(components_namespaceObject, "QSpinnerRadio", function() { return QSpinnerRadio; });
__webpack_require__.d(components_namespaceObject, "QSpinnerRings", function() { return QSpinnerRings; });
__webpack_require__.d(components_namespaceObject, "QSpinnerTail", function() { return QSpinnerTail; });
__webpack_require__.d(components_namespaceObject, "QSplitter", function() { return QSplitter; });
__webpack_require__.d(components_namespaceObject, "QStep", function() { return QStep; });
__webpack_require__.d(components_namespaceObject, "QStepper", function() { return QStepper; });
__webpack_require__.d(components_namespaceObject, "QStepperNavigation", function() { return QStepperNavigation; });
__webpack_require__.d(components_namespaceObject, "QTabPanels", function() { return QTabPanels; });
__webpack_require__.d(components_namespaceObject, "QTabPanel", function() { return QTabPanel; });
__webpack_require__.d(components_namespaceObject, "QTable", function() { return QTable; });
__webpack_require__.d(components_namespaceObject, "QTh", function() { return QTh; });
__webpack_require__.d(components_namespaceObject, "QTr", function() { return QTr; });
__webpack_require__.d(components_namespaceObject, "QTd", function() { return QTd; });
__webpack_require__.d(components_namespaceObject, "QTabs", function() { return QTabs; });
__webpack_require__.d(components_namespaceObject, "QTab", function() { return QTab; });
__webpack_require__.d(components_namespaceObject, "QRouteTab", function() { return QRouteTab; });
__webpack_require__.d(components_namespaceObject, "QTime", function() { return QTime; });
__webpack_require__.d(components_namespaceObject, "QTimeline", function() { return QTimeline; });
__webpack_require__.d(components_namespaceObject, "QTimelineEntry", function() { return QTimelineEntry; });
__webpack_require__.d(components_namespaceObject, "QToggle", function() { return QToggle; });
__webpack_require__.d(components_namespaceObject, "QToolbar", function() { return QToolbar; });
__webpack_require__.d(components_namespaceObject, "QToolbarTitle", function() { return QToolbarTitle; });
__webpack_require__.d(components_namespaceObject, "QTooltip", function() { return QTooltip; });
__webpack_require__.d(components_namespaceObject, "QTree", function() { return QTree; });
__webpack_require__.d(components_namespaceObject, "QUploader", function() { return QUploader; });
__webpack_require__.d(components_namespaceObject, "QUploaderBase", function() { return QUploaderBase; });
__webpack_require__.d(components_namespaceObject, "QUploaderAddTrigger", function() { return QUploaderAddTrigger; });
__webpack_require__.d(components_namespaceObject, "QVideo", function() { return QVideo; });
__webpack_require__.d(components_namespaceObject, "QVirtualScroll", function() { return QVirtualScroll; });
var directives_namespaceObject = {};
__webpack_require__.r(directives_namespaceObject);
__webpack_require__.d(directives_namespaceObject, "ClosePopup", function() { return ClosePopup; });
__webpack_require__.d(directives_namespaceObject, "GoBack", function() { return GoBack; });
__webpack_require__.d(directives_namespaceObject, "Intersection", function() { return Intersection; });
__webpack_require__.d(directives_namespaceObject, "Mutation", function() { return Mutation; });
__webpack_require__.d(directives_namespaceObject, "Ripple", function() { return Ripple; });
__webpack_require__.d(directives_namespaceObject, "ScrollFire", function() { return ScrollFire; });
__webpack_require__.d(directives_namespaceObject, "Scroll", function() { return Scroll; });
__webpack_require__.d(directives_namespaceObject, "TouchHold", function() { return TouchHold; });
__webpack_require__.d(directives_namespaceObject, "TouchPan", function() { return TouchPan; });
__webpack_require__.d(directives_namespaceObject, "TouchRepeat", function() { return TouchRepeat; });
__webpack_require__.d(directives_namespaceObject, "TouchSwipe", function() { return TouchSwipe; });
var plugins_namespaceObject = {};
__webpack_require__.r(plugins_namespaceObject);
__webpack_require__.d(plugins_namespaceObject, "AddressbarColor", function() { return AddressbarColor; });
__webpack_require__.d(plugins_namespaceObject, "AppFullscreen", function() { return AppFullscreen; });
__webpack_require__.d(plugins_namespaceObject, "AppVisibility", function() { return AppVisibility; });
__webpack_require__.d(plugins_namespaceObject, "BottomSheet", function() { return plugins_BottomSheet; });
__webpack_require__.d(plugins_namespaceObject, "Cookies", function() { return Cookies; });
__webpack_require__.d(plugins_namespaceObject, "Dark", function() { return plugins_Dark; });
__webpack_require__.d(plugins_namespaceObject, "Dialog", function() { return Dialog; });
__webpack_require__.d(plugins_namespaceObject, "LoadingBar", function() { return LoadingBar; });
__webpack_require__.d(plugins_namespaceObject, "Loading", function() { return plugins_Loading; });
__webpack_require__.d(plugins_namespaceObject, "Meta", function() { return Meta; });
__webpack_require__.d(plugins_namespaceObject, "Notify", function() { return Notify; });
__webpack_require__.d(plugins_namespaceObject, "Platform", function() { return plugins_Platform; });
__webpack_require__.d(plugins_namespaceObject, "Screen", function() { return Screen; });
__webpack_require__.d(plugins_namespaceObject, "LocalStorage", function() { return LocalStorage; });
__webpack_require__.d(plugins_namespaceObject, "SessionStorage", function() { return SessionStorage; });

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
// This file is imported into lib/wc client bundles.

if (typeof window !== 'undefined') {
  if (true) {
    __webpack_require__("f6fd")
  }

  var setPublicPath_i
  if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))) {
    __webpack_require__.p = setPublicPath_i[1] // eslint-disable-line
  }
}

// Indicate to webpack that this file can be concatenated
/* harmony default export */ var setPublicPath = (null);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js
var vue_runtime_esm = __webpack_require__("2b0e");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"20acdd9a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!./node_modules/cache-loader/dist/cjs.js??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=30580dee&
var Appvue_type_template_id_30580dee_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('q-layout',{attrs:{"view":"lHh Lpr lFf"}},[_c('q-header',{staticClass:"glossy",attrs:{"elevated":""}},[_c('q-toolbar',[_c('q-btn',{attrs:{"flat":"","dense":"","round":"","aria-label":"Menu","icon":"menu"},on:{"click":function($event){_vm.leftDrawerOpen = !_vm.leftDrawerOpen}}}),_c('q-toolbar-title',[_vm._v(" Quasar App ")]),_c('div',[_vm._v("Quasar v"+_vm._s(_vm.$q.version))])],1)],1),_c('q-drawer',{attrs:{"show-if-above":"","bordered":"","content-class":"bg-grey-2"},model:{value:(_vm.leftDrawerOpen),callback:function ($$v) {_vm.leftDrawerOpen=$$v},expression:"leftDrawerOpen"}},[_c('q-list',[_c('q-item-label',{attrs:{"header":""}},[_vm._v("Essential Links")]),_c('q-item',{attrs:{"clickable":"","tag":"a","target":"_blank","href":"https://quasar.dev"}},[_c('q-item-section',{attrs:{"avatar":""}},[_c('q-icon',{attrs:{"name":"school"}})],1),_c('q-item-section',[_c('q-item-label',[_vm._v("Docs")]),_c('q-item-label',{attrs:{"caption":""}},[_vm._v("quasar.dev")])],1)],1),_c('q-item',{attrs:{"clickable":"","tag":"a","target":"_blank","href":"https://github.com/quasarframework/"}},[_c('q-item-section',{attrs:{"avatar":""}},[_c('q-icon',{attrs:{"name":"code"}})],1),_c('q-item-section',[_c('q-item-label',[_vm._v("Github")]),_c('q-item-label',{attrs:{"caption":""}},[_vm._v("github.com/quasarframework")])],1)],1),_c('q-item',{attrs:{"clickable":"","tag":"a","target":"_blank","href":"https://chat.quasar.dev"}},[_c('q-item-section',{attrs:{"avatar":""}},[_c('q-icon',{attrs:{"name":"chat"}})],1),_c('q-item-section',[_c('q-item-label',[_vm._v("Discord Chat Channel")]),_c('q-item-label',{attrs:{"caption":""}},[_vm._v("chat.quasar.dev")])],1)],1),_c('q-item',{attrs:{"clickable":"","tag":"a","target":"_blank","href":"https://forum.quasar.dev"}},[_c('q-item-section',{attrs:{"avatar":""}},[_c('q-icon',{attrs:{"name":"forum"}})],1),_c('q-item-section',[_c('q-item-label',[_vm._v("Forum")]),_c('q-item-label',{attrs:{"caption":""}},[_vm._v("forum.quasar.dev")])],1)],1),_c('q-item',{attrs:{"clickable":"","tag":"a","target":"_blank","href":"https://twitter.com/quasarframework"}},[_c('q-item-section',{attrs:{"avatar":""}},[_c('q-icon',{attrs:{"name":"rss_feed"}})],1),_c('q-item-section',[_c('q-item-label',[_vm._v("Twitter")]),_c('q-item-label',{attrs:{"caption":""}},[_vm._v("@quasarframework")])],1)],1)],1)],1),_c('q-page-container',[_c('HelloWorld')],1)],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/App.vue?vue&type=template&id=30580dee&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"20acdd9a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!./node_modules/cache-loader/dist/cjs.js??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HelloWorld.vue?vue&type=template&id=a70599c0&
var HelloWorldvue_type_template_id_a70599c0_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('q-page',{staticClass:"flex flex-center"},[_c('img',{attrs:{"alt":"Quasar logo","src":__webpack_require__("cf05")}})])}
var HelloWorldvue_type_template_id_a70599c0_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/HelloWorld.vue?vue&type=template&id=a70599c0&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!./node_modules/cache-loader/dist/cjs.js??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HelloWorld.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
/* harmony default export */ var HelloWorldvue_type_script_lang_js_ = ({
  name: 'HelloWorld'
});
// CONCATENATED MODULE: ./src/components/HelloWorld.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_HelloWorldvue_type_script_lang_js_ = (HelloWorldvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
var es_symbol = __webpack_require__("a4d3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
var es_array_filter = __webpack_require__("4de4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.for-each.js
var es_array_for_each = __webpack_require__("4160");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js
var es_object_get_own_property_descriptors = __webpack_require__("dbb4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
var web_dom_collections_for_each = __webpack_require__("159b");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
var es_array_includes = __webpack_require__("caad");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
var es_string_includes = __webpack_require__("2532");

// EXTERNAL MODULE: ./node_modules/quasar/package.json
var quasar_package = __webpack_require__("c0a8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js
var es_array_index_of = __webpack_require__("c975");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js
var es_object_assign = __webpack_require__("cca6");

// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Platform.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable no-useless-escape */

/* eslint-disable no-unused-expressions */

/* eslint-disable no-mixed-operators */

var isSSR = typeof window === 'undefined';
var fromSSR = false;
var onSSR = isSSR;
var iosEmulated = false;
var unpatchedClientBrowser;

function getMatch(userAgent, platformMatch) {
  var match = /(edge|edga|edgios)\/([\w.]+)/.exec(userAgent) || /(opr)[\/]([\w.]+)/.exec(userAgent) || /(vivaldi)[\/]([\w.]+)/.exec(userAgent) || /(chrome|crios)[\/]([\w.]+)/.exec(userAgent) || /(iemobile)[\/]([\w.]+)/.exec(userAgent) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(firefox|fxios)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+)/.exec(userAgent) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(userAgent) || /(msie) ([\w.]+)/.exec(userAgent) || userAgent.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(userAgent) || userAgent.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(userAgent) || [];
  return {
    browser: match[5] || match[3] || match[1] || '',
    version: match[2] || match[4] || '0',
    versionNumber: match[4] || match[2] || '0',
    platform: platformMatch[0] || ''
  };
}

function getPlatformMatch(userAgent) {
  return /(ipad)/.exec(userAgent) || /(ipod)/.exec(userAgent) || /(windows phone)/.exec(userAgent) || /(iphone)/.exec(userAgent) || /(kindle)/.exec(userAgent) || /(silk)/.exec(userAgent) || /(android)/.exec(userAgent) || /(win)/.exec(userAgent) || /(mac)/.exec(userAgent) || /(linux)/.exec(userAgent) || /(cros)/.exec(userAgent) || /(playbook)/.exec(userAgent) || /(bb)/.exec(userAgent) || /(blackberry)/.exec(userAgent) || [];
}

var hasTouch = isSSR === false ? 'ontouchstart' in window || window.navigator.maxTouchPoints > 0 : false;

function applyIosCorrection(is) {
  unpatchedClientBrowser = {
    is: Object.assign({}, is)
  };
  delete is.mac;
  delete is.desktop;
  var platform = Math.min(window.innerHeight, window.innerWidth) > 414 ? 'ipad' : 'iphone';
  Object.assign(is, {
    mobile: true,
    ios: true,
    platform,
    [platform]: true
  });
}

function getPlatform(userAgent) {
  var platformMatch = getPlatformMatch(userAgent),
      matched = getMatch(userAgent, platformMatch),
      browser = {};

  if (matched.browser) {
    browser[matched.browser] = true;
    browser.version = matched.version;
    browser.versionNumber = parseInt(matched.versionNumber, 10);
  }

  if (matched.platform) {
    browser[matched.platform] = true;
  }

  var knownMobiles = browser.android || browser.ios || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser['windows phone']; // These are all considered mobile platforms, meaning they run a mobile browser

  if (knownMobiles === true || userAgent.indexOf('mobile') > -1) {
    browser.mobile = true;

    if (browser.edga || browser.edgios) {
      browser.edge = true;
      matched.browser = 'edge';
    } else if (browser.crios) {
      browser.chrome = true;
      matched.browser = 'chrome';
    } else if (browser.fxios) {
      browser.firefox = true;
      matched.browser = 'firefox';
    }
  } // If it's not mobile we should consider it's desktop platform, meaning it runs a desktop browser
  // It's a workaround for anonymized user agents
  // (browser.cros || browser.mac || browser.linux || browser.win)
  else {
      browser.desktop = true;
    } // Set iOS if on iPod, iPad or iPhone


  if (browser.ipod || browser.ipad || browser.iphone) {
    browser.ios = true;
  }

  if (browser['windows phone']) {
    browser.winphone = true;
    delete browser['windows phone'];
  } // Chrome, Opera 15+, Vivaldi and Safari are webkit based browsers


  if (browser.chrome || browser.opr || browser.safari || browser.vivaldi || // we expect unknown, non iOS mobile browsers to be webkit based
  browser.mobile === true && browser.ios !== true && knownMobiles !== true) {
    browser.webkit = true;
  } // IE11 has a new token so we will assign it msie to avoid breaking changes


  if (browser.rv || browser.iemobile) {
    matched.browser = 'ie';
    browser.ie = true;
  } // Blackberry browsers are marked as Safari on BlackBerry


  if (browser.safari && browser.blackberry || browser.bb) {
    matched.browser = 'blackberry';
    browser.blackberry = true;
  } // Playbook browsers are marked as Safari on Playbook


  if (browser.safari && browser.playbook) {
    matched.browser = 'playbook';
    browser.playbook = true;
  } // Opera 15+ are identified as opr


  if (browser.opr) {
    matched.browser = 'opera';
    browser.opera = true;
  } // Stock Android browsers are marked as Safari on Android.


  if (browser.safari && browser.android) {
    matched.browser = 'android';
    browser.android = true;
  } // Kindle browsers are marked as Safari on Kindle


  if (browser.safari && browser.kindle) {
    matched.browser = 'kindle';
    browser.kindle = true;
  } // Kindle Silk browsers are marked as Safari on Kindle


  if (browser.safari && browser.silk) {
    matched.browser = 'silk';
    browser.silk = true;
  }

  if (browser.vivaldi) {
    matched.browser = 'vivaldi';
    browser.vivaldi = true;
  } // Assign the name and platform variable


  browser.name = matched.browser;
  browser.platform = matched.platform;

  if (isSSR === false) {
    if (userAgent.indexOf('electron') > -1) {
      browser.electron = true;
    } else if (document.location.href.indexOf('-extension://') > -1) {
      browser.bex = true;
    } else if (window.Capacitor !== void 0) {
      browser.capacitor = true;
      browser.nativeMobile = true;
      browser.nativeMobileWrapper = 'capacitor';
    } else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {
      browser.cordova = true;
      browser.nativeMobile = true;
      browser.nativeMobileWrapper = 'cordova';
    } else if (hasTouch === true && browser.desktop === true && browser.mac === true && browser.safari === true) {
      /*
       * Correction needed for iOS since the default
       * setting on iPad is to request desktop view; if we have
       * touch support and the user agent says it's a
       * desktop, we infer that it's an iPhone/iPad with desktop view
       * so we must fix the false positives
       */
      applyIosCorrection(browser);
    }

    fromSSR = browser.nativeMobile === void 0 && browser.electron === void 0 && !!document.querySelector('[data-server-rendered]');

    if (fromSSR === true) {
      onSSR = true;
    }
  }

  return browser;
}

var userAgent = isSSR === false ? (navigator.userAgent || navigator.vendor || window.opera).toLowerCase() : '';
var ssrClient = {
  has: {
    touch: false,
    webStorage: false
  },
  within: {
    iframe: false
  }
}; // We export "client" for hydration error-free parts,
// like touch directives who do not (and must NOT) wait
// for the client takeover;
// Do NOT import this directly in your app, unless you really know
// what you are doing.

var client = isSSR === false ? {
  userAgent,
  is: getPlatform(userAgent),
  has: {
    touch: hasTouch,
    webStorage: (() => {
      try {
        if (window.localStorage) {
          return true;
        }
      } catch (e) {}

      return false;
    })()
  },
  within: {
    iframe: window.self !== window.top
  }
} : ssrClient;
var Platform = {
  install($q, queues) {
    if (isSSR === true) {
      // we're on server-side, so we push
      // to the server queue instead of
      // applying directly
      queues.server.push((q, ctx) => {
        q.platform = this.parseSSR(ctx.ssr);
      });
    } else if (fromSSR === true) {
      // must match with server-side before
      // client taking over in order to prevent
      // hydration errors
      Object.assign(this, client, unpatchedClientBrowser, ssrClient);
      unpatchedClientBrowser = void 0; // takeover should increase accuracy for
      // the rest of the props; we also avoid
      // hydration errors

      queues.takeover.push(q => {
        onSSR = fromSSR = false;
        Object.assign(q.platform, client);
      }); // we need to make platform reactive
      // for the takeover phase

      vue_runtime_esm["a" /* default */].util.defineReactive($q, 'platform', this);
    } else {
      // we don't have any business with SSR, so
      // directly applying...
      Object.assign(this, client);
      $q.platform = this;
    }
  }

};

if (isSSR === true) {
  Platform.parseSSR =
  /* ssrContext */
  ssr => {
    var userAgent = (ssr.req.headers['user-agent'] || ssr.req.headers['User-Agent'] || '').toLowerCase();
    return _objectSpread({}, client, {
      userAgent,
      is: getPlatform(userAgent)
    });
  };
} else {
  iosEmulated = client.is.ios === true && window.navigator.vendor.toLowerCase().indexOf('apple') === -1;
}

/* harmony default export */ var plugins_Platform = (Platform);
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/event.js



var listenOpts = {
  hasPassive: false,
  passiveCapture: true,
  notPassiveCapture: true
};

try {
  var event_opts = Object.defineProperty({}, 'passive', {
    get() {
      Object.assign(listenOpts, {
        hasPassive: true,
        passive: {
          passive: true
        },
        notPassive: {
          passive: false
        },
        passiveCapture: {
          passive: true,
          capture: true
        },
        notPassiveCapture: {
          passive: false,
          capture: true
        }
      });
    }

  });
  window.addEventListener('qtest', null, event_opts);
  window.removeEventListener('qtest', null, event_opts);
} catch (e) {}

function leftClick(e) {
  return e.button === 0;
}
function middleClick(e) {
  return e.button === 1;
}
function rightClick(e) {
  return e.button === 2;
}
function event_position(e) {
  if (e.touches && e.touches[0]) {
    e = e.touches[0];
  } else if (e.changedTouches && e.changedTouches[0]) {
    e = e.changedTouches[0];
  } else if (e.targetTouches && e.targetTouches[0]) {
    e = e.targetTouches[0];
  }

  return {
    top: e.clientY,
    left: e.clientX
  };
}
function getEventPath(e) {
  if (e.path) {
    return e.path;
  }

  if (e.composedPath) {
    return e.composedPath();
  }

  var path = [];
  var el = e.target;

  while (el) {
    path.push(el);

    if (el.tagName === 'HTML') {
      path.push(document);
      path.push(window);
      return path;
    }

    el = el.parentElement;
  }
} // Reasonable defaults

var LINE_HEIGHT = 40,
    PAGE_HEIGHT = 800;
function getMouseWheelDistance(e) {
  var x = e.deltaX,
      y = e.deltaY;

  if ((x || y) && e.deltaMode) {
    var multiplier = e.deltaMode === 1 ? LINE_HEIGHT : PAGE_HEIGHT;
    x *= multiplier;
    y *= multiplier;
  }

  if (e.shiftKey && !x) {
    var _ref = [x, y];
    y = _ref[0];
    x = _ref[1];
  }

  return {
    x,
    y
  };
}
function event_stop(e) {
  e.stopPropagation();
}
function prevent(e) {
  e.cancelable !== false && e.preventDefault();
}
function stopAndPrevent(e) {
  e.cancelable !== false && e.preventDefault();
  e.stopPropagation();
}
function preventDraggable(el, status) {
  if (el === void 0 || status === true && el.__dragPrevented === true) {
    return;
  }

  var fn = status === true ? el => {
    el.__dragPrevented = true;
    el.addEventListener('dragstart', prevent, listenOpts.notPassiveCapture);
  } : el => {
    delete el.__dragPrevented;
    el.removeEventListener('dragstart', prevent, listenOpts.notPassiveCapture);
  };
  el.querySelectorAll('a, img').forEach(fn);
}
function create(name) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$bubbles = _ref2.bubbles,
      bubbles = _ref2$bubbles === void 0 ? false : _ref2$bubbles,
      _ref2$cancelable = _ref2.cancelable,
      cancelable = _ref2$cancelable === void 0 ? false : _ref2$cancelable;

  try {
    return new Event(name, {
      bubbles,
      cancelable
    });
  } catch (e) {
    // IE doesn't support `new Event()`, so...
    var evt = document.createEvent('Event');
    evt.initEvent(name, bubbles, cancelable);
    return evt;
  }
}
/*
 * also update /types/utils/event.d.ts
 */

/* harmony default export */ var utils_event = ({
  listenOpts,
  leftClick,
  middleClick,
  rightClick,
  position: event_position,
  getEventPath,
  getMouseWheelDistance,
  stop: event_stop,
  prevent,
  stopAndPrevent,
  preventDraggable,
  create
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/debounce.js
/* harmony default export */ var debounce = (function (fn) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var immediate = arguments.length > 2 ? arguments[2] : undefined;
  var timeout;

  function debounced()
  /* ...args */
  {
    var args = arguments;

    var later = () => {
      timeout = void 0;

      if (immediate !== true) {
        fn.apply(this, args);
      }
    };

    clearTimeout(timeout);

    if (immediate === true && timeout === void 0) {
      fn.apply(this, args);
    }

    timeout = setTimeout(later, wait);
  }

  debounced.cancel = () => {
    clearTimeout(timeout);
  };

  return debounced;
});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Screen.js





var SIZE_LIST = ['sm', 'md', 'lg', 'xl'];
/* harmony default export */ var Screen = ({
  width: 0,
  height: 0,
  name: 'xs',
  sizes: {
    sm: 600,
    md: 1024,
    lg: 1440,
    xl: 1920
  },
  lt: {
    sm: true,
    md: true,
    lg: true,
    xl: true
  },
  gt: {
    xs: false,
    sm: false,
    md: false,
    lg: false
  },
  xs: true,
  sm: false,
  md: false,
  lg: false,
  xl: false,

  setSizes() {},

  setDebounce() {},

  install($q, queues, cfg) {
    if (isSSR === true) {
      $q.screen = this;
      return;
    }

    var classes = cfg.screen !== void 0 && cfg.screen.bodyClasses === true;

    var update = force => {
      var w = window.innerWidth,
          h = window.innerHeight;

      if (h !== this.height) {
        this.height = h;
      }

      if (w !== this.width) {
        this.width = w;
      } else if (force !== true) {
        return;
      }

      var s = this.sizes;
      this.gt.xs = w >= s.sm;
      this.gt.sm = w >= s.md;
      this.gt.md = w >= s.lg;
      this.gt.lg = w >= s.xl;
      this.lt.sm = w < s.sm;
      this.lt.md = w < s.md;
      this.lt.lg = w < s.lg;
      this.lt.xl = w < s.xl;
      this.xs = this.lt.sm;
      this.sm = this.gt.xs === true && this.lt.md === true;
      this.md = this.gt.sm === true && this.lt.lg === true;
      this.lg = this.gt.md === true && this.lt.xl === true;
      this.xl = this.gt.lg;
      s = this.xs === true && 'xs' || this.sm === true && 'sm' || this.md === true && 'md' || this.lg === true && 'lg' || 'xl';

      if (s !== this.name) {
        if (classes === true) {
          document.body.classList.remove("screen--".concat(this.name));
          document.body.classList.add("screen--".concat(s));
        }

        this.name = s;
      }
    };

    var updateEvt,
        updateSizes = {},
        updateDebounce = 16;

    this.setSizes = sizes => {
      SIZE_LIST.forEach(name => {
        if (sizes[name] !== void 0) {
          updateSizes[name] = sizes[name];
        }
      });
    };

    this.setDebounce = deb => {
      updateDebounce = deb;
    };

    var start = () => {
      var style = getComputedStyle(document.body),
          target = window.visualViewport !== void 0 ? window.visualViewport : window; // if css props available

      if (style.getPropertyValue('--q-size-sm')) {
        SIZE_LIST.forEach(name => {
          this.sizes[name] = parseInt(style.getPropertyValue("--q-size-".concat(name)), 10);
        });
      }

      this.setSizes = sizes => {
        SIZE_LIST.forEach(name => {
          if (sizes[name]) {
            this.sizes[name] = sizes[name];
          }
        });
        update(true);
      };

      this.setDebounce = delay => {
        updateEvt !== void 0 && target.removeEventListener('resize', updateEvt, listenOpts.passive);
        updateEvt = delay > 0 ? debounce(update, delay) : update;
        target.addEventListener('resize', updateEvt, listenOpts.passive);
      };

      this.setDebounce(updateDebounce);

      if (Object.keys(updateSizes).length > 0) {
        this.setSizes(updateSizes);
        updateSizes = void 0; // free up memory
      } else {
        update();
      }
    };

    if (fromSSR === true) {
      queues.takeover.push(start);
    } else {
      start();
    }

    vue_runtime_esm["a" /* default */].util.defineReactive($q, 'screen', this);
  }

});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
var es_string_replace = __webpack_require__("5319");

// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Dark.js



var Dark = {
  isActive: false,
  mode: false,

  install($q, queues, _ref) {
    var dark = _ref.dark;
    this.isActive = dark === true;

    if (isSSR === true) {
      queues.server.push((q, ctx) => {
        q.dark = {
          isActive: false,
          mode: false,
          set: val => {
            ctx.ssr.Q_BODY_CLASSES = ctx.ssr.Q_BODY_CLASSES.replace(' body--light', '').replace(' body--dark', '') + " body--".concat(val === true ? 'dark' : 'light');
            q.dark.isActive = val === true;
            q.dark.mode = val;
          },
          toggle: () => {
            q.dark.set(q.dark.isActive === false);
          }
        };
        q.dark.set(dark);
      });

      this.set = () => {};

      return;
    }

    var initialVal = dark !== void 0 ? dark : false;

    if (fromSSR === true) {
      var ssrSet = val => {
        this.__fromSSR = val;
      };

      var originalSet = this.set;
      this.set = ssrSet;
      ssrSet(initialVal);
      queues.takeover.push(() => {
        this.set = originalSet;
        this.set(this.__fromSSR);
      });
    } else {
      this.set(initialVal);
    }

    vue_runtime_esm["a" /* default */].util.defineReactive(this, 'isActive', this.isActive);
    vue_runtime_esm["a" /* default */].util.defineReactive($q, 'dark', this);
  },

  set(val) {
    this.mode = val;

    if (val === 'auto') {
      if (this.__media === void 0) {
        this.__media = window.matchMedia('(prefers-color-scheme: dark)');

        this.__updateMedia = () => {
          this.set('auto');
        };

        this.__media.addListener(this.__updateMedia);
      }

      val = this.__media.matches;
    } else if (this.__media !== void 0) {
      this.__media.removeListener(this.__updateMedia);

      this.__media = void 0;
    }

    this.isActive = val === true;
    document.body.classList.remove("body--".concat(val === true ? 'light' : 'dark'));
    document.body.classList.add("body--".concat(val === true ? 'dark' : 'light'));
  },

  toggle() {
    Dark.set(Dark.isActive === false);
  },

  __media: void 0
};
/* harmony default export */ var plugins_Dark = (Dark);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
var es_array_splice = __webpack_require__("a434");

// CONCATENATED MODULE: ./node_modules/quasar/src/history.js




var getTrue = () => true;

/* harmony default export */ var src_history = ({
  __history: [],
  add: () => {},
  remove: () => {},

  install($q, cfg) {
    if (isSSR === true || $q.platform.is.cordova !== true) {
      return;
    }

    this.add = entry => {
      if (entry.condition === void 0) {
        entry.condition = getTrue;
      }

      this.__history.push(entry);
    };

    this.remove = entry => {
      var index = this.__history.indexOf(entry);

      if (index >= 0) {
        this.__history.splice(index, 1);
      }
    };

    var exit = cfg.cordova === void 0 || cfg.cordova.backButtonExit !== false;
    document.addEventListener('deviceready', () => {
      document.addEventListener('backbutton', () => {
        if (this.__history.length) {
          var entry = this.__history[this.__history.length - 1];

          if (entry.condition() === true) {
            this.__history.pop();

            entry.handler();
          }
        } else if (exit && window.location.hash === '#/') {
          navigator.app.exitApp();
        } else {
          window.history.back();
        }
      }, false);
    });
  }

});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
var es_array_concat = __webpack_require__("99af");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
var es_array_map = __webpack_require__("d81d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
var es_string_split = __webpack_require__("1276");

// CONCATENATED MODULE: ./node_modules/quasar/lang/en-us.js

/* harmony default export */ var en_us = ({
  isoName: 'en-us',
  nativeName: 'English (US)',
  label: {
    clear: 'Clear',
    ok: 'OK',
    cancel: 'Cancel',
    close: 'Close',
    set: 'Set',
    select: 'Select',
    reset: 'Reset',
    remove: 'Remove',
    update: 'Update',
    create: 'Create',
    search: 'Search',
    filter: 'Filter',
    refresh: 'Refresh'
  },
  date: {
    days: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    daysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    firstDayOfWeek: 0,
    // 0-6, 0 - Sunday, 1 Monday, ...
    format24h: false
  },
  table: {
    noData: 'No data available',
    noResults: 'No matching records found',
    loading: 'Loading...',
    selectedRecords: function selectedRecords(rows) {
      return rows === 1 ? '1 record selected.' : (rows === 0 ? 'No' : rows) + ' records selected.';
    },
    recordsPerPage: 'Records per page:',
    allRows: 'All',
    pagination: function pagination(start, end, total) {
      return start + '-' + end + ' of ' + total;
    },
    columns: 'Columns'
  },
  editor: {
    url: 'URL',
    bold: 'Bold',
    italic: 'Italic',
    strikethrough: 'Strikethrough',
    underline: 'Underline',
    unorderedList: 'Unordered List',
    orderedList: 'Ordered List',
    subscript: 'Subscript',
    superscript: 'Superscript',
    hyperlink: 'Hyperlink',
    toggleFullscreen: 'Toggle Fullscreen',
    quote: 'Quote',
    left: 'Left align',
    center: 'Center align',
    right: 'Right align',
    justify: 'Justify align',
    print: 'Print',
    outdent: 'Decrease indentation',
    indent: 'Increase indentation',
    removeFormat: 'Remove formatting',
    formatting: 'Formatting',
    fontSize: 'Font Size',
    align: 'Align',
    hr: 'Insert Horizontal Rule',
    undo: 'Undo',
    redo: 'Redo',
    heading1: 'Heading 1',
    heading2: 'Heading 2',
    heading3: 'Heading 3',
    heading4: 'Heading 4',
    heading5: 'Heading 5',
    heading6: 'Heading 6',
    paragraph: 'Paragraph',
    code: 'Code',
    size1: 'Very small',
    size2: 'A bit small',
    size3: 'Normal',
    size4: 'Medium-large',
    size5: 'Big',
    size6: 'Very big',
    size7: 'Maximum',
    defaultFont: 'Default Font',
    viewSource: 'View Source'
  },
  tree: {
    noNodes: 'No nodes available',
    noResults: 'No matching nodes found'
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/lang.js





/* harmony default export */ var src_lang = ({
  install($q, queues, lang) {
    var _this = this;

    if (isSSR === true) {
      queues.server.push((q, ctx) => {
        var opt = {
          lang: q.lang.isoName,
          dir: q.lang.rtl === true ? 'rtl' : 'ltr'
        },
            fn = ctx.ssr.setHtmlAttrs;

        if (typeof fn === 'function') {
          fn(opt);
        } else {
          ctx.ssr.Q_HTML_ATTRS = Object.keys(opt).map(key => "".concat(key, "=").concat(opt[key])).join(' ');
        }
      });
    }

    this.set = function () {
      var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : en_us;
      lang.set = _this.set;
      lang.getLocale = _this.getLocale;
      lang.rtl = lang.rtl === true || false;

      if (isSSR === false) {
        var el = document.documentElement;
        el.setAttribute('dir', lang.rtl ? 'rtl' : 'ltr');
        el.setAttribute('lang', lang.isoName);
      }

      if (isSSR === true || $q.lang !== void 0) {
        $q.lang = lang;
      } else {
        vue_runtime_esm["a" /* default */].util.defineReactive($q, 'lang', lang);
      }

      _this.isoName = lang.isoName;
      _this.nativeName = lang.nativeName;
      _this.props = lang;
    };

    this.set(lang);
  },

  getLocale() {
    if (isSSR === true) {
      return;
    }

    var val = navigator.language || navigator.languages[0] || navigator.browserLanguage || navigator.userLanguage || navigator.systemLanguage;

    if (val) {
      return val.toLowerCase();
    }
  }

});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
var es_array_slice = __webpack_require__("fb6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
var es_object_to_string = __webpack_require__("d3b7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
var es_regexp_to_string = __webpack_require__("25f0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js
var es_string_starts_with = __webpack_require__("2ca0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js
var es_string_trim = __webpack_require__("498a");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/colors.js









function rgbToHex(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  var alpha = a !== void 0;
  r = Math.round(r);
  g = Math.round(g);
  b = Math.round(b);

  if (r > 255 || g > 255 || b > 255 || alpha && a > 100) {
    throw new TypeError('Expected 3 numbers below 256 (and optionally one below 100)');
  }

  a = alpha ? (Math.round(255 * a / 100) | 1 << 8).toString(16).slice(1) : '';
  return '#' + (b | g << 8 | r << 16 | 1 << 24).toString(16).slice(1) + a;
}
function rgbToString(_ref2) {
  var r = _ref2.r,
      g = _ref2.g,
      b = _ref2.b,
      a = _ref2.a;
  return "rgb".concat(a !== void 0 ? 'a' : '', "(").concat(r, ",").concat(g, ",").concat(b).concat(a !== void 0 ? ',' + a / 100 : '', ")");
}
function stringToRgb(str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }

  str = str.replace(/ /g, '');

  if (str.startsWith('#')) {
    return hexToRgb(str);
  }

  var model = str.substring(str.indexOf('(') + 1, str.length - 1).split(',');
  return {
    r: parseInt(model[0], 10),
    g: parseInt(model[1], 10),
    b: parseInt(model[2], 10),
    a: model[3] !== void 0 ? parseFloat(model[3]) * 100 : void 0
  };
}
function hexToRgb(hex) {
  if (typeof hex !== 'string') {
    throw new TypeError('Expected a string');
  }

  hex = hex.replace(/^#/, '');

  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  } else if (hex.length === 4) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
  }

  var num = parseInt(hex, 16);
  return hex.length > 6 ? {
    r: num >> 24 & 255,
    g: num >> 16 & 255,
    b: num >> 8 & 255,
    a: Math.round((num & 255) / 2.55)
  } : {
    r: num >> 16,
    g: num >> 8 & 255,
    b: num & 255
  };
}
function hsvToRgb(_ref3) {
  var h = _ref3.h,
      s = _ref3.s,
      v = _ref3.v,
      a = _ref3.a;
  var r, g, b, i, f, p, q, t;
  s = s / 100;
  v = v / 100;
  h = h / 360;
  i = Math.floor(h * 6);
  f = h * 6 - i;
  p = v * (1 - s);
  q = v * (1 - f * s);
  t = v * (1 - (1 - f) * s);

  switch (i % 6) {
    case 0:
      r = v;
      g = t;
      b = p;
      break;

    case 1:
      r = q;
      g = v;
      b = p;
      break;

    case 2:
      r = p;
      g = v;
      b = t;
      break;

    case 3:
      r = p;
      g = q;
      b = v;
      break;

    case 4:
      r = t;
      g = p;
      b = v;
      break;

    case 5:
      r = v;
      g = p;
      b = q;
      break;
  }

  return {
    r: Math.round(r * 255),
    g: Math.round(g * 255),
    b: Math.round(b * 255),
    a
  };
}
function rgbToHsv(_ref4) {
  var r = _ref4.r,
      g = _ref4.g,
      b = _ref4.b,
      a = _ref4.a;
  var max = Math.max(r, g, b),
      min = Math.min(r, g, b),
      d = max - min,
      h,
      s = max === 0 ? 0 : d / max,
      v = max / 255;

  switch (max) {
    case min:
      h = 0;
      break;

    case r:
      h = g - b + d * (g < b ? 6 : 0);
      h /= 6 * d;
      break;

    case g:
      h = b - r + d * 2;
      h /= 6 * d;
      break;

    case b:
      h = r - g + d * 4;
      h /= 6 * d;
      break;
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    v: Math.round(v * 100),
    a
  };
}
var reRGBA = /^\s*rgb(a)?\s*\((\s*(\d+)\s*,\s*?){2}(\d+)\s*,?\s*([01]?\.?\d*?)?\s*\)\s*$/;
function textToRgb(color) {
  if (typeof color !== 'string') {
    throw new TypeError('Expected a string');
  }

  var m = reRGBA.exec(color);

  if (m) {
    var rgb = {
      r: Math.min(255, parseInt(m[2], 10)),
      g: Math.min(255, parseInt(m[3], 10)),
      b: Math.min(255, parseInt(m[4], 10))
    };

    if (m[1]) {
      rgb.a = Math.min(1, parseFloat(m[5]));
    }

    return rgb;
  }

  return hexToRgb(color);
}
/* works as darken if percent < 0 */

function lighten(color, percent) {
  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (typeof percent !== 'number') {
    throw new TypeError('Expected a numeric percent');
  }

  var rgb = textToRgb(color),
      t = percent < 0 ? 0 : 255,
      p = Math.abs(percent) / 100,
      R = rgb.r,
      G = rgb.g,
      B = rgb.b;
  return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
}
function luminosity(color) {
  if (typeof color !== 'string' && (!color || color.r === void 0)) {
    throw new TypeError('Expected a string or a {r, g, b} object as color');
  }

  var rgb = typeof color === 'string' ? textToRgb(color) : color,
      r = rgb.r / 255,
      g = rgb.g / 255,
      b = rgb.b / 255,
      R = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4),
      G = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4),
      B = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);
  return 0.2126 * R + 0.7152 * G + 0.0722 * B;
}
function brightness(color) {
  if (typeof color !== 'string' && (!color || color.r === void 0)) {
    throw new TypeError('Expected a string or a {r, g, b} object as color');
  }

  var rgb = typeof color === 'string' ? textToRgb(color) : color;
  return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
}
function blend(fgColor, bgColor) {
  if (typeof fgColor !== 'string' && (!fgColor || fgColor.r === void 0)) {
    throw new TypeError('Expected a string or a {r, g, b[, a]} object as fgColor');
  }

  if (typeof bgColor !== 'string' && (!bgColor || bgColor.r === void 0)) {
    throw new TypeError('Expected a string or a {r, g, b[, a]} object as bgColor');
  }

  var rgb1 = typeof fgColor === 'string' ? textToRgb(fgColor) : fgColor,
      r1 = rgb1.r / 255,
      g1 = rgb1.g / 255,
      b1 = rgb1.b / 255,
      a1 = rgb1.a !== void 0 ? rgb1.a / 100 : 1,
      rgb2 = typeof bgColor === 'string' ? textToRgb(bgColor) : bgColor,
      r2 = rgb2.r / 255,
      g2 = rgb2.g / 255,
      b2 = rgb2.b / 255,
      a2 = rgb2.a !== void 0 ? rgb2.a / 100 : 1,
      a = a1 + a2 * (1 - a1),
      r = Math.round((r1 * a1 + r2 * a2 * (1 - a1)) / a * 255),
      g = Math.round((g1 * a1 + g2 * a2 * (1 - a1)) / a * 255),
      b = Math.round((b1 * a1 + b2 * a2 * (1 - a1)) / a * 255);
  var ret = {
    r,
    g,
    b,
    a: Math.round(a * 100)
  };
  return typeof fgColor === 'string' ? rgbToHex(ret) : ret;
}
function changeAlpha(color, offset) {
  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (offset === void 0 || offset < -1 || offset > 1) {
    throw new TypeError('Expected offset to be between -1 and 1');
  }

  var _textToRgb = textToRgb(color),
      r = _textToRgb.r,
      g = _textToRgb.g,
      b = _textToRgb.b,
      a = _textToRgb.a;

  var alpha = a !== void 0 ? a / 100 : 0;
  return rgbToHex({
    r,
    g,
    b,
    a: Math.round(Math.min(1, Math.max(0, alpha + offset)) * 100)
  });
}
function setBrand(color, value) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (typeof value !== 'string') {
    throw new TypeError('Expected a string as value');
  }

  if (!(element instanceof Element)) {
    throw new TypeError('Expected a DOM element');
  }

  element.style.setProperty("--q-color-".concat(color), value);
}
function getBrand(color) {
  var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;

  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (!(element instanceof Element)) {
    throw new TypeError('Expected a DOM element');
  }

  return getComputedStyle(element).getPropertyValue("--q-color-".concat(color)).trim() || null;
}
/* harmony default export */ var colors = ({
  rgbToHex,
  hexToRgb,
  hsvToRgb,
  rgbToHsv,
  textToRgb,
  lighten,
  luminosity,
  brightness,
  blend,
  changeAlpha,
  setBrand,
  getBrand
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/key-composition.js



var lastKeyCompositionStatus = false;
function onKeyDownComposition(evt) {
  lastKeyCompositionStatus = evt.isComposing === true;
}
function shouldIgnoreKey(evt) {
  return lastKeyCompositionStatus === true || evt !== Object(evt) || evt.isComposing === true || evt.qKeyEvent === true;
}
function isKeyCode(evt, keyCodes) {
  return lastKeyCompositionStatus === true || evt !== Object(evt) || evt.isComposing === true || evt.qKeyEvent === true ? false : [].concat(keyCodes).includes(evt.keyCode);
}
// CONCATENATED MODULE: ./node_modules/quasar/src/body.js






function getMobilePlatform(is) {
  if (is.ios === true) return 'ios';
  if (is.android === true) return 'android';
}

function getBodyClasses(_ref, cfg) {
  var is = _ref.is,
      has = _ref.has,
      within = _ref.within;
  var cls = [is.desktop === true ? 'desktop' : 'mobile', "".concat(has.touch === false ? 'no-' : '', "touch")];

  if (is.mobile === true) {
    var mobile = getMobilePlatform(is);
    mobile !== void 0 && cls.push('platform-' + mobile);
  }

  if (is.nativeMobile === true) {
    var type = is.nativeMobileWrapper;
    cls.push(type);
    cls.push('native-mobile');

    if (is.ios === true && (cfg[type] === void 0 || cfg[type].iosStatusBarPadding !== false)) {
      cls.push('q-ios-padding');
    }
  } else if (is.electron === true) {
    cls.push('electron');
  } else if (is.bex === true) {
    cls.push('bex');
  }

  within.iframe === true && cls.push('within-iframe');
  return cls;
}

function clientApply(cls) {
  if (client.is.ie === true && client.is.versionNumber === 11) {
    cls.forEach(c => document.body.classList.add(c));
  } else {
    document.body.classList.add.apply(document.body.classList, cls);
  }
} // SSR takeover corrections


function clientUpdate() {
  var cls = [];

  if (client.has.touch === true) {
    document.body.classList.remove('no-touch');
    cls.push('touch');
  }

  client.within.iframe === true && cls.push('within-iframe');
  cls.length > 0 && clientApply(cls);
}

function setColors(brand) {
  for (var color in brand) {
    setBrand(color, brand[color]);
  }
}

/* harmony default export */ var src_body = ({
  install(queues, cfg) {
    if (isSSR === true) {
      queues.server.push((q, ctx) => {
        var cls = getBodyClasses(q.platform, cfg),
            fn = ctx.ssr.setBodyClasses;

        if (cfg.screen !== void 0 && cfg.screen.bodyClass === true) {
          cls.push('screen--xs');
        }

        if (typeof fn === 'function') {
          fn(cls);
        } else {
          ctx.ssr.Q_BODY_CLASSES = cls.join(' ');
        }
      });
    } else {
      if (fromSSR === true) {
        clientUpdate();
      } else {
        clientApply(getBodyClasses(client, cfg));
      }

      cfg.brand !== void 0 && setColors(cfg.brand);

      if (client.is.ios === true) {
        // needed for iOS button active state
        document.body.addEventListener('touchstart', () => {});
      }

      window.addEventListener('keydown', onKeyDownComposition, true);
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/icon-set/material-icons.js
/* harmony default export */ var material_icons = ({
  name: 'material-icons',
  type: {
    positive: 'check_circle',
    negative: 'warning',
    info: 'info',
    warning: 'priority_high'
  },
  arrow: {
    up: 'arrow_upward',
    right: 'arrow_forward',
    down: 'arrow_downward',
    left: 'arrow_back',
    dropdown: 'arrow_drop_down'
  },
  chevron: {
    left: 'chevron_left',
    right: 'chevron_right'
  },
  colorPicker: {
    spectrum: 'gradient',
    tune: 'tune',
    palette: 'style'
  },
  pullToRefresh: {
    icon: 'refresh'
  },
  carousel: {
    left: 'chevron_left',
    right: 'chevron_right',
    navigationIcon: 'lens',
    thumbnails: 'view_carousel'
  },
  chip: {
    remove: 'cancel',
    selected: 'check'
  },
  datetime: {
    arrowLeft: 'chevron_left',
    arrowRight: 'chevron_right',
    now: 'access_time',
    today: 'today'
  },
  editor: {
    bold: 'format_bold',
    italic: 'format_italic',
    strikethrough: 'strikethrough_s',
    underline: 'format_underlined',
    unorderedList: 'format_list_bulleted',
    orderedList: 'format_list_numbered',
    subscript: 'vertical_align_bottom',
    superscript: 'vertical_align_top',
    hyperlink: 'link',
    toggleFullscreen: 'fullscreen',
    quote: 'format_quote',
    left: 'format_align_left',
    center: 'format_align_center',
    right: 'format_align_right',
    justify: 'format_align_justify',
    print: 'print',
    outdent: 'format_indent_decrease',
    indent: 'format_indent_increase',
    removeFormat: 'format_clear',
    formatting: 'text_format',
    fontSize: 'format_size',
    align: 'format_align_left',
    hr: 'remove',
    undo: 'undo',
    redo: 'redo',
    heading: 'format_size',
    code: 'code',
    size: 'format_size',
    font: 'font_download',
    viewSource: 'code'
  },
  expansionItem: {
    icon: 'keyboard_arrow_down',
    denseIcon: 'arrow_drop_down'
  },
  fab: {
    icon: 'add',
    activeIcon: 'close'
  },
  field: {
    clear: 'cancel',
    error: 'error'
  },
  pagination: {
    first: 'first_page',
    prev: 'keyboard_arrow_left',
    next: 'keyboard_arrow_right',
    last: 'last_page'
  },
  rating: {
    icon: 'grade'
  },
  stepper: {
    done: 'check',
    active: 'edit',
    error: 'warning'
  },
  tabs: {
    left: 'chevron_left',
    right: 'chevron_right',
    up: 'keyboard_arrow_up',
    down: 'keyboard_arrow_down'
  },
  table: {
    arrowUp: 'arrow_upward',
    warning: 'warning',
    prevPage: 'chevron_left',
    nextPage: 'chevron_right'
  },
  tree: {
    icon: 'play_arrow'
  },
  uploader: {
    done: 'done',
    clear: 'clear',
    add: 'add_box',
    upload: 'cloud_upload',
    removeQueue: 'clear_all',
    removeUploaded: 'done_all'
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/icon-set.js



/* harmony default export */ var icon_set = ({
  install($q, iconSet) {
    var _this = this;

    this.set = function () {
      var iconDef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : material_icons;
      iconDef.set = _this.set;

      if (isSSR === true || $q.iconSet !== void 0) {
        $q.iconSet = iconDef;
      } else {
        vue_runtime_esm["a" /* default */].util.defineReactive($q, 'iconSet', iconDef);
      }

      _this.name = iconDef.name;
      _this.def = iconDef;
    };

    this.set(iconSet);

    if (isSSR !== true) {
      vue_runtime_esm["a" /* default */].util.defineReactive($q, 'iconMapFn', void 0);
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/install.js












var autoInstalled = [plugins_Platform, Screen, plugins_Dark];
var install_queues = {
  server: [],
  // on SSR update
  takeover: [] // on client takeover

};
var install_$q = {
  version: quasar_package["a" /* version */]
};
/* harmony default export */ var install = (function (Vue) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (this.__qInstalled === true) {
    return;
  }

  this.__qInstalled = true;
  var cfg = opts.config || {}; // required plugins

  plugins_Platform.install(install_$q, install_queues);
  src_body.install(install_queues, cfg);
  plugins_Dark.install(install_$q, install_queues, cfg);
  Screen.install(install_$q, install_queues, cfg);
  src_history.install(install_$q, cfg);
  src_lang.install(install_$q, install_queues, opts.lang);
  icon_set.install(install_$q, opts.iconSet);

  if (isSSR === true) {
    Vue.mixin({
      beforeCreate() {
        this.$q = this.$root.$options.$q;
      }

    });
  } else {
    Vue.prototype.$q = install_$q;
  }

  opts.components && Object.keys(opts.components).forEach(key => {
    var c = opts.components[key];

    if (typeof c === 'function') {
      Vue.component(c.options.name, c);
    }
  });
  opts.directives && Object.keys(opts.directives).forEach(key => {
    var d = opts.directives[key];

    if (d.name !== undefined && d.unbind !== void 0) {
      Vue.directive(d.name, d);
    }
  });

  if (opts.plugins) {
    var param = {
      $q: install_$q,
      queues: install_queues,
      cfg
    };
    Object.keys(opts.plugins).forEach(key => {
      var p = opts.plugins[key];

      if (typeof p.install === 'function' && autoInstalled.includes(p) === false) {
        p.install(param);
      }
    });
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/ssr-update.js











function ssr_update_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function ssr_update_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ssr_update_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ssr_update_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var mixin = {
  mounted() {
    install_queues.takeover.forEach(run => {
      run(this.$q);
    });
  }

};
/* harmony default export */ var ssr_update = (function (ctx) {
  if (ctx.ssr) {
    var q = ssr_update_objectSpread({}, install_$q);

    Object.assign(ctx.ssr, {
      Q_HEAD_TAGS: '',
      Q_BODY_ATTRS: '',
      Q_BODY_TAGS: ''
    });
    install_queues.server.forEach(run => {
      run(q, ctx);
    });
    ctx.app.$q = q;
  } else {
    var mixins = ctx.app.mixins || [];

    if (mixins.includes(mixin) === false) {
      ctx.app.mixins = mixins.concat(mixin);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/vue-plugin.js





/* harmony default export */ var vue_plugin = ({
  version: quasar_package["a" /* version */],
  install: install,
  lang: src_lang,
  iconSet: icon_set,
  ssrUpdate: ssr_update
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reverse.js
var es_array_reverse = __webpack_require__("26e9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.to-fixed.js
var es_number_to_fixed = __webpack_require__("b680");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/format.js



var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
function humanStorageSize(bytes) {
  var u = 0;

  while (parseInt(bytes, 10) >= 1024 && u < units.length - 1) {
    bytes /= 1024;
    ++u;
  }

  return "".concat(bytes.toFixed(1), " ").concat(units[u]);
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function between(v, min, max) {
  return max <= min ? min : Math.min(max, Math.max(min, v));
}
function normalizeToInterval(v, min, max) {
  if (max <= min) {
    return min;
  }

  var size = max - min + 1;
  var index = min + (v - min) % size;

  if (index < min) {
    index = size + index;
  }

  return index === 0 ? 0 : index; // fix for (-a % a) => -0
}
function pad(v) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';

  if (v === void 0 || v === null) {
    return v;
  }

  var val = '' + v;
  return val.length >= length ? val : new Array(length - val.length + 1).join(char) + val;
}
/* harmony default export */ var format = ({
  humanStorageSize,
  capitalize,
  between,
  normalizeToInterval,
  pad
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/ajax-bar/QAjaxBar.js









var xhr = isSSR ? null : XMLHttpRequest,
    send = isSSR ? null : xhr.prototype.send,
    stackStart = [],
    stackStop = [];
var highjackCount = 0;

function translate(_ref) {
  var p = _ref.p,
      pos = _ref.pos,
      active = _ref.active,
      horiz = _ref.horiz,
      reverse = _ref.reverse,
      dir = _ref.dir;
  var x = 1,
      y = 1;

  if (horiz) {
    if (reverse) {
      x = -1;
    }

    if (pos === 'bottom') {
      y = -1;
    }

    return {
      transform: "translate3d(".concat(x * (p - 100), "%,").concat(active ? 0 : y * -200, "%,0)")
    };
  }

  if (reverse) {
    y = -1;
  }

  if (pos === 'right') {
    x = -1;
  }

  return {
    transform: "translate3d(".concat(active ? 0 : dir * x * -200, "%,").concat(y * (p - 100), "%,0)")
  };
}

function inc(p, amount) {
  if (typeof amount !== 'number') {
    if (p < 25) {
      amount = Math.random() * 3 + 3;
    } else if (p < 65) {
      amount = Math.random() * 3;
    } else if (p < 85) {
      amount = Math.random() * 2;
    } else if (p < 99) {
      amount = 0.6;
    } else {
      amount = 0;
    }
  }

  return between(p + amount, 0, 100);
}

function highjackAjax(start, stop) {
  stackStart.push(start);
  stackStop.push(stop);
  highjackCount++;

  if (highjackCount > 1) {
    return;
  }

  function endHandler() {
    stackStop.forEach(fn => {
      fn();
    });
  }

  xhr.prototype.send = function ()
  /* ...args */
  {
    stackStart.forEach(fn => {
      fn();
    });
    this.addEventListener('loadend', endHandler, false);
    send.apply(this, arguments);
  };
}

function restoreAjax(start, stop) {
  stackStart.splice(stackStart.indexOf(start), 1);
  stackStop.splice(stackStop.indexOf(stop), 1);
  highjackCount = Math.max(0, highjackCount - 1);

  if (!highjackCount) {
    xhr.prototype.send = send;
  }
}

/* harmony default export */ var QAjaxBar = (vue_runtime_esm["a" /* default */].extend({
  name: 'QAjaxBar',
  props: {
    position: {
      type: String,
      default: 'top',

      validator(val) {
        return ['top', 'right', 'bottom', 'left'].includes(val);
      }

    },
    size: {
      type: String,
      default: '2px'
    },
    color: {
      type: String,
      default: 'red'
    },
    skipHijack: Boolean,
    reverse: Boolean
  },

  data() {
    return {
      calls: 0,
      progress: 0,
      onScreen: false,
      animate: true
    };
  },

  computed: {
    classes() {
      return "q-loading-bar q-loading-bar--".concat(this.position, " bg-").concat(this.color) + (this.animate === true ? '' : ' no-transition');
    },

    style() {
      var active = this.onScreen;
      var o = translate({
        p: this.progress,
        pos: this.position,
        active,
        horiz: this.horizontal,
        reverse: this.$q.lang.rtl === true && ['top', 'bottom'].includes(this.position) ? !this.reverse : this.reverse,
        dir: this.$q.lang.rtl === true ? -1 : 1
      });
      o[this.sizeProp] = this.size;
      o.opacity = active ? 1 : 0;
      return o;
    },

    horizontal() {
      return this.position === 'top' || this.position === 'bottom';
    },

    sizeProp() {
      return this.horizontal ? 'height' : 'width';
    }

  },
  methods: {
    start() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      var oldSpeed = this.speed;
      this.speed = Math.max(0, speed) || 0;
      this.calls++;

      if (this.calls > 1) {
        if (oldSpeed === 0 && speed > 0) {
          this.__work();
        } else if (oldSpeed > 0 && speed <= 0) {
          clearTimeout(this.timer);
        }

        return;
      }

      clearTimeout(this.timer);
      this.$emit('start');
      this.progress = 0;

      if (this.onScreen === true) {
        return;
      }

      this.onScreen = true;
      this.animate = false;
      this.timer = setTimeout(() => {
        this.animate = true;
        speed > 0 && this.__work();
      }, 100);
    },

    increment(amount) {
      this.calls > 0 && (this.progress = inc(this.progress, amount));
    },

    stop() {
      this.calls = Math.max(0, this.calls - 1);

      if (this.calls > 0) {
        return;
      }

      clearTimeout(this.timer);
      this.$emit('stop');

      var end = () => {
        this.animate = true;
        this.progress = 100;
        this.timer = setTimeout(() => {
          this.onScreen = false;
        }, 1000);
      };

      if (this.progress === 0) {
        this.timer = setTimeout(end, 1);
      } else {
        end();
      }
    },

    __work() {
      if (this.progress < 100) {
        this.timer = setTimeout(() => {
          this.increment();

          this.__work();
        }, this.speed);
      }
    }

  },

  mounted() {
    if (this.skipHijack !== true) {
      this.hijacked = true;
      highjackAjax(this.start, this.stop);
    }
  },

  beforeDestroy() {
    clearTimeout(this.timer);
    this.hijacked && restoreAjax(this.start, this.stop);
  },

  render(h) {
    return h('div', {
      class: this.classes,
      style: this.style
    });
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/ajax-bar/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/size.js
var sizes = {
  xs: 18,
  sm: 24,
  md: 32,
  lg: 38,
  xl: 46
};
/* harmony default export */ var size = ({
  props: {
    size: String
  },
  computed: {
    sizeStyle() {
      if (this.size !== void 0) {
        return {
          fontSize: this.size in sizes ? "".concat(sizes[this.size], "px") : this.size
        };
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/slot.js


function slot_slot(vm, slotName, otherwise) {
  return vm.$scopedSlots[slotName] !== void 0 ? vm.$scopedSlots[slotName]() : otherwise;
}
function uniqueSlot(vm, slotName, otherwise) {
  return vm.$scopedSlots[slotName] !== void 0 ? vm.$scopedSlots[slotName]().slice() : otherwise;
}
/**
 * Source definitely exists,
 * so it's merged with the possible slot
 */

function mergeSlot(source, vm, slotName) {
  return vm.$scopedSlots[slotName] !== void 0 ? source.concat(vm.$scopedSlots[slotName]()) : source;
}
/**
 * Merge with possible slot,
 * even if source might not exist
 */

function mergeSlotSafely(source, vm, slotName) {
  if (vm.$scopedSlots[slotName] === void 0) {
    return source;
  }

  var slot = vm.$scopedSlots[slotName]();
  return source !== void 0 ? source.concat(slot) : slot;
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/icon/QIcon.js






/* harmony default export */ var QIcon = (vue_runtime_esm["a" /* default */].extend({
  name: 'QIcon',
  mixins: [size],
  props: {
    name: String,
    color: String,
    left: Boolean,
    right: Boolean
  },
  computed: {
    classes() {
      // "notranslate" class is for Google Translate
      // to avoid tampering with Material Icons ligature font
      return 'q-icon notranslate' + (this.left === true ? ' on-left' : '') + (this.right === true ? ' on-right' : '') + (this.color !== void 0 ? " text-".concat(this.color) : '');
    },

    type() {
      var cls;
      var icon = this.name;

      if (!icon) {
        return {
          none: true,
          cls: this.classes
        };
      }

      if (this.$q.iconMapFn !== void 0) {
        var res = this.$q.iconMapFn(icon);

        if (res !== void 0) {
          if (res.icon !== void 0) {
            icon = res.icon;
          } else {
            return {
              cls: res.cls + ' ' + this.classes,
              content: res.content !== void 0 ? res.content : ' '
            };
          }
        }
      }

      if (icon.startsWith('M') === true) {
        var cfg = icon.split('|');
        return {
          svg: true,
          cls: this.classes,
          path: cfg[0],
          viewBox: cfg[1] !== void 0 ? cfg[1] : '0 0 24 24'
        };
      }

      if (icon.startsWith('img:') === true) {
        return {
          img: true,
          cls: this.classes,
          src: icon.substring(4)
        };
      }

      var content = ' ';

      if (/^fa[s|r|l|b|d]{0,1} /.test(icon) || icon.startsWith('icon-') === true) {
        cls = icon;
      } else if (icon.startsWith('bt-') === true) {
        cls = "bt ".concat(icon);
      } else if (icon.startsWith('eva-') === true) {
        cls = "eva ".concat(icon);
      } else if (/^ion-(md|ios|logo)/.test(icon) === true) {
        cls = "ionicons ".concat(icon);
      } else if (icon.startsWith('ion-') === true) {
        cls = "ionicons ion-".concat(this.$q.platform.is.ios === true ? 'ios' : 'md').concat(icon.substr(3));
      } else if (icon.startsWith('mdi-') === true) {
        cls = "mdi ".concat(icon);
      } else if (icon.startsWith('iconfont ') === true) {
        cls = "".concat(icon);
      } else if (icon.startsWith('ti-') === true) {
        cls = "themify-icon ".concat(icon);
      } else {
        cls = 'material-icons';

        if (icon.startsWith('o_') === true) {
          icon = icon.substring(2);
          cls += '-outlined';
        } else if (icon.startsWith('r_') === true) {
          icon = icon.substring(2);
          cls += '-round';
        } else if (icon.startsWith('s_') === true) {
          icon = icon.substring(2);
          cls += '-sharp';
        }

        content = icon;
      }

      return {
        cls: cls + ' ' + this.classes,
        content
      };
    }

  },

  render(h) {
    var data = {
      class: this.type.cls,
      style: this.sizeStyle,
      on: this.$listeners,
      attrs: {
        'aria-hidden': true,
        role: 'presentation'
      }
    };

    if (this.type.none === true) {
      return h('div', data, slot_slot(this, 'default'));
    }

    if (this.type.img === true) {
      data.attrs.src = this.type.src;
      return h('img', data);
    }

    if (this.type.svg === true) {
      data.attrs.focusable = 'false';
      /* needed for IE11 */

      data.attrs.viewBox = this.type.viewBox;
      return h('svg', data, mergeSlot([h('path', {
        attrs: {
          d: this.type.path
        }
      })], this, 'default'));
    }

    return h('i', data, mergeSlot([this.type.content], this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/avatar/QAvatar.js




/* harmony default export */ var QAvatar = (vue_runtime_esm["a" /* default */].extend({
  name: 'QAvatar',
  mixins: [size],
  props: {
    fontSize: String,
    color: String,
    textColor: String,
    icon: String,
    square: Boolean,
    rounded: Boolean
  },
  computed: {
    contentClass() {
      return {
        ["bg-".concat(this.color)]: this.color,
        ["text-".concat(this.textColor, " q-chip--colored")]: this.textColor,
        'q-avatar__content--square': this.square,
        'rounded-borders': this.rounded
      };
    },

    contentStyle() {
      if (this.fontSize) {
        return {
          fontSize: this.fontSize
        };
      }
    }

  },

  render(h) {
    var icon = this.icon !== void 0 ? [h(QIcon, {
      props: {
        name: this.icon
      }
    })] : void 0;
    return h('div', {
      staticClass: 'q-avatar',
      style: this.sizeStyle,
      on: this.$listeners
    }, [h('div', {
      staticClass: 'q-avatar__content row flex-center overflow-hidden',
      class: this.contentClass,
      style: this.contentStyle
    }, mergeSlotSafely(icon, this, 'default'))]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/avatar/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js
var es_number_constructor = __webpack_require__("a9e3");

// CONCATENATED MODULE: ./node_modules/quasar/src/components/badge/QBadge.js




/* harmony default export */ var QBadge = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBadge',
  props: {
    color: String,
    textColor: String,
    floating: Boolean,
    transparent: Boolean,
    multiLine: Boolean,
    outline: Boolean,
    label: [Number, String],
    align: {
      type: String,
      validator: v => ['top', 'middle', 'bottom'].includes(v)
    }
  },
  computed: {
    style() {
      if (this.align !== void 0) {
        return {
          verticalAlign: this.align
        };
      }
    },

    classes() {
      var text = this.outline === true ? this.color || this.textColor : this.textColor;
      return 'q-badge flex inline items-center no-wrap' + " q-badge--".concat(this.multiLine === true ? 'multi' : 'single', "-line") + (this.outline === true ? ' q-badge--outline' : this.color !== void 0 ? " bg-".concat(this.color) : '') + (text !== void 0 ? " text-".concat(text) : '') + (this.floating === true ? ' q-badge--floating' : '') + (this.transparent === true ? ' q-badge--transparent' : '');
    }

  },

  render(h) {
    return h('div', {
      style: this.style,
      class: this.classes,
      on: this.$listeners
    }, this.label !== void 0 ? [this.label] : slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/badge/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/dark.js
/* harmony default export */ var mixins_dark = ({
  props: {
    dark: {
      type: Boolean,
      default: null
    }
  },
  computed: {
    isDark() {
      return this.dark === null ? this.$q.dark.isActive : this.dark;
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/banner/QBanner.js



/* harmony default export */ var QBanner = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBanner',
  mixins: [mixins_dark],
  props: {
    inlineActions: Boolean,
    dense: Boolean,
    rounded: Boolean
  },

  render(h) {
    var actions = slot_slot(this, 'action');
    var child = [h('div', {
      staticClass: 'q-banner__avatar col-auto row items-center'
    }, slot_slot(this, 'avatar')), h('div', {
      staticClass: 'q-banner__content col text-body2'
    }, slot_slot(this, 'default'))];
    actions !== void 0 && child.push(h('div', {
      staticClass: 'q-banner__actions row items-center justify-end',
      class: "col-".concat(this.inlineActions === true ? 'auto' : 'all')
    }, actions));
    return h('div', {
      staticClass: 'q-banner row items-center',
      class: {
        'q-banner--top-padding': actions !== void 0 && !this.inlineActions,
        'q-banner--dense': this.dense,
        'q-banner--dark q-dark': this.isDark,
        'rounded-borders': this.rounded
      },
      on: this.$listeners
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/banner/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/bar/QBar.js



/* harmony default export */ var QBar = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBar',
  mixins: [mixins_dark],
  props: {
    dense: Boolean
  },
  computed: {
    classes() {
      return "q-bar--".concat(this.dense === true ? 'dense' : 'standard', " ") + "q-bar--".concat(this.isDark === true ? 'dark' : 'light');
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-bar row no-wrap items-center',
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/bar/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.ends-with.js
var es_string_ends_with = __webpack_require__("8a79");

// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/align.js



var alignMap = {
  left: 'start',
  center: 'center',
  right: 'end',
  between: 'between',
  around: 'around',
  evenly: 'evenly',
  stretch: 'stretch'
},
    alignValues = Object.keys(alignMap);
/* harmony default export */ var mixins_align = ({
  props: {
    align: {
      type: String,
      validator: v => alignValues.includes(v)
    }
  },
  computed: {
    alignClass() {
      var align = this.align === void 0 ? this.vertical === true ? 'stretch' : 'left' : this.align;
      return "".concat(this.vertical === true ? 'items' : 'justify', "-").concat(alignMap[align]);
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/breadcrumbs/QBreadcrumbs.js









/* harmony default export */ var QBreadcrumbs = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBreadcrumbs',
  mixins: [mixins_align],
  props: {
    separator: {
      type: String,
      default: '/'
    },
    separatorColor: String,
    activeColor: {
      type: String,
      default: 'primary'
    },
    gutter: {
      type: String,
      validator: v => ['none', 'xs', 'sm', 'md', 'lg', 'xl'].includes(v),
      default: 'sm'
    }
  },
  computed: {
    classes() {
      return "".concat(this.alignClass).concat(this.gutter === 'none' ? '' : " q-gutter-".concat(this.gutter));
    },

    sepClass() {
      if (this.separatorColor) {
        return "text-".concat(this.separatorColor);
      }
    },

    activeClass() {
      return "text-".concat(this.activeColor);
    }

  },

  render(h) {
    var nodes = slot_slot(this, 'default');

    if (nodes === void 0) {
      return;
    }

    var els = 1;
    var child = [],
        len = nodes.filter(c => c.tag !== void 0 && c.tag.endsWith('-QBreadcrumbsEl')).length,
        separator = this.$scopedSlots.separator !== void 0 ? this.$scopedSlots.separator : () => this.separator;
    nodes.forEach(comp => {
      if (comp.tag !== void 0 && comp.tag.endsWith('-QBreadcrumbsEl')) {
        var middle = els < len;
        els++;
        child.push(h('div', {
          staticClass: 'flex items-center',
          class: middle ? this.activeClass : 'q-breadcrumbs--last'
        }, [comp]));

        if (middle) {
          child.push(h('div', {
            staticClass: 'q-breadcrumbs__separator',
            class: this.sepClass
          }, separator()));
        }
      } else {
        child.push(comp);
      }
    });
    return h('div', {
      staticClass: 'q-breadcrumbs',
      on: this.$listeners
    }, [h('div', {
      staticClass: 'flex items-center',
      class: this.classes
    }, child)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/router-link.js

var routerLinkProps = {
  to: [String, Object],
  exact: Boolean,
  append: Boolean,
  replace: Boolean,
  activeClass: String,
  exactActiveClass: String,
  disable: Boolean
};
var RouterLinkMixin = {
  props: routerLinkProps,
  computed: {
    hasRouterLink() {
      return this.disable !== true && this.to !== void 0 && this.to !== null && this.to !== '';
    },

    routerLinkProps() {
      return {
        to: this.to,
        exact: this.exact,
        append: this.append,
        replace: this.replace,
        activeClass: this.activeClass || 'q-router-link--active',
        exactActiveClass: this.exactActiveClass || 'q-router-link--exact-active',
        event: this.disable === true ? '' : void 0
      };
    }

  }
};
// CONCATENATED MODULE: ./node_modules/quasar/src/components/breadcrumbs/QBreadcrumbsEl.js




/* harmony default export */ var QBreadcrumbsEl = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBreadcrumbsEl',
  mixins: [RouterLinkMixin],
  props: {
    label: String,
    icon: String
  },

  render(h) {
    var child = [];
    this.icon !== void 0 && child.push(h(QIcon, {
      staticClass: 'q-breadcrumbs__el-icon',
      class: this.label !== void 0 ? 'q-breadcrumbs__el-icon--with-label' : null,
      props: {
        name: this.icon
      }
    }));
    this.label && child.push(this.label);
    return h(this.hasRouterLink === true ? 'router-link' : 'span', {
      staticClass: 'q-breadcrumbs__el q-link flex inline items-center relative-position',
      props: this.hasRouterLink === true ? this.routerLinkProps : null,
      [this.hasRouterLink === true ? 'nativeOn' : 'on']: this.$listeners
    }, mergeSlot(child, this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/breadcrumbs/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/spinner-mixin.js


/* harmony default export */ var spinner_mixin = ({
  props: {
    color: String,
    size: {
      type: [Number, String],
      default: '1em'
    }
  },
  computed: {
    cSize() {
      return this.size in sizes ? "".concat(sizes[this.size], "px") : this.size;
    },

    classes() {
      if (this.color) {
        return "text-".concat(this.color);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinner.js



/* harmony default export */ var QSpinner = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinner',
  mixins: [spinner_mixin],
  props: {
    thickness: {
      type: Number,
      default: 5
    }
  },

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner q-spinner-mat',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '25 25 50 50'
      }
    }, [h('circle', {
      staticClass: 'path',
      attrs: {
        'cx': '50',
        'cy': '50',
        'r': '20',
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': this.thickness,
        'stroke-miterlimit': '10'
      }
    })]);
  }

}));
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.flat.js
var es_array_flat = __webpack_require__("0481");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.unscopables.flat.js
var es_array_unscopables_flat = __webpack_require__("4069");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/dom.js


function dom_offset(el) {
  if (el === window) {
    return {
      top: 0,
      left: 0
    };
  }

  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left;

  return {
    top,
    left
  };
}
function dom_style(el, property) {
  return window.getComputedStyle(el).getPropertyValue(property);
}
function dom_height(el) {
  return el === window ? window.innerHeight : el.getBoundingClientRect().height;
}
function dom_width(el) {
  return el === window ? window.innerWidth : el.getBoundingClientRect().width;
}
function css(element, css) {
  var style = element.style;
  Object.keys(css).forEach(prop => {
    style[prop] = css[prop];
  });
}
function cssBatch(elements, style) {
  elements.forEach(el => css(el, style));
}
function ready(fn) {
  if (typeof fn !== 'function') {
    return;
  }

  if (document.readyState !== 'loading') {
    return fn();
  }

  document.addEventListener('DOMContentLoaded', fn, false);
}
function childHasFocus(el, focusedEl) {
  if (el === void 0 || el.contains(focusedEl) === true) {
    return true;
  }

  for (var next = el.nextElementSibling; next !== null; next = next.nextElementSibling) {
    if (next.contains(focusedEl)) {
      return true;
    }
  }

  return false;
}
/* harmony default export */ var dom = ({
  offset: dom_offset,
  style: dom_style,
  height: dom_height,
  width: dom_width,
  css,
  cssBatch,
  ready
});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/Ripple.js










function showRipple(evt, el, ctx, forceCenter) {
  ctx.modifiers.stop === true && event_stop(evt);
  var _ctx$modifiers = ctx.modifiers,
      center = _ctx$modifiers.center,
      color = _ctx$modifiers.color;
  center = center === true || forceCenter === true;

  var node = document.createElement('span'),
      innerNode = document.createElement('span'),
      pos = event_position(evt),
      _el$getBoundingClient = el.getBoundingClientRect(),
      left = _el$getBoundingClient.left,
      top = _el$getBoundingClient.top,
      width = _el$getBoundingClient.width,
      height = _el$getBoundingClient.height,
      diameter = Math.sqrt(width * width + height * height),
      radius = diameter / 2,
      centerX = "".concat((width - diameter) / 2, "px"),
      x = center ? centerX : "".concat(pos.left - left - radius, "px"),
      centerY = "".concat((height - diameter) / 2, "px"),
      y = center ? centerY : "".concat(pos.top - top - radius, "px");

  innerNode.className = 'q-ripple__inner';
  css(innerNode, {
    height: "".concat(diameter, "px"),
    width: "".concat(diameter, "px"),
    transform: "translate3d(".concat(x, ",").concat(y, ",0) scale3d(.2,.2,1)"),
    opacity: 0
  });
  node.className = "q-ripple".concat(color ? ' text-' + color : '');
  node.setAttribute('dir', 'ltr');
  node.appendChild(innerNode);
  el.appendChild(node);

  var abort = () => {
    node.remove();
    clearTimeout(timer);
  };

  ctx.abort.push(abort);
  var timer = setTimeout(() => {
    innerNode.classList.add('q-ripple__inner--enter');
    innerNode.style.transform = "translate3d(".concat(centerX, ",").concat(centerY, ",0) scale3d(1,1,1)");
    innerNode.style.opacity = 0.2;
    timer = setTimeout(() => {
      innerNode.classList.remove('q-ripple__inner--enter');
      innerNode.classList.add('q-ripple__inner--leave');
      innerNode.style.opacity = 0;
      timer = setTimeout(() => {
        node.remove();
        ctx.abort.splice(ctx.abort.indexOf(abort), 1);
      }, 275);
    }, 250);
  }, 50);
}

function updateCtx(ctx, _ref) {
  var value = _ref.value,
      modifiers = _ref.modifiers,
      arg = _ref.arg;
  ctx.enabled = value !== false;

  if (ctx.enabled === true) {
    ctx.modifiers = Object(value) === value ? {
      stop: value.stop === true || modifiers.stop === true,
      center: value.center === true || modifiers.center === true,
      color: value.color || arg,
      keyCodes: [].concat(value.keyCodes || 13)
    } : {
      stop: modifiers.stop,
      center: modifiers.center,
      color: arg,
      keyCodes: [13]
    };
  }
}

/* harmony default export */ var Ripple = ({
  name: 'ripple',

  inserted(el, binding) {
    var ctx = {
      modifiers: {},
      abort: [],

      click(evt) {
        // on ENTER in form IE emits a PointerEvent with negative client cordinates
        if (ctx.enabled === true && (client.is.ie !== true || evt.clientX >= 0)) {
          showRipple(evt, el, ctx, evt.qKeyEvent === true);
        }
      },

      keyup(evt) {
        if (ctx.enabled === true && isKeyCode(evt, ctx.modifiers.keyCodes) === true) {
          showRipple(evt, el, ctx, true);
        }
      }

    };
    updateCtx(ctx, binding);

    if (el.__qripple) {
      el.__qripple_old = el.__qripple;
    }

    el.__qripple = ctx;
    el.addEventListener('click', ctx.click, listenOpts.passive);
    el.addEventListener('keyup', ctx.keyup, listenOpts.passive);
  },

  update(el, binding) {
    el.__qripple !== void 0 && updateCtx(el.__qripple, binding);
  },

  unbind(el) {
    var ctx = el.__qripple_old || el.__qripple;

    if (ctx !== void 0) {
      ctx.abort.forEach(fn => {
        fn();
      });
      el.removeEventListener('click', ctx.click, listenOpts.passive);
      el.removeEventListener('keyup', ctx.keyup, listenOpts.passive);
      delete el[el.__qripple_old ? '__qripple_old' : '__qripple'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/ripple.js

/* harmony default export */ var ripple = ({
  directives: {
    Ripple: Ripple
  },
  props: {
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/btn.js






var btn_sizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
/* harmony default export */ var mixins_btn = ({
  mixins: [ripple, mixins_align],
  props: {
    type: String,
    to: [Object, String],
    replace: Boolean,
    label: [Number, String],
    icon: String,
    iconRight: String,
    round: Boolean,
    outline: Boolean,
    flat: Boolean,
    unelevated: Boolean,
    rounded: Boolean,
    push: Boolean,
    glossy: Boolean,
    size: String,
    fab: Boolean,
    fabMini: Boolean,
    color: String,
    textColor: String,
    noCaps: Boolean,
    noWrap: Boolean,
    dense: Boolean,
    tabindex: [Number, String],
    align: {
      default: 'center'
    },
    stack: Boolean,
    stretch: Boolean,
    loading: {
      type: Boolean,
      default: null
    },
    disable: Boolean
  },
  computed: {
    style() {
      if (this.fab === false && this.fabMini === false && this.size) {
        return {
          fontSize: this.size in btn_sizes ? "".concat(btn_sizes[this.size], "px") : this.size
        };
      }
    },

    isRound() {
      return this.round === true || this.fab === true || this.fabMini === true;
    },

    isActionable() {
      return this.disable !== true && this.loading !== true;
    },

    computedTabIndex() {
      return this.isActionable === true ? this.tabindex || 0 : -1;
    },

    hasRouterLink() {
      return this.disable !== true && this.to !== void 0 && this.to !== null && this.to !== '';
    },

    isLink() {
      return this.type === 'a' || this.hasRouterLink === true;
    },

    design() {
      if (this.flat === true) return 'flat';
      if (this.outline === true) return 'outline';
      if (this.push === true) return 'push';
      if (this.unelevated === true) return 'unelevated';
      return 'standard';
    },

    attrs() {
      var att = {
        tabindex: this.computedTabIndex
      };

      if (this.type !== 'a') {
        att.type = this.type || 'button';
      }

      if (this.hasRouterLink === true) {
        att.href = this.$router.resolve(this.to).href;
      }

      if (this.disable === true) {
        att.disabled = true;
      }

      return att;
    },

    classes() {
      var colors;

      if (this.color !== void 0) {
        if (this.flat === true || this.outline === true) {
          colors = "text-".concat(this.textColor || this.color);
        } else {
          colors = "bg-".concat(this.color, " text-").concat(this.textColor || 'white');
        }
      } else if (this.textColor) {
        colors = "text-".concat(this.textColor);
      }

      return "q-btn--".concat(this.design, " q-btn--").concat(this.isRound === true ? 'round' : 'rectangle') + (colors !== void 0 ? ' ' + colors : '') + (this.isActionable === true ? ' q-btn--actionable q-focusable q-hoverable' : this.disable === true ? ' disabled' : '') + (this.fab === true ? ' q-btn--fab' : this.fabMini === true ? ' q-btn--fab-mini' : '') + (this.noCaps === true ? ' q-btn--no-uppercase' : '') + (this.noWrap === true ? '' : ' q-btn--wrap') + ( // this is for IE11
      this.rounded === true && this.isRound !== true ? ' q-btn--rounded' : '') + (this.dense === true ? ' q-btn--dense' : '') + (this.stretch === true ? ' no-border-radius self-stretch' : '') + (this.glossy === true ? ' glossy' : '');
    },

    innerClasses() {
      return this.alignClass + (this.stack === true ? ' column' : ' row') + (this.noWrap === true ? ' no-wrap text-no-wrap' : '') + (this.loading === true ? ' q-btn__content--hidden' : '');
    }

  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.some.js
var es_array_some = __webpack_require__("45fc");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/touch.js







var directions = ['left', 'right', 'up', 'down', 'horizontal', 'vertical'];
var modifiersAll = {
  left: true,
  right: true,
  up: true,
  down: true,
  horizontal: true,
  vertical: true,
  all: true
};
function getModifierDirections(mod) {
  var dir = {};
  directions.forEach(direction => {
    if (mod[direction]) {
      dir[direction] = true;
    }
  });

  if (Object.keys(dir).length === 0) {
    return modifiersAll;
  }

  if (dir.horizontal === true) {
    dir.left = dir.right = true;
  }

  if (dir.vertical === true) {
    dir.up = dir.down = true;
  }

  if (dir.left === true && dir.right === true) {
    dir.horizontal = true;
  }

  if (dir.up === true && dir.down === true) {
    dir.vertical = true;
  }

  if (dir.horizontal === true && dir.vertical === true) {
    dir.all = true;
  }

  return dir;
}
function updateModifiers(ctx, _ref) {
  var oldValue = _ref.oldValue,
      value = _ref.value,
      modifiers = _ref.modifiers;

  if (oldValue !== value) {
    typeof value !== 'function' && ctx.end();
    ctx.handler = value;
  }

  if (directions.some(direction => modifiers[direction] !== ctx.modifiers[direction])) {
    ctx.modifiers = modifiers;
    ctx.direction = getModifierDirections(modifiers);
  }
}
function addEvt(ctx, target, events) {
  target += 'Evt';

  if (ctx[target] !== void 0) {
    ctx[target] = ctx[target].concat(events);
  } else {
    ctx[target] = events;
  }

  events.forEach(evt => {
    evt[0].addEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
  });
}
function cleanEvt(ctx, target) {
  target += 'Evt';

  if (ctx[target] !== void 0) {
    ctx[target].forEach(evt => {
      evt[0].removeEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
    });
    ctx[target] = void 0;
  }
}
var getTouchTarget = isSSR === false && iosEmulated !== true && (client.is.ios === true || window.navigator.vendor.toLowerCase().indexOf('apple') > -1) ? () => document : target => target;
function shouldStart(evt, ctx) {
  return ctx.event === void 0 && evt.target !== void 0 && evt.target.draggable !== true && typeof ctx.handler === 'function' && evt.target.nodeName.toUpperCase() !== 'INPUT' && (evt.qClonedBy === void 0 || evt.qClonedBy.indexOf(ctx.uid) === -1);
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn/QBtn.js










function QBtn_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QBtn_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QBtn_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QBtn_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var passiveCapture = listenOpts.passiveCapture;
var touchTarget = void 0,
    keyboardTarget = void 0,
    mouseTarget = void 0;
/* harmony default export */ var QBtn = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBtn',
  mixins: [mixins_btn],
  props: {
    percentage: Number,
    darkPercentage: Boolean
  },
  computed: {
    hasLabel() {
      return this.label !== void 0 && this.label !== null && this.label !== '';
    },

    computedRipple() {
      return this.ripple === false ? false : Object.assign({
        keyCodes: []
      }, this.ripple === true ? {} : this.ripple);
    },

    percentageStyle() {
      var val = Math.max(0, Math.min(100, this.percentage));

      if (val > 0) {
        return {
          transition: 'transform 0.6s',
          transform: "translateX(".concat(val - 100, "%)")
        };
      }
    }

  },
  methods: {
    click(e) {
      if (e !== void 0) {
        if (e.defaultPrevented === true) {
          return;
        }

        var el = document.activeElement; // focus button if it came from ENTER on form
        // prevent the new submit (already done)

        if (this.type === 'submit' && (this.$q.platform.is.ie === true && (e.clientX < 0 || e.clientY < 0) || el !== document.body && this.$el.contains(el) === false && // required for iOS and desktop Safari
        el.contains(this.$el) === false)) {
          this.$el.focus();

          var onClickCleanup = () => {
            document.removeEventListener('keydown', stopAndPrevent, true);
            document.removeEventListener('keyup', onClickCleanup, passiveCapture);
            this.$el !== void 0 && this.$el.removeEventListener('blur', onClickCleanup, passiveCapture);
          };

          document.addEventListener('keydown', stopAndPrevent, true);
          document.addEventListener('keyup', onClickCleanup, passiveCapture);
          this.$el.addEventListener('blur', onClickCleanup, passiveCapture);
        }

        this.hasRouterLink === true && stopAndPrevent(e);
      }

      var go = () => {
        var res = this.$router[this.replace === true ? 'replace' : 'push'](this.to); // vue-router now throwing error if navigating
        // to the same route that the user is currently at
        // https://github.com/vuejs/vue-router/issues/2872

        if (res !== void 0 && typeof res.catch === 'function') {
          res.catch(() => {});
        }
      };

      this.$emit('click', e, go);
      this.hasRouterLink === true && e.navigate !== false && go();
    },

    __onKeydown(e) {
      if (isKeyCode(e, [13, 32]) === true) {
        stopAndPrevent(e);

        if (keyboardTarget !== this.$el) {
          keyboardTarget !== void 0 && this.__cleanup(); // focus external button if the focus helper was focused before

          this.$el.focus();
          keyboardTarget = this.$el;
          this.$el.classList.add('q-btn--active');
          document.addEventListener('keyup', this.__onPressEnd, true);
          this.$el.addEventListener('blur', this.__onPressEnd, passiveCapture);
        }
      }

      this.$emit('keydown', e);
    },

    __onTouchstart(e) {
      if (touchTarget !== this.$el) {
        touchTarget !== void 0 && this.__cleanup();
        touchTarget = this.$el;
        var target = this.touchTargetEl = getTouchTarget(e.target);
        target.addEventListener('touchcancel', this.__onPressEnd, passiveCapture);
        target.addEventListener('touchend', this.__onPressEnd, passiveCapture);
      }

      this.$emit('touchstart', e);
    },

    __onMousedown(e) {
      if (mouseTarget !== this.$el) {
        mouseTarget !== void 0 && this.__cleanup();
        mouseTarget = this.$el;
        this.$el.classList.add('q-btn--active');
        document.addEventListener('mouseup', this.__onPressEnd, passiveCapture);
      }

      this.$emit('mousedown', e);
    },

    __onPressEnd(e) {
      // needed for IE (because it emits blur when focusing button from focus helper)
      if (e !== void 0 && e.type === 'blur' && document.activeElement === this.$el) {
        return;
      }

      if (e !== void 0 && e.type === 'keyup') {
        if (keyboardTarget === this.$el && isKeyCode(e, [13, 32]) === true) {
          // for click trigger
          var evt = new MouseEvent('click', e);
          evt.qKeyEvent = true;
          e.defaultPrevented === true && prevent(evt);
          e.cancelBubble === true && event_stop(evt);
          this.$el.dispatchEvent(evt);
          stopAndPrevent(e); // for ripple

          e.qKeyEvent = true;
        }

        this.$emit('keyup', e);
      }

      this.__cleanup();
    },

    __cleanup(destroying) {
      if (destroying !== true && (touchTarget === this.$el || mouseTarget === this.$el) && this.$refs.blurTarget !== void 0 && this.$refs.blurTarget !== document.activeElement) {
        this.$refs.blurTarget.focus();
      }

      if (touchTarget === this.$el) {
        var target = this.touchTargetEl;
        target.removeEventListener('touchcancel', this.__onPressEnd, passiveCapture);
        target.removeEventListener('touchend', this.__onPressEnd, passiveCapture);
        touchTarget = this.touchTargetEl = void 0;
      }

      if (mouseTarget === this.$el) {
        document.removeEventListener('mouseup', this.__onPressEnd, passiveCapture);
        mouseTarget = void 0;
      }

      if (keyboardTarget === this.$el) {
        document.removeEventListener('keyup', this.__onPressEnd, true);
        this.$el !== void 0 && this.$el.removeEventListener('blur', this.__onPressEnd, passiveCapture);
        keyboardTarget = void 0;
      }

      this.$el !== void 0 && this.$el.classList.remove('q-btn--active');
    }

  },

  beforeDestroy() {
    this.__cleanup(true);
  },

  render(h) {
    var inner = [];
    var data = {
      staticClass: 'q-btn q-btn-item non-selectable no-outline',
      class: this.classes,
      style: this.style,
      attrs: this.attrs
    };

    if (this.isActionable === true) {
      data.on = QBtn_objectSpread({}, this.$listeners, {
        click: this.click,
        keydown: this.__onKeydown,
        mousedown: this.__onMousedown
      });

      if (this.$q.platform.has.touch === true) {
        data.on.touchstart = this.__onTouchstart;
      }
    }

    if (this.disable !== true && this.ripple !== false) {
      data.directives = [{
        name: 'ripple',
        value: this.computedRipple,
        modifiers: {
          center: this.isRound
        }
      }];
    }

    this.icon !== void 0 && inner.push(h(QIcon, {
      props: {
        name: this.icon,
        left: this.stack === false && this.hasLabel === true
      }
    }));
    this.hasLabel === true && inner.push(h('div', [this.label]));
    inner = mergeSlot(inner, this, 'default');

    if (this.iconRight !== void 0 && this.isRound === false) {
      inner.push(h(QIcon, {
        props: {
          name: this.iconRight,
          right: this.stack === false && this.hasLabel === true
        }
      }));
    }

    var child = [h('div', {
      staticClass: 'q-focus-helper',
      ref: 'blurTarget',
      attrs: {
        tabindex: -1
      }
    })];
    this.loading === true && this.percentage !== void 0 && child.push(h('div', {
      staticClass: 'q-btn__progress absolute-full overflow-hidden'
    }, [h('div', {
      staticClass: 'q-btn__progress-indicator fit',
      class: this.darkPercentage === true ? 'q-btn__progress--dark' : '',
      style: this.percentageStyle
    })]));
    child.push(h('div', {
      staticClass: 'q-btn__wrapper col row q-anchor--skip'
    }, [h('div', {
      staticClass: 'q-btn__content text-center col items-center q-anchor--skip',
      class: this.innerClasses
    }, inner)]));
    this.loading !== null && child.push(h('transition', {
      props: {
        name: 'q-transition--fade'
      }
    }, this.loading === true ? [h('div', {
      key: 'loading',
      staticClass: 'absolute-full flex flex-center'
    }, this.$scopedSlots.loading !== void 0 ? this.$scopedSlots.loading() : [h(QSpinner)])] : void 0));
    return h(this.isLink === true ? 'a' : 'button', data, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-group/QBtnGroup.js




/* harmony default export */ var QBtnGroup = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBtnGroup',
  props: {
    unelevated: Boolean,
    outline: Boolean,
    flat: Boolean,
    rounded: Boolean,
    push: Boolean,
    stretch: Boolean,
    glossy: Boolean,
    spread: Boolean
  },
  computed: {
    classes() {
      return ['unelevated', 'outline', 'flat', 'rounded', 'push', 'stretch', 'glossy'].filter(t => this[t] === true).map(t => "q-btn-group--".concat(t)).join(' ');
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-btn-group row no-wrap ' + (this.spread === true ? 'q-btn-group--spread' : 'inline'),
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/selection.js

function clearSelection() {
  if (window.getSelection !== void 0) {
    var selection = window.getSelection();

    if (selection.empty !== void 0) {
      selection.empty();
    } else if (selection.removeAllRanges !== void 0) {
      selection.removeAllRanges();
      plugins_Platform.is.mobile !== true && selection.addRange(document.createRange());
    }
  } else if (document.selection !== void 0) {
    document.selection.empty();
  }
}
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/anchor.js




/* harmony default export */ var mixins_anchor = ({
  props: {
    target: {
      type: [Boolean, String],
      default: true
    },
    noParentEvent: Boolean,
    contextMenu: Boolean
  },
  watch: {
    contextMenu(val) {
      if (this.anchorEl !== void 0) {
        this.__unconfigureAnchorEl();

        this.__configureAnchorEl(val);
      }
    },

    target() {
      if (this.anchorEl !== void 0) {
        this.__unconfigureAnchorEl();
      }

      this.__pickAnchorEl();
    },

    noParentEvent(val) {
      if (this.anchorEl !== void 0) {
        if (val === true) {
          this.__unconfigureAnchorEl();
        } else {
          this.__configureAnchorEl();
        }
      }
    }

  },
  methods: {
    __showCondition(evt) {
      // abort with no parent configured or on multi-touch
      if (this.anchorEl === void 0) {
        return false;
      }

      if (evt === void 0) {
        return true;
      }

      return evt.touches === void 0 || evt.touches.length <= 1;
    },

    __contextClick(evt) {
      this.hide(evt);
      this.$nextTick(() => {
        this.show(evt);
      });
      prevent(evt);
    },

    __toggleKey(evt) {
      isKeyCode(evt, 13) === true && this.toggle(evt);
    },

    __mobileCleanup(evt) {
      this.anchorEl.classList.remove('non-selectable');
      clearTimeout(this.touchTimer);

      if (this.showing === true && evt !== void 0) {
        clearSelection();
      }
    },

    __mobilePrevent: prevent,

    __mobileTouch(evt) {
      this.__mobileCleanup(evt);

      if (this.__showCondition(evt) !== true) {
        return;
      }

      this.hide(evt);
      this.anchorEl.classList.add('non-selectable');
      var target = getTouchTarget(evt.target);
      addEvt(this, 'anchor', [[target, 'touchmove', '__mobileCleanup', 'passive'], [target, 'touchend', '__mobileCleanup', 'passive'], [target, 'touchcancel', '__mobileCleanup', 'passive'], [this.anchorEl, 'contextmenu', '__mobilePrevent', 'notPassive']]);
      this.touchTimer = setTimeout(() => {
        this.show(evt);
      }, 300);
    },

    __unconfigureAnchorEl() {
      cleanEvt(this, 'anchor');
    },

    __configureAnchorEl() {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.contextMenu;

      if (this.noParentEvent === true || this.anchorEl === void 0) {
        return;
      }

      var evts;

      if (context === true) {
        if (this.$q.platform.is.mobile === true) {
          evts = [[this.anchorEl, 'touchstart', '__mobileTouch', 'passive']];
        } else {
          evts = [[this.anchorEl, 'click', 'hide', 'passive'], [this.anchorEl, 'contextmenu', '__contextClick', 'notPassive']];
        }
      } else {
        evts = [[this.anchorEl, 'click', 'toggle', 'passive'], [this.anchorEl, 'keyup', '__toggleKey', 'passive']];
      }

      addEvt(this, 'anchor', evts);
    },

    __setAnchorEl(el) {
      this.anchorEl = el;

      while (this.anchorEl.classList.contains('q-anchor--skip')) {
        this.anchorEl = this.anchorEl.parentNode;
      }

      this.__configureAnchorEl();
    },

    __pickAnchorEl() {
      if (this.target && typeof this.target === 'string') {
        var el = document.querySelector(this.target);

        if (el !== null) {
          this.anchorEl = el;

          this.__configureAnchorEl();
        } else {
          this.anchorEl = void 0;
          console.error("Anchor: target \"".concat(this.target, "\" not found"), this);
        }
      } else if (this.target !== false) {
        this.__setAnchorEl(this.parentEl);
      } else {
        this.anchorEl = void 0;
      }
    },

    __changeScrollEvent(scrollTarget, fn) {
      var fnProp = "".concat(fn !== void 0 ? 'add' : 'remove', "EventListener");
      var fnHandler = fn !== void 0 ? fn : this.__scrollFn;

      if (scrollTarget !== window) {
        scrollTarget[fnProp]('scroll', fnHandler, listenOpts.passive);
      }

      window[fnProp]('scroll', fnHandler, listenOpts.passive);
      this.__scrollFn = fn;
    }

  },

  created() {
    if (typeof this.__configureScrollTarget === 'function' && typeof this.__unconfigureScrollTarget === 'function') {
      this.noParentEventWatcher = this.$watch('noParentEvent', () => {
        if (this.scrollTarget !== void 0) {
          this.__unconfigureScrollTarget();

          this.__configureScrollTarget();
        }
      });
    }
  },

  mounted() {
    this.parentEl = this.$el.parentNode;

    this.__pickAnchorEl();

    if (this.value === true && this.anchorEl === void 0) {
      this.$emit('input', false);
    }
  },

  beforeDestroy() {
    clearTimeout(this.touchTimer);
    this.noParentEventWatcher !== void 0 && this.noParentEventWatcher();
    this.__anchorCleanup !== void 0 && this.__anchorCleanup();

    this.__unconfigureAnchorEl();
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/timeout.js
/* harmony default export */ var timeout = ({
  methods: {
    __nextTick(fn) {
      this.__tickFn = fn;
    },

    __prepareTick() {
      if (this.__tickFn !== void 0) {
        var fn = this.__tickFn;
        this.$nextTick(() => {
          if (this.__tickFn === fn) {
            this.__tickFn();

            this.__tickFn = void 0;
          }
        });
      }
    },

    __clearTick() {
      this.__tickFn = void 0;
    },

    __setTimeout(fn, delay) {
      clearTimeout(this.__timer);
      this.__timer = setTimeout(fn, delay);
    },

    __clearTimeout() {
      clearTimeout(this.__timer);
    }

  },

  beforeDestroy() {
    this.__tickFn = void 0;
    clearTimeout(this.__timer);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/model-toggle.js


/* harmony default export */ var model_toggle = ({
  mixins: [timeout],
  props: {
    value: {
      type: Boolean,
      default: void 0
    }
  },

  data() {
    return {
      showing: false
    };
  },

  watch: {
    value(val) {
      this.__processModelChange(val);
    },

    $route() {
      this.hideOnRouteChange === true && this.showing === true && this.hide();
    }

  },
  methods: {
    toggle(evt) {
      this[this.showing === true ? 'hide' : 'show'](evt);
    },

    show(evt) {
      if (this.disable === true || this.__showCondition !== void 0 && this.__showCondition(evt) !== true) {
        return;
      }

      if (this.$listeners.input !== void 0 && isSSR === false) {
        this.$emit('input', true);
        this.payload = evt;
        this.$nextTick(() => {
          if (this.payload === evt) {
            this.payload = void 0;
          }
        });
      }

      if (this.value === void 0 || this.$listeners.input === void 0 || isSSR === true) {
        this.__processShow(evt);
      }
    },

    __processShow(evt) {
      if (this.showing === true) {
        return;
      } // need to call it before setting showing to true
      // in order to not ruin the animation


      this.__preparePortal !== void 0 && this.__preparePortal();
      this.showing = true;
      this.$emit('before-show', evt);

      if (this.__show !== void 0) {
        this.__clearTick();

        this.__show(evt);

        this.__prepareTick();
      } else {
        this.$emit('show', evt);
      }
    },

    hide(evt) {
      if (this.disable === true) {
        return;
      }

      if (this.$listeners.input !== void 0 && isSSR === false) {
        this.$emit('input', false);
        this.payload = evt;
        this.$nextTick(() => {
          if (this.payload === evt) {
            this.payload = void 0;
          }
        });
      }

      if (this.value === void 0 || this.$listeners.input === void 0 || isSSR === true) {
        this.__processHide(evt);
      }
    },

    __processHide(evt) {
      if (this.showing === false) {
        return;
      }

      this.showing = false;
      this.$emit('before-hide', evt);

      if (this.__hide !== void 0) {
        this.__clearTick();

        this.__hide(evt);

        this.__prepareTick();
      } else {
        this.$emit('hide', evt);
      }
    },

    __processModelChange(val) {
      if (this.disable === true && val === true) {
        this.$listeners.input !== void 0 && this.$emit('input', false);
      } else if (val === true !== this.showing) {
        this["__process".concat(val === true ? 'Show' : 'Hide')](this.payload);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/portal.js

function closePortalMenus(vm, evt) {
  do {
    if (vm.$options.name === 'QMenu') {
      vm.hide(evt); // is this a point of separation?

      if (vm.separateClosePopup === true) {
        return vm.$parent;
      }
    } else if (vm.__renderPortal !== void 0) {
      // treat it as point of separation if parent is QPopupProxy
      // (so mobile matches desktop behavior)
      // and hide it too
      if (vm.$parent !== void 0 && vm.$parent.$options.name === 'QPopupProxy') {
        vm.hide(evt);
        return vm.$parent;
      } else {
        return vm;
      }
    }

    vm = vm.$parent;
  } while (vm !== void 0);
}
function closePortals(vm, evt, depth) {
  while (depth !== 0 && vm !== void 0) {
    if (vm.__renderPortal !== void 0) {
      depth--;

      if (vm.$options.name === 'QMenu') {
        vm = closePortalMenus(vm, evt);
        continue;
      }

      vm.hide(evt);
    }

    vm = vm.$parent;
  }
}
/* harmony default export */ var portal = ({
  inheritAttrs: false,
  props: {
    contentClass: [Array, String, Object],
    contentStyle: [Array, String, Object]
  },
  methods: {
    __showPortal() {
      if (this.__portal !== void 0) {
        document.body.appendChild(this.__portal.$el);
      }
    },

    __hidePortal() {
      if (this.__portal !== void 0) {
        this.__portal.$destroy();

        this.__portal.$el.remove();

        this.__portal = void 0;
      }
    },

    __preparePortal() {
      if (this.__portal === void 0) {
        this.__portal = new vue_runtime_esm["a" /* default */]({
          name: 'QPortal',
          parent: this,
          inheritAttrs: false,
          render: h => this.__renderPortal(h),
          components: this.$options.components,
          directives: this.$options.directives
        }).$mount();
      }
    }

  },

  render() {
    this.__portal !== void 0 && this.__portal.$forceUpdate();
  },

  beforeDestroy() {
    this.__hidePortal();
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/transition.js
/* harmony default export */ var transition = ({
  props: {
    transitionShow: {
      type: String,
      default: 'fade'
    },
    transitionHide: {
      type: String,
      default: 'fade'
    }
  },

  data() {
    return {
      transitionState: this.showing
    };
  },

  watch: {
    showing(val) {
      this.transitionShow !== this.transitionHide && this.$nextTick(() => {
        this.transitionState = val;
      });
    }

  },
  computed: {
    transition() {
      return 'q-transition--' + (this.transitionState === true ? this.transitionHide : this.transitionShow);
    }

  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js
var es_array_find_index = __webpack_require__("c740");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/vm.js



function getAllChildren(vm) {
  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  vm.$children.forEach(function (child) {
    children.push(child);
    child.$children.length > 0 && getAllChildren(child, children);
  });
  return children;
}
function getVmOfNode(el) {
  for (var node = el; node !== null; node = node.parentNode) {
    // node.__vue__ can be null if the instance was destroyed
    if (node.__vue__ === null) {
      return;
    }

    if (node.__vue__ !== void 0) {
      return node.__vue__;
    }
  }
}
function isVmChildOf(childVm, parentVm) {
  for (var vm = childVm; vm !== void 0; vm = vm.$parent) {
    if (vm === parentVm) {
      return true;
    }
  }

  return false;
}
function cache(vm, key, obj) {
  if (isSSR === true) return obj;
  var k = "__qcache_".concat(key);
  return vm[k] === void 0 ? vm[k] = obj : vm[k];
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/menu/ClickOutside.js




var ClickOutside_timer;
var notPassiveCapture = listenOpts.notPassiveCapture,
    ClickOutside_passiveCapture = listenOpts.passiveCapture,
    handlers = {
  click: [],
  focus: []
};

function execHandlers(list, evt) {
  for (var i = list.length - 1; i >= 0; i--) {
    if (list[i](evt) === void 0) {
      return;
    }
  }
}

function globalHandler(evt) {
  clearTimeout(ClickOutside_timer);

  if (evt.type === 'focusin') {
    ClickOutside_timer = setTimeout(() => {
      execHandlers(handlers.focus, evt);
    }, 200);
  } else {
    execHandlers(handlers.click, evt);
  }
}

/* harmony default export */ var ClickOutside = ({
  name: 'click-outside',

  bind(el, _ref, vnode) {
    var value = _ref.value,
        arg = _ref.arg;
    var vmEl = vnode.componentInstance || vnode.context;
    var ctx = {
      trigger: value,
      toggleEl: arg,

      handler(evt) {
        var target = evt.target;

        if (target !== void 0 && target.nodeType !== 8 && // directives that prevent click by using pointer-events none generate click on html element
        target !== document.documentElement && target.classList.contains('no-pointer-events') === false && (ctx.toggleEl === void 0 || ctx.toggleEl.contains(target) === false) && (target === document.body || isVmChildOf(getVmOfNode(target), vmEl) === false)) {
          // mark the event as beeing processed by clickOutside
          // used to prevent refocus after menu close
          evt.qClickOutside = true;
          return ctx.trigger(evt);
        }
      }

    };

    if (el.__qclickoutside) {
      el.__qclickoutside_old = el.__qclickoutside;
    }

    el.__qclickoutside = ctx;

    if (handlers.click.length === 0) {
      // use click to be able to prevent click in handler
      document.addEventListener('click', globalHandler, notPassiveCapture);
      document.addEventListener('touchstart', globalHandler, notPassiveCapture);
      document.addEventListener('focusin', globalHandler, ClickOutside_passiveCapture);
    }

    handlers.click.push(ctx.handler);
    ctx.timerFocusin = setTimeout(() => {
      handlers.focus.push(ctx.handler);
    }, 500);
  },

  update(el, _ref2) {
    var value = _ref2.value,
        oldValue = _ref2.oldValue,
        arg = _ref2.arg;
    var ctx = el.__qclickoutside;

    if (value !== oldValue) {
      ctx.trigger = value;
    }

    if (arg !== ctx.arg) {
      ctx.toggleEl = arg;
    }
  },

  unbind(el) {
    var ctx = el.__qclickoutside_old || el.__qclickoutside;

    if (ctx !== void 0) {
      clearTimeout(ctx.timerFocusin);
      var indexClick = handlers.click.findIndex(h => h === ctx.handler),
          indexFocus = handlers.focus.findIndex(h => h === ctx.handler);
      indexClick > -1 && handlers.click.splice(indexClick, 1);
      indexFocus > -1 && handlers.focus.splice(indexFocus, 1);

      if (handlers.click.length === 0) {
        clearTimeout(ClickOutside_timer);
        document.removeEventListener('click', globalHandler, notPassiveCapture);
        document.removeEventListener('touchstart', globalHandler, notPassiveCapture);
        document.removeEventListener('focusin', globalHandler, ClickOutside_passiveCapture);
      }

      delete el[el.__qclickoutside_old ? '__qclickoutside_old' : '__qclickoutside'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/scroll.js


function getScrollTarget(el) {
  return el.closest('.scroll,.scroll-y,.overflow-auto') || window;
}
function getScrollHeight(el) {
  return (el === window ? document.body : el).scrollHeight;
}
function getScrollWidth(el) {
  return (el === window ? document.body : el).scrollWidth;
}
function getScrollPosition(scrollTarget) {
  if (scrollTarget === window) {
    return window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
  }

  return scrollTarget.scrollTop;
}
function getHorizontalScrollPosition(scrollTarget) {
  if (scrollTarget === window) {
    return window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
  }

  return scrollTarget.scrollLeft;
}
function animScrollTo(el, to) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var pos = getScrollPosition(el);

  if (duration <= 0) {
    if (pos !== to) {
      setScroll(el, to);
    }

    return;
  }

  requestAnimationFrame(() => {
    var newPos = pos + (to - pos) / Math.max(16, duration) * 16;
    setScroll(el, newPos);

    if (newPos !== to) {
      animScrollTo(el, to, duration - 16);
    }
  });
}
function animHorizontalScrollTo(el, to) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var pos = getHorizontalScrollPosition(el);

  if (duration <= 0) {
    if (pos !== to) {
      setHorizontalScroll(el, to);
    }

    return;
  }

  requestAnimationFrame(() => {
    var newPos = pos + (to - pos) / Math.max(16, duration) * 16;
    setHorizontalScroll(el, newPos);

    if (newPos !== to) {
      animHorizontalScrollTo(el, to, duration - 16);
    }
  });
}

function setScroll(scrollTarget, offset) {
  if (scrollTarget === window) {
    window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, offset);
    return;
  }

  scrollTarget.scrollTop = offset;
}

function setHorizontalScroll(scrollTarget, offset) {
  if (scrollTarget === window) {
    window.scrollTo(offset, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    return;
  }

  scrollTarget.scrollLeft = offset;
}

function setScrollPosition(scrollTarget, offset, duration) {
  if (duration) {
    animScrollTo(scrollTarget, offset, duration);
    return;
  }

  setScroll(scrollTarget, offset);
}
function setHorizontalScrollPosition(scrollTarget, offset, duration) {
  if (duration) {
    animHorizontalScrollTo(scrollTarget, offset, duration);
    return;
  }

  setHorizontalScroll(scrollTarget, offset);
}
var scroll_size;
function getScrollbarWidth() {
  if (scroll_size !== undefined) {
    return scroll_size;
  }

  var inner = document.createElement('p'),
      outer = document.createElement('div');
  css(inner, {
    width: '100%',
    height: '200px'
  });
  css(outer, {
    position: 'absolute',
    top: '0px',
    left: '0px',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });
  outer.appendChild(inner);
  document.body.appendChild(outer);
  var w1 = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var w2 = inner.offsetWidth;

  if (w1 === w2) {
    w2 = outer.clientWidth;
  }

  outer.remove();
  scroll_size = w1 - w2;
  return scroll_size;
}
function hasScrollbar(el) {
  var onY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!el || el.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }

  return onY ? el.scrollHeight > el.clientHeight && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-y'])) : el.scrollWidth > el.clientWidth && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-x']));
}
/* harmony default export */ var utils_scroll = ({
  getScrollTarget,
  getScrollHeight,
  getScrollWidth,
  getScrollPosition,
  getHorizontalScrollPosition,
  animScrollTo,
  animHorizontalScrollTo,
  setScrollPosition,
  setHorizontalScrollPosition,
  getScrollbarWidth,
  hasScrollbar
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/escape-key.js



var escape_key_handlers = [];
/* harmony default export */ var escape_key = ({
  __install() {
    this.__installed = true;
    window.addEventListener('keyup', evt => {
      if (escape_key_handlers.length !== 0 && isKeyCode(evt, 27) === true) {
        escape_key_handlers[escape_key_handlers.length - 1].fn(evt);
      }
    });
  },

  register(comp, fn) {
    if (comp.$q.platform.is.desktop === true) {
      this.__installed !== true && this.__install();
      escape_key_handlers.push({
        comp,
        fn
      });
    }
  },

  pop(comp) {
    if (comp.$q.platform.is.desktop === true) {
      var index = escape_key_handlers.findIndex(h => h.comp === comp);

      if (index > -1) {
        escape_key_handlers.splice(index, 1);
      }
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/position-engine.js




var vpLeft, vpTop;
function validatePosition(pos) {
  var parts = pos.split(' ');

  if (parts.length !== 2) {
    return false;
  }

  if (!['top', 'center', 'bottom'].includes(parts[0])) {
    console.error('Anchor/Self position must start with one of top/center/bottom');
    return false;
  }

  if (!['left', 'middle', 'right'].includes(parts[1])) {
    console.error('Anchor/Self position must end with one of left/middle/right');
    return false;
  }

  return true;
}
function validateOffset(val) {
  if (!val) {
    return true;
  }

  if (val.length !== 2) {
    return false;
  }

  if (typeof val[0] !== 'number' || typeof val[1] !== 'number') {
    return false;
  }

  return true;
}
function parsePosition(pos) {
  var parts = pos.split(' ');
  return {
    vertical: parts[0],
    horizontal: parts[1]
  };
}
function validateCover(val) {
  if (val === true || val === false) {
    return true;
  }

  return validatePosition(val);
}
function getAnchorProps(el, offset) {
  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left,
      right = _el$getBoundingClient.right,
      bottom = _el$getBoundingClient.bottom,
      width = _el$getBoundingClient.width,
      height = _el$getBoundingClient.height;

  if (offset !== void 0) {
    top -= offset[1];
    left -= offset[0];
    bottom += offset[1];
    right += offset[0];
    width += offset[0];
    height += offset[1];
  }

  return {
    top,
    left,
    right,
    bottom,
    width,
    height,
    middle: left + (right - left) / 2,
    center: top + (bottom - top) / 2
  };
}
function getTargetProps(el) {
  return {
    top: 0,
    center: el.offsetHeight / 2,
    bottom: el.offsetHeight,
    left: 0,
    middle: el.offsetWidth / 2,
    right: el.offsetWidth
  };
} // cfg: { el, anchorEl, anchorOrigin, selfOrigin, offset, absoluteOffset, cover, fit, maxHeight, maxWidth }

function setPosition(cfg) {
  if (client.is.ios === true && window.visualViewport !== void 0) {
    var elStyle = document.body.style;
    var _window$visualViewpor = window.visualViewport,
        left = _window$visualViewpor.offsetLeft,
        top = _window$visualViewpor.offsetTop;

    if (left !== vpLeft) {
      elStyle.setProperty('--q-vp-left', left + 'px');
      vpLeft = left;
    }

    if (top !== vpTop) {
      elStyle.setProperty('--q-vp-top', top + 'px');
      vpTop = top;
    }
  }

  var anchorProps; // scroll position might change
  // if max-height changes, so we
  // need to restore it after we calculate
  // the new positioning

  var scrollTop = cfg.el.scrollTop;
  cfg.el.style.maxHeight = cfg.maxHeight;
  cfg.el.style.maxWidth = cfg.maxWidth;

  if (cfg.absoluteOffset === void 0) {
    anchorProps = getAnchorProps(cfg.anchorEl, cfg.cover === true ? [0, 0] : cfg.offset);
  } else {
    var _cfg$anchorEl$getBoun = cfg.anchorEl.getBoundingClientRect(),
        anchorTop = _cfg$anchorEl$getBoun.top,
        anchorLeft = _cfg$anchorEl$getBoun.left,
        _top = anchorTop + cfg.absoluteOffset.top,
        _left = anchorLeft + cfg.absoluteOffset.left;

    anchorProps = {
      top: _top,
      left: _left,
      width: 1,
      height: 1,
      right: _left + 1,
      center: _top,
      middle: _left,
      bottom: _top + 1
    };
  }

  if (cfg.fit === true || cfg.cover === true) {
    cfg.el.style.minWidth = anchorProps.width + 'px';

    if (cfg.cover === true) {
      cfg.el.style.minHeight = anchorProps.height + 'px';
    }
  }

  var targetProps = getTargetProps(cfg.el),
      props = {
    top: anchorProps[cfg.anchorOrigin.vertical] - targetProps[cfg.selfOrigin.vertical],
    left: anchorProps[cfg.anchorOrigin.horizontal] - targetProps[cfg.selfOrigin.horizontal]
  };
  applyBoundaries(props, anchorProps, targetProps, cfg.anchorOrigin, cfg.selfOrigin);
  cfg.el.style.top = Math.max(0, Math.floor(props.top)) + 'px';
  cfg.el.style.left = Math.max(0, Math.floor(props.left)) + 'px';

  if (props.maxHeight !== void 0) {
    cfg.el.style.maxHeight = Math.floor(props.maxHeight) + 'px';
  }

  if (props.maxWidth !== void 0) {
    cfg.el.style.maxWidth = Math.floor(props.maxWidth) + 'px';
  } // restore scroll position


  if (cfg.el.scrollTop !== scrollTop) {
    cfg.el.scrollTop = scrollTop;
  }
}

function applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin) {
  var currentHeight = targetProps.bottom,
      currentWidth = targetProps.right,
      margin = getScrollbarWidth(),
      innerHeight = window.innerHeight - margin,
      innerWidth = window.innerWidth - margin;

  if (props.top < 0 || props.top + currentHeight > innerHeight) {
    if (selfOrigin.vertical === 'center') {
      props.top = anchorProps[anchorOrigin.vertical] > innerHeight / 2 ? innerHeight - currentHeight : 0;
      props.maxHeight = Math.min(currentHeight, innerHeight);
    } else if (anchorProps[anchorOrigin.vertical] > innerHeight / 2) {
      var anchorY = Math.min(innerHeight, anchorOrigin.vertical === 'center' ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.bottom : anchorProps.top);
      props.maxHeight = Math.min(currentHeight, anchorY);
      props.top = Math.max(0, anchorY - currentHeight);
    } else {
      props.top = anchorOrigin.vertical === 'center' ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.top : anchorProps.bottom;
      props.maxHeight = Math.min(currentHeight, innerHeight - props.top);
    }
  }

  if (props.left < 0 || props.left + currentWidth > innerWidth) {
    props.maxWidth = Math.min(currentWidth, innerWidth);

    if (selfOrigin.horizontal === 'middle') {
      props.left = anchorProps[anchorOrigin.horizontal] > innerWidth / 2 ? innerWidth - currentWidth : 0;
    } else if (anchorProps[anchorOrigin.horizontal] > innerWidth / 2) {
      var anchorX = Math.min(innerWidth, anchorOrigin.horizontal === 'middle' ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.right : anchorProps.left);
      props.maxWidth = Math.min(currentWidth, anchorX);
      props.left = Math.max(0, anchorX - props.maxWidth);
    } else {
      props.left = anchorOrigin.horizontal === 'middle' ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.left : anchorProps.right;
      props.maxWidth = Math.min(currentWidth, innerWidth - props.left);
    }
  }
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/menu/QMenu.js







function QMenu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QMenu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QMenu_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QMenu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }













/* harmony default export */ var QMenu = (vue_runtime_esm["a" /* default */].extend({
  name: 'QMenu',
  mixins: [mixins_dark, mixins_anchor, model_toggle, portal, transition],
  directives: {
    ClickOutside: ClickOutside
  },
  props: {
    persistent: Boolean,
    autoClose: Boolean,
    separateClosePopup: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    fit: Boolean,
    cover: Boolean,
    square: Boolean,
    anchor: {
      type: String,
      validator: validatePosition
    },
    self: {
      type: String,
      validator: validatePosition
    },
    offset: {
      type: Array,
      validator: validateOffset
    },
    touchPosition: Boolean,
    maxHeight: {
      type: String,
      default: null
    },
    maxWidth: {
      type: String,
      default: null
    }
  },
  computed: {
    horizSide() {
      return this.$q.lang.rtl === true ? 'right' : 'left';
    },

    anchorOrigin() {
      return parsePosition(this.anchor || (this.cover === true ? "center middle" : "bottom ".concat(this.horizSide)));
    },

    selfOrigin() {
      return this.cover === true ? this.anchorOrigin : parsePosition(this.self || "top ".concat(this.horizSide));
    },

    menuClass() {
      return (this.square === true ? ' q-menu--square' : '') + (this.isDark === true ? ' q-menu--dark q-dark' : '');
    },

    hideOnRouteChange() {
      return this.persistent !== true;
    }

  },
  methods: {
    focus() {
      var node = this.__portal !== void 0 && this.__portal.$refs !== void 0 ? this.__portal.$refs.inner : void 0;

      if (node !== void 0 && node.contains(document.activeElement) !== true) {
        node = node.querySelector('[autofocus], [data-autofocus]') || node;
        node.focus();
      }
    },

    __show(evt) {
      // IE can have null document.activeElement
      this.__refocusTarget = this.noRefocus === false && document.activeElement !== null ? document.activeElement : void 0;
      escape_key.register(this, () => {
        if (this.persistent !== true) {
          this.$emit('escape-key');
          this.hide();
        }
      });

      this.__showPortal();

      this.__configureScrollTarget();

      this.absoluteOffset = void 0;

      if (evt !== void 0 && (this.touchPosition || this.contextMenu)) {
        var pos = event_position(evt);

        if (pos.left !== void 0) {
          var _this$anchorEl$getBou = this.anchorEl.getBoundingClientRect(),
              top = _this$anchorEl$getBou.top,
              left = _this$anchorEl$getBou.left;

          this.absoluteOffset = {
            left: pos.left - left,
            top: pos.top - top
          };
        }
      }

      if (this.unwatch === void 0) {
        this.unwatch = this.$watch(() => this.$q.screen.width + '|' + this.$q.screen.height, this.updatePosition);
      }

      this.$el.dispatchEvent(create('popup-show', {
        bubbles: true
      })); // IE can have null document.activeElement

      if (this.noFocus !== true && document.activeElement !== null) {
        document.activeElement.blur();
      }

      this.__nextTick(() => {
        this.updatePosition();
        this.noFocus !== true && this.focus();
      });

      this.__setTimeout(() => {
        // required in order to avoid the "double-tap needed" issue
        if (this.$q.platform.is.ios === true) {
          // if auto-close, then this click should
          // not close the menu
          this.__avoidAutoClose = this.autoClose;

          this.__portal.$el.click();
        }

        this.$emit('show', evt);
      }, 300);
    },

    __hide(evt) {
      this.__anchorCleanup(true); // check null for IE


      if (this.__refocusTarget !== void 0 && this.__refocusTarget !== null && ( // menu was hidden from code or ESC plugin
      evt === void 0 || // menu was not closed from a mouse or touch clickOutside
      evt.qClickOutside !== true)) {
        this.__refocusTarget.focus();
      }

      this.$el.dispatchEvent(create('popup-hide', {
        bubbles: true
      }));

      this.__setTimeout(() => {
        this.__hidePortal();

        this.$emit('hide', evt);
      }, 300);
    },

    __anchorCleanup(hiding) {
      this.absoluteOffset = void 0;

      if (this.unwatch !== void 0) {
        this.unwatch();
        this.unwatch = void 0;
      }

      if (hiding === true || this.showing === true) {
        escape_key.pop(this);

        this.__unconfigureScrollTarget();
      }
    },

    __unconfigureScrollTarget() {
      if (this.scrollTarget !== void 0) {
        this.__changeScrollEvent(this.scrollTarget);

        this.scrollTarget = void 0;
      }
    },

    __configureScrollTarget() {
      if (this.anchorEl !== void 0) {
        this.scrollTarget = getScrollTarget(this.anchorEl);

        this.__changeScrollEvent(this.scrollTarget, this.updatePosition);
      }
    },

    __onAutoClose(e) {
      // if auto-close, then the ios double-tap fix which
      // issues a click should not close the menu
      if (this.__avoidAutoClose !== true) {
        closePortalMenus(this, e);
        this.$listeners.click !== void 0 && this.$emit('click', e);
      } else {
        this.__avoidAutoClose = false;
      }
    },

    updatePosition() {
      if (this.__portal === void 0) {
        return;
      }

      var el = this.__portal.$el;

      if (el.nodeType === 8) {
        // IE replaces the comment with delay
        setTimeout(this.updatePosition, 25);
        return;
      }

      setPosition({
        el,
        offset: this.offset,
        anchorEl: this.anchorEl,
        anchorOrigin: this.anchorOrigin,
        selfOrigin: this.selfOrigin,
        absoluteOffset: this.absoluteOffset,
        fit: this.fit,
        cover: this.cover,
        maxHeight: this.maxHeight,
        maxWidth: this.maxWidth
      });
    },

    __onClickOutside(e) {
      if (this.persistent !== true && this.showing === true) {
        var targetClassList = e.target.classList;
        this.hide(e);

        if ( // always prevent touch event
        e.type === 'touchstart' || // prevent click if it's on a dialog backdrop
        targetClassList.contains('q-dialog__backdrop')) {
          stopAndPrevent(e);
        }

        return true;
      }
    },

    __renderPortal(h) {
      var on = QMenu_objectSpread({}, this.$listeners, {
        // stop propagating these events from children
        input: event_stop,
        'popup-show': event_stop,
        'popup-hide': event_stop
      });

      if (this.autoClose === true) {
        on.click = this.__onAutoClose;
      }

      return h('transition', {
        props: {
          name: this.transition
        }
      }, [this.showing === true ? h('div', {
        ref: 'inner',
        staticClass: 'q-menu scroll' + this.menuClass,
        class: this.contentClass,
        style: this.contentStyle,
        attrs: QMenu_objectSpread({
          tabindex: -1
        }, this.$attrs),
        on,
        directives: [{
          name: 'click-outside',
          value: this.__onClickOutside,
          arg: this.anchorEl
        }]
      }, slot_slot(this, 'default')) : null]);
    }

  },

  mounted() {
    this.__processModelChange(this.value);
  },

  beforeDestroy() {
    // When the menu is destroyed while open we can only emit the event on anchorEl
    if (this.showing === true && this.anchorEl !== void 0) {
      this.anchorEl.dispatchEvent(create('popup-hide', {
        bubbles: true
      }));
    }
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-dropdown/QBtnDropdown.js











function QBtnDropdown_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QBtnDropdown_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QBtnDropdown_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QBtnDropdown_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









/* harmony default export */ var QBtnDropdown = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBtnDropdown',
  mixins: [mixins_btn],
  props: {
    value: Boolean,
    split: Boolean,
    dropdownIcon: String,
    contentClass: [Array, String, Object],
    contentStyle: [Array, String, Object],
    cover: Boolean,
    persistent: Boolean,
    autoClose: Boolean,
    menuAnchor: {
      type: String,
      default: 'bottom right'
    },
    menuSelf: {
      type: String,
      default: 'top right'
    },
    disableMainBtn: Boolean,
    disableDropdown: Boolean
  },

  data() {
    return {
      showing: this.value
    };
  },

  watch: {
    value(val) {
      this.$refs.menu !== void 0 && this.$refs.menu[val ? 'show' : 'hide']();
    }

  },

  render(h) {
    var label = slot_slot(this, 'label', []);
    var Arrow = [h(QIcon, {
      props: {
        name: this.dropdownIcon || this.$q.iconSet.arrow.dropdown
      },
      staticClass: 'q-btn-dropdown__arrow',
      class: {
        'rotate-180': this.showing,
        'q-btn-dropdown__arrow-container': this.split === false
      }
    })];
    this.disableDropdown !== true && Arrow.push(h(QMenu, {
      ref: 'menu',
      props: {
        cover: this.cover,
        fit: true,
        persistent: this.persistent,
        autoClose: this.autoClose,
        anchor: this.menuAnchor,
        self: this.menuSelf,
        contentClass: this.contentClass,
        contentStyle: this.contentStyle,
        separateClosePopup: true
      },
      on: cache(this, 'menu', {
        'before-show': e => {
          this.showing = true;
          this.$emit('before-show', e);
        },
        show: e => {
          this.$emit('show', e);
          this.$emit('input', true);
        },
        'before-hide': e => {
          this.showing = false;
          this.$emit('before-hide', e);
        },
        hide: e => {
          this.$emit('hide', e);
          this.$emit('input', false);
        }
      })
    }, slot_slot(this, 'default')));

    if (this.split === false) {
      return h(QBtn, {
        class: 'q-btn-dropdown q-btn-dropdown--simple',
        props: QBtnDropdown_objectSpread({}, this.$props, {
          disable: this.disable === true || this.disableMainBtn === true,
          noWrap: true,
          round: false
        }),
        on: cache(this, 'nonSpl', {
          click: e => {
            this.$emit('click', e);
          }
        })
      }, label.concat(Arrow));
    }

    var Btn = h(QBtn, {
      class: 'q-btn-dropdown--current',
      props: QBtnDropdown_objectSpread({}, this.$props, {
        disable: this.disable === true || this.disableMainBtn === true,
        noWrap: true,
        iconRight: this.iconRight,
        round: false
      }),
      on: cache(this, 'spl', {
        click: e => {
          this.hide();
          this.$emit('click', e);
        }
      })
    }, label);
    return h(QBtnGroup, {
      props: {
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push,
        unelevated: this.unelevated,
        glossy: this.glossy,
        stretch: this.stretch
      },
      staticClass: 'q-btn-dropdown q-btn-dropdown--split no-wrap q-btn-item'
    }, [Btn, h(QBtn, {
      staticClass: 'q-btn-dropdown__arrow-container',
      props: {
        disable: this.disable === true || this.disableDropdown === true,
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push,
        size: this.size,
        color: this.color,
        textColor: this.textColor,
        dense: this.dense,
        ripple: this.ripple
      }
    }, Arrow)]);
  },

  methods: {
    toggle(evt) {
      this.$refs.menu && this.$refs.menu.toggle(evt);
    },

    show(evt) {
      this.$refs.menu && this.$refs.menu.show(evt);
    },

    hide(evt) {
      this.$refs.menu && this.$refs.menu.hide(evt);
    }

  },

  mounted() {
    this.value === true && this.show();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-dropdown/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-group/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.every.js
var es_array_every = __webpack_require__("a623");

// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-toggle/QBtnToggle.js









/* harmony default export */ var QBtnToggle = (vue_runtime_esm["a" /* default */].extend({
  name: 'QBtnToggle',
  mixins: [ripple],
  props: {
    value: {
      required: true
    },
    options: {
      type: Array,
      required: true,
      validator: v => v.every(opt => ('label' in opt || 'icon' in opt || 'slot' in opt) && 'value' in opt)
    },
    // To avoid seeing the active raise shadow through the transparent button, give it a color (even white).
    color: String,
    textColor: String,
    toggleColor: {
      type: String,
      default: 'primary'
    },
    toggleTextColor: String,
    outline: Boolean,
    flat: Boolean,
    unelevated: Boolean,
    rounded: Boolean,
    push: Boolean,
    glossy: Boolean,
    size: String,
    noCaps: Boolean,
    noWrap: Boolean,
    dense: Boolean,
    readonly: Boolean,
    disable: Boolean,
    stack: Boolean,
    stretch: Boolean,
    spread: Boolean,
    clearable: Boolean
  },
  computed: {
    val() {
      return this.options.map(opt => opt.value === this.value);
    }

  },
  methods: {
    __set(value, opt) {
      if (this.readonly !== true) {
        if (this.value === value) {
          if (this.clearable === true) {
            this.$emit('input', null, null);
            this.$emit('clear');
          }
        } else {
          this.$emit('input', value, opt);
        }
      }
    }

  },

  render(h) {
    return h(QBtnGroup, {
      staticClass: 'q-btn-toggle',
      props: {
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push,
        stretch: this.stretch,
        unelevated: this.unelevated,
        glossy: this.glossy,
        spread: this.spread
      },
      on: this.$listeners
    }, this.options.map((opt, i) => h(QBtn, {
      key: i,
      on: {
        click: () => this.__set(opt.value, opt)
      },
      props: {
        disable: this.disable || opt.disable,
        label: opt.label,
        // Colors come from the button specific options first, then from general props
        color: this.val[i] === true ? opt.toggleColor || this.toggleColor : opt.color || this.color,
        textColor: this.val[i] === true ? opt.toggleTextColor || this.toggleTextColor : opt.textColor || this.textColor,
        icon: opt.icon,
        iconRight: opt.iconRight,
        noCaps: this.noCaps === true || opt.noCaps === true,
        noWrap: this.noWrap === true || opt.noWrap === true,
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push,
        unelevated: this.unelevated,
        size: this.size,
        dense: this.dense,
        ripple: this.ripple !== void 0 ? this.ripple : opt.ripple,
        stack: this.stack === true || opt.stack === true,
        tabindex: opt.tabindex,
        stretch: this.stretch
      }
    }, opt.slot !== void 0 ? slot_slot(this, opt.slot) : void 0)));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-toggle/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/ratio.js

/* harmony default export */ var mixins_ratio = ({
  props: {
    ratio: [String, Number]
  },
  computed: {
    ratioStyle() {
      var ratio = this.ratio || this.naturalRatio;

      if (ratio !== void 0) {
        return {
          paddingBottom: "".concat(100 / ratio, "%")
        };
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/card/QCard.js






/* harmony default export */ var QCard = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCard',
  mixins: [mixins_dark, mixins_ratio],
  props: {
    square: Boolean,
    flat: Boolean,
    bordered: Boolean
  },
  computed: {
    classes() {
      return 'q-card' + (this.isDark === true ? ' q-card--dark q-dark' : '') + (this.bordered === true ? ' q-card--bordered' : '') + (this.square === true ? ' q-card--square no-border-radius' : '') + (this.flat === true ? ' q-card--flat no-shadow' : '');
    }

  },

  render(h) {
    return h('div', {
      class: this.classes,
      style: this.ratioStyle,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/card/QCardSection.js


/* harmony default export */ var QCardSection = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCardSection',
  props: {
    horizontal: Boolean
  },
  computed: {
    classes() {
      return 'q-card__section ' + "q-card__section--".concat(this.horizontal === true ? 'horiz row no-wrap' : 'vert');
    }

  },

  render(h) {
    return h('div', {
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/card/QCardActions.js




/* harmony default export */ var QCardActions = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCardActions',
  mixins: [mixins_align],
  props: {
    vertical: Boolean
  },
  computed: {
    classes() {
      return "q-card__actions--".concat(this.vertical === true ? 'vert column' : 'horiz row', " ").concat(this.alignClass);
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-card__actions',
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/card/index.js




// CONCATENATED MODULE: ./node_modules/quasar/src/directives/TouchSwipe.js








function parseArg(arg) {
  // delta (min velocity -- dist / time)
  // mobile min distance on first move
  // desktop min distance until deciding if it's a swipe or not
  var data = [0.06, 6, 50];

  if (typeof arg === 'string' && arg.length) {
    arg.split(':').forEach((val, index) => {
      var v = parseFloat(val);
      v && (data[index] = v);
    });
  }

  return data;
}

/* harmony default export */ var TouchSwipe = ({
  name: 'touch-swipe',

  bind(el, _ref) {
    var value = _ref.value,
        arg = _ref.arg,
        modifiers = _ref.modifiers;

    // early return, we don't need to do anything
    if (modifiers.mouse !== true && client.has.touch !== true) {
      return;
    }

    var mouseCapture = modifiers.mouseCapture === true ? 'Capture' : '';
    var ctx = {
      handler: value,
      sensitivity: parseArg(arg),
      modifiers: modifiers,
      direction: getModifierDirections(modifiers),

      noop() {},

      mouseStart(evt) {
        if (shouldStart(evt, ctx) && leftClick(evt)) {
          addEvt(ctx, 'temp', [[document, 'mousemove', 'move', "notPassive".concat(mouseCapture)], [document, 'mouseup', 'end', 'notPassiveCapture']]);
          ctx.start(evt, true);
        }
      },

      touchStart(evt) {
        if (shouldStart(evt, ctx)) {
          var target = getTouchTarget(evt.target);
          addEvt(ctx, 'temp', [[target, 'touchmove', 'move', 'notPassiveCapture'], [target, 'touchcancel', 'end', 'notPassiveCapture'], [target, 'touchend', 'end', 'notPassiveCapture']]);
          ctx.start(evt);
        }
      },

      start(evt, mouseEvent) {
        client.is.firefox === true && preventDraggable(el, true);
        var pos = event_position(evt);
        ctx.event = {
          x: pos.left,
          y: pos.top,
          time: Date.now(),
          mouse: mouseEvent === true,
          dir: false
        };
      },

      move(evt) {
        if (ctx.event === void 0) {
          return;
        }

        if (ctx.event.dir !== false) {
          stopAndPrevent(evt);
          return;
        }

        var time = Date.now() - ctx.event.time;

        if (time === 0) {
          return;
        }

        var pos = event_position(evt),
            distX = pos.left - ctx.event.x,
            absX = Math.abs(distX),
            distY = pos.top - ctx.event.y,
            absY = Math.abs(distY);

        if (ctx.event.mouse !== true) {
          if (absX < ctx.sensitivity[1] && absY < ctx.sensitivity[1]) {
            ctx.end(evt);
            return;
          }
        } else if (absX < ctx.sensitivity[2] && absY < ctx.sensitivity[2]) {
          return;
        }

        var velX = absX / time,
            velY = absY / time;

        if (ctx.direction.vertical === true && absX < absY && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = distY < 0 ? 'up' : 'down';
        }

        if (ctx.direction.horizontal === true && absX > absY && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = distX < 0 ? 'left' : 'right';
        }

        if (ctx.direction.up === true && absX < absY && distY < 0 && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = 'up';
        }

        if (ctx.direction.down === true && absX < absY && distY > 0 && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = 'down';
        }

        if (ctx.direction.left === true && absX > absY && distX < 0 && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = 'left';
        }

        if (ctx.direction.right === true && absX > absY && distX > 0 && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = 'right';
        }

        if (ctx.event.dir !== false) {
          stopAndPrevent(evt);

          if (ctx.event.mouse === true) {
            document.body.classList.add('no-pointer-events');
            document.body.classList.add('non-selectable');
            clearSelection();

            ctx.styleCleanup = withDelay => {
              ctx.styleCleanup = void 0;
              document.body.classList.remove('non-selectable');

              var remove = () => {
                document.body.classList.remove('no-pointer-events');
              };

              if (withDelay === true) {
                setTimeout(remove, 50);
              } else {
                remove();
              }
            };
          }

          ctx.handler({
            evt,
            touch: ctx.event.mouse !== true,
            mouse: ctx.event.mouse,
            direction: ctx.event.dir,
            duration: time,
            distance: {
              x: absX,
              y: absY
            }
          });
        } else {
          ctx.end(evt);
        }
      },

      end(evt) {
        if (ctx.event === void 0) {
          return;
        }

        cleanEvt(ctx, 'temp');
        client.is.firefox === true && preventDraggable(el, false);
        ctx.styleCleanup !== void 0 && ctx.styleCleanup(true);
        evt !== void 0 && ctx.event.dir !== false && stopAndPrevent(evt);
        ctx.event = void 0;
      }

    };

    if (el.__qtouchswipe) {
      el.__qtouchswipe_old = el.__qtouchswipe;
    }

    el.__qtouchswipe = ctx;
    modifiers.mouse === true && addEvt(ctx, 'main', [[el, 'mousedown', 'mouseStart', "passive".concat(mouseCapture)]]);
    client.has.touch === true && addEvt(ctx, 'main', [[el, 'touchstart', 'touchStart', "passive".concat(modifiers.capture === true ? 'Capture' : '')], [el, 'touchmove', 'noop', "notPassiveCapture"]]);
  },

  update(el, binding) {
    var ctx = el.__qtouchswipe;
    ctx !== void 0 && updateModifiers(ctx, binding);
  },

  unbind(el) {
    var ctx = el.__qtouchswipe_old || el.__qtouchswipe;

    if (ctx !== void 0) {
      cleanEvt(ctx, 'main');
      cleanEvt(ctx, 'temp');
      client.is.firefox === true && preventDraggable(el, false);
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el[el.__qtouchswipe_old ? '__qtouchswipe_old' : '__qtouchswipe'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/panel.js







var PanelWrapper = vue_runtime_esm["a" /* default */].extend({
  name: 'QTabPanelWrapper',

  render(h) {
    return h('div', {
      staticClass: 'q-panel scroll',
      attrs: {
        role: 'tabpanel'
      },
      // stop propagation of content emitted @input
      // which would tamper with Panel's model
      on: cache(this, 'stop', {
        input: event_stop
      })
    }, slot_slot(this, 'default'));
  }

});
var PanelParentMixin = {
  directives: {
    TouchSwipe: TouchSwipe
  },
  props: {
    value: {
      required: true
    },
    animated: Boolean,
    infinite: Boolean,
    swipeable: Boolean,
    transitionPrev: {
      type: String,
      default: 'slide-right'
    },
    transitionNext: {
      type: String,
      default: 'slide-left'
    },
    keepAlive: Boolean
  },

  data() {
    return {
      panelIndex: null,
      panelTransition: null
    };
  },

  computed: {
    panelDirectives() {
      if (this.swipeable) {
        return [{
          name: 'touch-swipe',
          value: this.__swipe,
          modifiers: {
            horizontal: true,
            mouse: true
          }
        }];
      }
    },

    contentKey() {
      return typeof this.value === 'string' || typeof this.value === 'number' ? this.value : String(this.value);
    }

  },
  watch: {
    value(newVal, oldVal) {
      var index = this.__isValidPanelName(newVal) === true ? this.__getPanelIndex(newVal) : -1;

      if (this.__forcedPanelTransition !== true) {
        this.__updatePanelTransition(index === -1 ? 0 : index < this.__getPanelIndex(oldVal) ? -1 : 1);
      }

      if (this.panelIndex !== index) {
        this.panelIndex = index;
        this.$emit('before-transition', newVal, oldVal);
        this.$nextTick(() => {
          this.$emit('transition', newVal, oldVal);
        });
      }
    }

  },
  methods: {
    next() {
      this.__go(1);
    },

    previous() {
      this.__go(-1);
    },

    goTo(name) {
      this.$emit('input', name);
    },

    __isValidPanelName(name) {
      return name !== void 0 && name !== null && name !== '';
    },

    __getPanelIndex(name) {
      return this.panels.findIndex(panel => {
        var opt = panel.componentOptions;
        return opt && opt.propsData.name === name && opt.propsData.disable !== '' && opt.propsData.disable !== true;
      });
    },

    __getAllPanels() {
      return this.panels.filter(panel => panel.componentOptions !== void 0 && this.__isValidPanelName(panel.componentOptions.propsData.name));
    },

    __getAvailablePanels() {
      return this.panels.filter(panel => {
        var opt = panel.componentOptions;
        return opt && opt.propsData.name !== void 0 && opt.propsData.disable !== '' && opt.propsData.disable !== true;
      });
    },

    __updatePanelTransition(direction) {
      var val = direction !== 0 && this.animated === true && this.panelIndex !== -1 ? 'q-transition--' + (direction === -1 ? this.transitionPrev : this.transitionNext) : null;

      if (this.panelTransition !== val) {
        this.panelTransition = val;
      }
    },

    __go(direction) {
      var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.panelIndex;
      var index = startIndex + direction;
      var slots = this.panels;

      while (index > -1 && index < slots.length) {
        var opt = slots[index].componentOptions;

        if (opt !== void 0 && opt.propsData.disable !== '' && opt.propsData.disable !== true) {
          this.__updatePanelTransition(direction);

          this.__forcedPanelTransition = true;
          this.$emit('input', slots[index].componentOptions.propsData.name);
          setTimeout(() => {
            this.__forcedPanelTransition = false;
          });
          return;
        }

        index += direction;
      }

      if (this.infinite === true && slots.length > 0 && startIndex !== -1 && startIndex !== slots.length) {
        this.__go(direction, direction === -1 ? slots.length : -1);
      }
    },

    __swipe(evt) {
      this.__go((this.$q.lang.rtl === true ? -1 : 1) * (evt.direction === 'left' ? 1 : -1));
    },

    __updatePanelIndex() {
      var index = this.__getPanelIndex(this.value);

      if (this.panelIndex !== index) {
        this.panelIndex = index;
      }

      return true;
    },

    __getPanelContent(h) {
      if (this.panels.length === 0) {
        return;
      }

      var panel = this.__isValidPanelName(this.value) && this.__updatePanelIndex() && this.panels[this.panelIndex];
      var content = this.keepAlive === true ? [h('keep-alive', [h(PanelWrapper, {
        key: this.contentKey
      }, [panel])])] : [h('div', {
        staticClass: 'q-panel scroll',
        key: this.contentKey,
        attrs: {
          role: 'tabpanel'
        },
        // stop propagation of content emitted @input
        // which would tamper with Panel's model
        on: cache(this, 'stop', {
          input: event_stop
        })
      }, [panel])];
      return this.animated === true ? [h('transition', {
        props: {
          name: this.panelTransition
        }
      }, content)] : content;
    }

  },

  render(h) {
    this.panels = slot_slot(this, 'default', []);
    return this.__renderPanels(h);
  }

};
var PanelChildMixin = {
  props: {
    name: {
      required: true
    },
    disable: Boolean
  }
};
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/fullscreen.js

/* harmony default export */ var fullscreen = ({
  props: {
    fullscreen: Boolean,
    noRouteFullscreenExit: Boolean
  },

  data() {
    return {
      inFullscreen: false
    };
  },

  watch: {
    $route() {
      this.noRouteFullscreenExit !== true && this.exitFullscreen();
    },

    fullscreen(v) {
      if (this.inFullscreen !== v) {
        this.toggleFullscreen();
      }
    },

    inFullscreen(v) {
      this.$emit('update:fullscreen', v);
      this.$emit('fullscreen', v);
    }

  },
  methods: {
    toggleFullscreen() {
      if (this.inFullscreen === true) {
        this.exitFullscreen();
      } else {
        this.setFullscreen();
      }
    },

    setFullscreen() {
      if (this.inFullscreen === true) {
        return;
      }

      this.inFullscreen = true;
      this.container = this.$el.parentNode;
      this.container.replaceChild(this.fullscreenFillerNode, this.$el);
      document.body.appendChild(this.$el);
      document.body.classList.add('q-body--fullscreen-mixin');
      this.__historyFullscreen = {
        handler: this.exitFullscreen
      };
      src_history.add(this.__historyFullscreen);
    },

    exitFullscreen() {
      if (this.inFullscreen !== true) {
        return;
      }

      if (this.__historyFullscreen !== void 0) {
        src_history.remove(this.__historyFullscreen);
        this.__historyFullscreen = void 0;
      }

      this.container.replaceChild(this.$el, this.fullscreenFillerNode);
      document.body.classList.remove('q-body--fullscreen-mixin');
      this.inFullscreen = false;

      if (this.$el.scrollIntoView !== void 0) {
        setTimeout(() => {
          this.$el.scrollIntoView();
        });
      }
    }

  },

  beforeMount() {
    this.fullscreenFillerNode = document.createElement('span');
  },

  mounted() {
    this.fullscreen === true && this.setFullscreen();
  },

  beforeDestroy() {
    this.exitFullscreen();
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/is.js



function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }

  if (a instanceof Date && b instanceof Date) {
    return a.getTime() === b.getTime();
  }

  if (a !== Object(a) || b !== Object(b)) {
    return false;
  }

  var props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    return false;
  }

  return props.every(prop => isDeepEqual(a[prop], b[prop]));
}
function isPrintableChar(v) {
  return v > 47 && v < 58 || // number keys
  v === 32 || v === 13 || // spacebar & return key(s) (if you want to allow carriage returns)
  v > 64 && v < 91 || // letter keys
  v > 95 && v < 112 || // numpad keys
  v > 185 && v < 193 || // ;=,-./` (in order)
  v > 218 && v < 223;
}
function isObject(v) {
  return Object(v) === v;
}
function isDate(v) {
  return Object.prototype.toString.call(v) === '[object Date]';
}
function isRegexp(v) {
  return Object.prototype.toString.call(v) === '[object RegExp]';
}
function isNumber(v) {
  return typeof v === 'number' && isFinite(v);
}
function isString(v) {
  return typeof v === 'string';
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/carousel/QCarousel.js












/* harmony default export */ var QCarousel = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCarousel',
  mixins: [mixins_dark, PanelParentMixin, fullscreen],
  props: {
    height: String,
    padding: Boolean,
    transitionPrev: {
      default: 'fade'
    },
    transitionNext: {
      default: 'fade'
    },
    controlColor: String,
    autoplay: [Number, Boolean],
    arrows: Boolean,
    prevIcon: String,
    nextIcon: String,
    navigation: Boolean,
    navigationIcon: String,
    thumbnails: Boolean
  },
  computed: {
    style() {
      if (this.inFullscreen !== true && this.height !== void 0) {
        return {
          height: this.height
        };
      }
    },

    classes() {
      return {
        fullscreen: this.inFullscreen,
        'q-carousel--arrows': this.padding === true && this.arrows === true,
        'q-carousel--navigation': this.padding === true && this.navigation === true,
        'q-carousel--dark q-dark': this.isDark
      };
    },

    arrowIcons() {
      var ico = [this.prevIcon || this.$q.iconSet.carousel.left, this.nextIcon || this.$q.iconSet.carousel.right];
      return this.$q.lang.rtl === true ? ico.reverse() : ico;
    },

    navIcon() {
      return this.navigationIcon || this.$q.iconSet.carousel.navigationIcon;
    }

  },
  watch: {
    value() {
      if (this.autoplay) {
        clearInterval(this.timer);

        this.__startTimer();
      }
    },

    autoplay(val) {
      if (val) {
        this.__startTimer();
      } else {
        clearInterval(this.timer);
      }
    }

  },
  methods: {
    __startTimer() {
      this.timer = setTimeout(this.next, isNumber(this.autoplay) ? this.autoplay : 5000);
    },

    __getNavigationContainer(h, type, mapping) {
      return h('div', {
        staticClass: 'q-carousel__control q-carousel__navigation no-wrap absolute flex scroll-x q-carousel__navigation--' + type,
        class: this.controlColor ? "text-".concat(this.controlColor) : null
      }, [h('div', {
        staticClass: 'q-carousel__navigation-inner flex no-wrap justify-center'
      }, this.__getAvailablePanels().map(mapping))]);
    },

    __getContent(h) {
      var node = [];
      this.arrows === true && node.push(h(QBtn, {
        staticClass: 'q-carousel__control q-carousel__prev-arrow absolute',
        props: {
          size: 'lg',
          color: this.controlColor,
          icon: this.arrowIcons[0],
          round: true,
          flat: true,
          dense: true
        },
        on: cache(this, 'prev', {
          click: this.previous
        })
      }), h(QBtn, {
        staticClass: 'q-carousel__control q-carousel__next-arrow absolute',
        props: {
          size: 'lg',
          color: this.controlColor,
          icon: this.arrowIcons[1],
          round: true,
          flat: true,
          dense: true
        },
        on: cache(this, 'next', {
          click: this.next
        })
      }));

      if (this.navigation === true) {
        node.push(this.__getNavigationContainer(h, 'buttons', panel => {
          var name = panel.componentOptions.propsData.name;
          return h(QBtn, {
            key: name,
            staticClass: 'q-carousel__navigation-icon',
            class: {
              'q-carousel__navigation-icon--active': name === this.value
            },
            props: {
              icon: this.navIcon,
              round: true,
              flat: true,
              size: 'sm'
            },
            on: cache(this, 'nav#' + name, {
              click: () => {
                this.goTo(name);
              }
            })
          });
        }));
      } else if (this.thumbnails === true) {
        node.push(this.__getNavigationContainer(h, 'thumbnails', panel => {
          var slide = panel.componentOptions.propsData;
          return h('img', {
            class: {
              'q-carousel__thumbnail--active': slide.name === this.value
            },
            attrs: {
              src: slide.imgSrc
            },
            key: 'tmb#' + slide.name,
            on: cache(this, 'tmb#' + slide.name, {
              click: () => {
                this.goTo(slide.name);
              }
            })
          });
        }));
      }

      return mergeSlot(node, this, 'control');
    },

    __renderPanels(h) {
      return h('div', {
        staticClass: 'q-carousel q-panel-parent',
        style: this.style,
        class: this.classes
      }, [h('div', {
        staticClass: 'q-carousel__slides-container',
        directives: this.panelDirectives
      }, this.__getPanelContent(h))].concat(this.__getContent(h)));
    }

  },

  mounted() {
    this.autoplay && this.__startTimer();
  },

  beforeDestroy() {
    clearInterval(this.timer);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/carousel/QCarouselSlide.js



/* harmony default export */ var QCarouselSlide = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCarouselSlide',
  mixins: [PanelChildMixin],
  props: {
    imgSrc: String
  },
  computed: {
    style() {
      if (this.imgSrc) {
        return {
          backgroundImage: "url(".concat(this.imgSrc, ")")
        };
      }
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-carousel__slide',
      style: this.style,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/carousel/QCarouselControl.js



/* harmony default export */ var QCarouselControl = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCarouselControl',
  props: {
    position: {
      type: String,
      default: 'bottom-right'
    },
    offset: {
      type: Array,
      default: () => [18, 18]
    }
  },
  computed: {
    classes() {
      return "absolute-".concat(this.position);
    },

    style() {
      return {
        margin: "".concat(this.offset[1], "px ").concat(this.offset[0], "px")
      };
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-carousel__control absolute',
      style: this.style,
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/carousel/index.js




// CONCATENATED MODULE: ./node_modules/quasar/src/components/chat/QChatMessage.js



/* harmony default export */ var QChatMessage = (vue_runtime_esm["a" /* default */].extend({
  name: 'QChatMessage',
  props: {
    sent: Boolean,
    label: String,
    bgColor: String,
    textColor: String,
    name: String,
    avatar: String,
    text: Array,
    stamp: String,
    size: String,
    labelSanitize: Boolean,
    nameSanitize: Boolean,
    textSanitize: Boolean,
    stampSanitize: Boolean
  },
  computed: {
    textClass() {
      if (this.textColor) {
        return "text-".concat(this.textColor);
      }
    },

    messageClass() {
      if (this.bgColor) {
        return "text-".concat(this.bgColor);
      }
    },

    sizeClass() {
      if (this.size) {
        return "col-".concat(this.size);
      }
    },

    classes() {
      return {
        'q-message-sent': this.sent,
        'q-message-received': !this.sent
      };
    }

  },
  methods: {
    __getText(h) {
      var domPropText = this.textSanitize === true ? 'textContent' : 'innerHTML',
          domPropStamp = this.stampSanitize === true ? 'textContent' : 'innerHTML';
      return this.text.map((msg, index) => h('div', {
        key: index,
        staticClass: 'q-message-text',
        class: this.messageClass
      }, [h('span', {
        staticClass: 'q-message-text-content',
        class: this.textClass
      }, [h('div', {
        domProps: {
          [domPropText]: msg
        }
      }), this.stamp ? h('div', {
        staticClass: 'q-message-stamp',
        domProps: {
          [domPropStamp]: this.stamp
        }
      }) : null])]));
    },

    __getMessage(h) {
      var content = uniqueSlot(this, 'default', []);

      if (this.stamp !== void 0) {
        content.push(h('div', {
          staticClass: 'q-message-stamp',
          domProps: {
            [this.stampSanitize === true ? 'textContent' : 'innerHTML']: this.stamp
          }
        }));
      }

      return h('div', {
        staticClass: 'q-message-text',
        class: this.messageClass
      }, [h('span', {
        staticClass: 'q-message-text-content',
        class: this.textClass
      }, content)]);
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-message',
      class: this.classes
    }, [this.label ? h('div', {
      staticClass: 'q-message-label text-center',
      domProps: {
        [this.labelSanitize === true ? 'textContent' : 'innerHTML']: this.label
      }
    }) : null, h('div', {
      staticClass: 'q-message-container row items-end no-wrap'
    }, [this.$scopedSlots.avatar !== void 0 ? this.$scopedSlots.avatar() : this.avatar !== void 0 ? h('img', {
      staticClass: 'q-message-avatar',
      attrs: {
        src: this.avatar
      }
    }) : null, h('div', {
      class: this.sizeClass
    }, [this.name !== void 0 ? h('div', {
      staticClass: 'q-message-name',
      domProps: {
        [this.nameSanitize === true ? 'textContent' : 'innerHTML']: this.name
      }
    }) : null, this.text !== void 0 ? this.__getText(h) : null, this.$scopedSlots.default !== void 0 ? this.__getMessage(h) : null])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/chat/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/checkbox.js







/* harmony default export */ var mixins_checkbox = ({
  mixins: [mixins_dark],
  props: {
    value: {
      required: true
    },
    val: {},
    trueValue: {
      default: true
    },
    falseValue: {
      default: false
    },
    label: String,
    leftLabel: Boolean,
    color: String,
    keepColor: Boolean,
    dense: Boolean,
    disable: Boolean,
    tabindex: [String, Number]
  },
  computed: {
    isTrue() {
      return this.modelIsArray ? this.index > -1 : this.value === this.trueValue;
    },

    isFalse() {
      return this.modelIsArray ? this.index === -1 : this.value === this.falseValue;
    },

    index() {
      if (this.modelIsArray === true) {
        return this.value.indexOf(this.val);
      }
    },

    modelIsArray() {
      return this.val !== void 0 && Array.isArray(this.value);
    },

    computedTabindex() {
      return this.disable === true ? -1 : this.tabindex || 0;
    }

  },
  methods: {
    toggle(e) {
      e !== void 0 && stopAndPrevent(e);

      if (this.disable === true) {
        return;
      }

      var val;

      if (this.modelIsArray === true) {
        if (this.isTrue === true) {
          val = this.value.slice();
          val.splice(this.index, 1);
        } else {
          val = this.value.concat([this.val]);
        }
      } else if (this.isTrue === true) {
        val = this.toggleIndeterminate === true ? this.indeterminateValue : this.falseValue;
      } else if (this.isFalse === true) {
        val = this.trueValue;
      } else {
        val = this.falseValue;
      }

      this.$emit('input', val);
    },

    __onKeydown(e) {
      if (e.keyCode === 13 || e.keyCode === 32) {
        stopAndPrevent(e);
      }
    },

    __onKeyup(e) {
      if (e.keyCode === 13 || e.keyCode === 32) {
        this.toggle(e);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/checkbox/QCheckbox.js




/* harmony default export */ var QCheckbox = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCheckbox',
  mixins: [mixins_checkbox],
  props: {
    toggleIndeterminate: Boolean,
    indeterminateValue: {
      default: null
    }
  },
  computed: {
    isIndeterminate() {
      return this.value === void 0 || this.value === this.indeterminateValue;
    },

    classes() {
      return {
        'disabled': this.disable,
        'q-checkbox--dark': this.isDark,
        'q-checkbox--dense': this.dense,
        'reverse': this.leftLabel
      };
    },

    innerClass() {
      if (this.isTrue === true) {
        return 'q-checkbox__inner--active' + (this.color !== void 0 ? ' text-' + this.color : '');
      } else if (this.isIndeterminate === true) {
        return 'q-checkbox__inner--indeterminate' + (this.color !== void 0 ? ' text-' + this.color : '');
      } else if (this.keepColor === true && this.color !== void 0) {
        return 'text-' + this.color;
      }
    }

  },

  render(h) {
    var content = [h('div', {
      staticClass: 'q-checkbox__bg absolute'
    }, [h('svg', {
      staticClass: 'q-checkbox__check fit absolute-full',
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        viewBox: '0 0 24 24'
      }
    }, [h('path', {
      attrs: {
        fill: 'none',
        d: 'M1.73,12.91 8.1,19.28 22.79,4.59'
      }
    })]), h('div', {
      staticClass: 'q-checkbox__check-indet absolute'
    })])];
    this.disable !== true && content.unshift(h('input', {
      staticClass: 'q-checkbox__native q-ma-none q-pa-none invisible',
      attrs: {
        type: 'checkbox'
      }
    }));
    var child = [h('div', {
      staticClass: 'q-checkbox__inner relative-position no-pointer-events',
      class: this.innerClass
    }, content)];
    var label = this.label !== void 0 ? mergeSlot([this.label], this, 'default') : slot_slot(this, 'default');
    label !== void 0 && child.push(h('div', {
      staticClass: 'q-checkbox__label q-anchor--skip'
    }, label));
    return h('div', {
      staticClass: 'q-checkbox cursor-pointer no-outline row inline no-wrap items-center',
      class: this.classes,
      attrs: {
        tabindex: this.computedTabindex
      },
      on: cache(this, 'inpExt', {
        click: this.toggle,
        keydown: this.__onKeydown,
        keyup: this.__onKeyup
      })
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/checkbox/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/chip/QChip.js










var QChip_sizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
/* harmony default export */ var QChip = (vue_runtime_esm["a" /* default */].extend({
  name: 'QChip',
  mixins: [ripple, size, mixins_dark],
  model: {
    event: 'remove'
  },
  props: {
    dense: Boolean,
    icon: String,
    iconRight: String,
    label: [String, Number],
    color: String,
    textColor: String,
    value: {
      type: Boolean,
      default: true
    },
    selected: {
      type: Boolean,
      default: null
    },
    size: String,
    square: Boolean,
    outline: Boolean,
    clickable: Boolean,
    removable: Boolean,
    tabindex: [String, Number],
    disable: Boolean
  },
  computed: {
    classes() {
      var text = this.outline === true ? this.color || this.textColor : this.textColor;
      return {
        ["bg-".concat(this.color)]: this.outline === false && this.color !== void 0,
        ["text-".concat(text, " q-chip--colored")]: text,
        disabled: this.disable,
        'q-chip--dense': this.dense,
        'q-chip--outline': this.outline,
        'q-chip--selected': this.selected,
        'q-chip--clickable cursor-pointer non-selectable q-hoverable': this.isClickable,
        'q-chip--square': this.square,
        'q-chip--dark q-dark': this.isDark
      };
    },

    style() {
      if (this.size !== void 0) {
        return {
          fontSize: this.size in QChip_sizes ? "".concat(QChip_sizes[this.size], "px") : this.size
        };
      }
    },

    hasLeftIcon() {
      return this.selected === true || this.icon !== void 0;
    },

    isClickable() {
      return this.disable === false && (this.clickable === true || this.selected !== null);
    },

    computedTabindex() {
      return this.disable === true ? -1 : this.tabindex || 0;
    }

  },
  methods: {
    __onKeyup(e) {
      e.keyCode === 13
      /* ENTER */
      && this.__onClick(e);
    },

    __onClick(e) {
      if (!this.disable) {
        this.$emit('update:selected', !this.selected);
        this.$emit('click', e);
      }
    },

    __onRemove(e) {
      if (e.keyCode === void 0 || e.keyCode === 13) {
        stopAndPrevent(e);
        !this.disable && this.$emit('remove', false);
      }
    },

    __getContent(h) {
      var child = [];
      this.isClickable === true && child.push(h('div', {
        staticClass: 'q-focus-helper'
      }));
      this.hasLeftIcon === true && child.push(h(QIcon, {
        staticClass: 'q-chip__icon q-chip__icon--left',
        props: {
          name: this.selected === true ? this.$q.iconSet.chip.selected : this.icon
        }
      }));
      var label = this.label !== void 0 ? [this.label] : void 0;
      child.push(h('div', {
        staticClass: 'q-chip__content row no-wrap items-center q-anchor--skip'
      }, mergeSlotSafely(label, this, 'default')));
      this.iconRight && child.push(h(QIcon, {
        staticClass: 'q-chip__icon q-chip__icon--right',
        props: {
          name: this.iconRight
        }
      }));
      this.removable && child.push(h(QIcon, {
        staticClass: 'q-chip__icon q-chip__icon--remove cursor-pointer',
        props: {
          name: this.$q.iconSet.chip.remove
        },
        attrs: {
          tabindex: this.computedTabindex
        },
        nativeOn: {
          click: this.__onRemove,
          keyup: this.__onRemove
        }
      }));
      return child;
    }

  },

  render(h) {
    if (this.value === false) {
      return;
    }

    var data = {
      staticClass: 'q-chip row inline no-wrap items-center',
      class: this.classes,
      style: this.style
    };
    this.isClickable === true && Object.assign(data, {
      attrs: {
        tabindex: this.computedTabindex
      },
      on: cache(this, 'click', {
        click: this.__onClick,
        keyup: this.__onKeyup
      }),
      directives: [{
        name: 'ripple',
        value: this.ripple
      }]
    });
    return h('div', data, this.__getContent(h));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/chip/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/circular-progress/QCircularProgress.js





var QCircularProgress_radius = 50,
    QCircularProgress_diameter = 2 * QCircularProgress_radius,
    circumference = QCircularProgress_diameter * Math.PI,
    strokeDashArray = Math.round(circumference * 1000) / 1000;
/* harmony default export */ var QCircularProgress = (vue_runtime_esm["a" /* default */].extend({
  name: 'QCircularProgress',
  mixins: [size],
  props: {
    value: {
      type: Number,
      default: 0
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    color: String,
    centerColor: String,
    trackColor: String,
    fontSize: String,
    // ratio
    thickness: {
      type: Number,
      default: 0.2,
      validator: v => v >= 0 && v <= 1
    },
    angle: {
      type: Number,
      default: 0
    },
    indeterminate: Boolean,
    showValue: Boolean,
    reverse: Boolean,
    instantFeedback: Boolean // used by QKnob, private

  },
  computed: {
    svgStyle() {
      return {
        transform: "rotate3d(0, 0, 1, ".concat(this.angle - 90, "deg)")
      };
    },

    circleStyle() {
      if (this.instantFeedback !== true && this.indeterminate !== true) {
        return {
          transition: 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
        };
      }
    },

    dir() {
      return (this.$q.lang.rtl === true ? -1 : 1) * (this.reverse ? -1 : 1);
    },

    viewBox() {
      return QCircularProgress_diameter / (1 - this.thickness / 2);
    },

    viewBoxAttr() {
      return "".concat(this.viewBox / 2, " ").concat(this.viewBox / 2, " ").concat(this.viewBox, " ").concat(this.viewBox);
    },

    strokeDashOffset() {
      var progress = 1 - (this.value - this.min) / (this.max - this.min);
      return this.dir * progress * circumference;
    },

    strokeWidth() {
      return this.thickness / 2 * this.viewBox;
    }

  },
  methods: {
    __getCircle(h, _ref) {
      var thickness = _ref.thickness,
          offset = _ref.offset,
          color = _ref.color,
          cls = _ref.cls;
      return h('circle', {
        staticClass: 'q-circular-progress__' + cls,
        class: color !== void 0 ? "text-".concat(color) : null,
        style: this.circleStyle,
        attrs: {
          fill: 'transparent',
          stroke: 'currentColor',
          'stroke-width': thickness,
          'stroke-dasharray': strokeDashArray,
          'stroke-dashoffset': offset,
          cx: this.viewBox,
          cy: this.viewBox,
          r: QCircularProgress_radius
        }
      });
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-circular-progress',
      class: "q-circular-progress--".concat(this.indeterminate === true ? 'in' : '', "determinate"),
      style: this.sizeStyle,
      on: this.$listeners,
      attrs: {
        'role': 'progressbar',
        'aria-valuemin': this.min,
        'aria-valuemax': this.max,
        'aria-valuenow': this.indeterminate !== true ? this.value : null
      }
    }, [h('svg', {
      staticClass: 'q-circular-progress__svg',
      style: this.svgStyle,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        viewBox: this.viewBoxAttr
      }
    }, [this.centerColor !== void 0 && this.centerColor !== 'transparent' ? h('circle', {
      staticClass: 'q-circular-progress__center',
      class: "text-".concat(this.centerColor),
      attrs: {
        fill: 'currentColor',
        r: QCircularProgress_radius - this.strokeWidth / 2,
        cx: this.viewBox,
        cy: this.viewBox
      }
    }) : null, this.trackColor !== void 0 && this.trackColor !== 'transparent' ? this.__getCircle(h, {
      cls: 'track',
      thickness: this.strokeWidth,
      offset: 0,
      color: this.trackColor
    }) : null, this.__getCircle(h, {
      cls: 'circle',
      thickness: this.strokeWidth,
      offset: this.strokeDashOffset,
      color: this.color
    })]), this.showValue === true ? h('div', {
      staticClass: 'q-circular-progress__text absolute-full row flex-center content-center',
      style: {
        fontSize: this.fontSize
      }
    }, this.$scopedSlots.default !== void 0 ? this.$scopedSlots.default() : [h('div', [this.value])]) : null]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/circular-progress/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/utils/patterns.js
// file referenced from docs
var hex = /^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/,
    hexa = /^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/,
    hexOrHexa = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/,
    patterns_rgb = /^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/,
    rgba = /^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/;
var testPattern = {
  date: v => /^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(v),
  time: v => /^([0-1]?\d|2[0-3]):[0-5]\d$/.test(v),
  fulltime: v => /^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(v),
  timeOrFulltime: v => /^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(v),
  hexColor: v => hex.test(v),
  hexaColor: v => hexa.test(v),
  hexOrHexaColor: v => hexOrHexa.test(v),
  rgbColor: v => patterns_rgb.test(v),
  rgbaColor: v => rgba.test(v),
  rgbOrRgbaColor: v => patterns_rgb.test(v) || rgba.test(v),
  hexOrRgbColor: v => hex.test(v) || patterns_rgb.test(v),
  hexaOrRgbaColor: v => hexa.test(v) || rgba.test(v),
  anyColor: v => hexOrHexa.test(v) || patterns_rgb.test(v) || rgba.test(v)
};
/* harmony default export */ var patterns = ({
  testPattern
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/throttle.js
/* harmony default export */ var throttle = (function (fn) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var wait = false,
      result;
  return function ()
  /* ...args */
  {
    if (wait === false) {
      wait = true;
      setTimeout(() => {
        wait = false;
      }, limit);
      result = fn.apply(this, arguments);
    }

    return result;
  };
});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/TouchPan.js







function getChanges(evt, ctx, isFinal) {
  var pos = event_position(evt),
      dir,
      distX = pos.left - ctx.event.x,
      distY = pos.top - ctx.event.y,
      absX = Math.abs(distX),
      absY = Math.abs(distY);
  var direction = ctx.direction;

  if (direction.horizontal === true && direction.vertical !== true) {
    dir = distX < 0 ? 'left' : 'right';
  } else if (direction.horizontal !== true && direction.vertical === true) {
    dir = distY < 0 ? 'up' : 'down';
  } else if (direction.up === true && distY < 0) {
    dir = 'up';

    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = 'left';
      } else if (direction.right === true && distX > 0) {
        dir = 'right';
      }
    }
  } else if (direction.down === true && distY > 0) {
    dir = 'down';

    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = 'left';
      } else if (direction.right === true && distX > 0) {
        dir = 'right';
      }
    }
  } else if (direction.left === true && distX < 0) {
    dir = 'left';

    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = 'up';
      } else if (direction.down === true && distY > 0) {
        dir = 'down';
      }
    }
  } else if (direction.right === true && distX > 0) {
    dir = 'right';

    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = 'up';
      } else if (direction.down === true && distY > 0) {
        dir = 'down';
      }
    }
  }

  var synthetic = false;

  if (dir === void 0 && isFinal !== true) {
    if (ctx.event.isFirst === true || ctx.event.lastDir === void 0) {
      return {};
    }

    dir = ctx.event.lastDir;
    synthetic = true;

    if (dir === 'left' || dir === 'right') {
      pos.left -= distX;
      absX = 0;
      distX = 0;
    } else {
      pos.top -= distY;
      absY = 0;
      distY = 0;
    }
  }

  return {
    synthetic,
    payload: {
      evt,
      touch: ctx.event.mouse !== true,
      mouse: ctx.event.mouse === true,
      position: pos,
      direction: dir,
      isFirst: ctx.event.isFirst,
      isFinal: isFinal === true,
      duration: Date.now() - ctx.event.time,
      distance: {
        x: absX,
        y: absY
      },
      offset: {
        x: distX,
        y: distY
      },
      delta: {
        x: pos.left - ctx.event.lastX,
        y: pos.top - ctx.event.lastY
      }
    }
  };
}

var uid = 0;
/* harmony default export */ var TouchPan = ({
  name: 'touch-pan',

  bind(el, _ref) {
    var value = _ref.value,
        modifiers = _ref.modifiers;

    // early return, we don't need to do anything
    if (modifiers.mouse !== true && client.has.touch !== true) {
      return;
    }

    function handleEvent(evt, mouseEvent) {
      if (modifiers.mouse === true && mouseEvent === true) {
        stopAndPrevent(evt);
      } else {
        modifiers.stop === true && event_stop(evt);
        modifiers.prevent === true && prevent(evt);
      }
    }

    var ctx = {
      uid: 'qvtp_' + uid++,
      handler: value,
      modifiers,
      direction: getModifierDirections(modifiers),

      noop() {},

      mouseStart(evt) {
        if (shouldStart(evt, ctx) && leftClick(evt)) {
          addEvt(ctx, 'temp', [[document, 'mousemove', 'move', 'notPassiveCapture'], [document, 'mouseup', 'end', 'passiveCapture']]);
          ctx.start(evt, true);
        }
      },

      touchStart(evt) {
        if (shouldStart(evt, ctx)) {
          var target = getTouchTarget(evt.target);
          addEvt(ctx, 'temp', [[target, 'touchmove', 'move', 'notPassiveCapture'], [target, 'touchcancel', 'end', 'passiveCapture'], [target, 'touchend', 'end', 'passiveCapture']]);
          ctx.start(evt);
        }
      },

      start(evt, mouseEvent) {
        client.is.firefox === true && preventDraggable(el, true);
        ctx.lastEvt = evt;
        var pos = event_position(evt);
        /*
         * Stop propagation so possible upper v-touch-pan don't catch this as well;
         * If we're not the target (based on modifiers), we'll re-emit the event later
         */

        if (mouseEvent === true || modifiers.stop === true) {
          var clone = evt.type.indexOf('mouse') > -1 ? new MouseEvent(evt.type, evt) : new TouchEvent(evt.type, evt);
          evt.defaultPrevented === true && prevent(clone);
          evt.cancelBubble === true && event_stop(clone);
          clone.qClonedBy = evt.qClonedBy === void 0 ? [ctx.uid] : evt.qClonedBy.concat(ctx.uid);
          clone.qKeyEvent = evt.qKeyEvent;
          clone.qClickOutside = evt.qClickOutside;
          ctx.initialEvent = {
            target: evt.target,
            event: clone
          };
          event_stop(evt);
        }

        ctx.event = {
          x: pos.left,
          y: pos.top,
          time: Date.now(),
          mouse: mouseEvent === true,
          detected: false,
          isFirst: true,
          isFinal: false,
          lastX: pos.left,
          lastY: pos.top
        };
      },

      move(evt) {
        if (ctx.event === void 0) {
          return;
        }

        ctx.lastEvt = evt;

        if (ctx.event.detected === true) {
          ctx.event.isFirst !== true && handleEvent(evt, ctx.event.mouse);

          var _getChanges = getChanges(evt, ctx, false),
              payload = _getChanges.payload,
              synthetic = _getChanges.synthetic;

          if (payload !== void 0) {
            if (ctx.handler(payload) === false) {
              ctx.end(evt);
            } else {
              if (ctx.event.isFirst === true) {
                var hasMouse = ctx.event.mouse === true;
                handleEvent(evt, ctx.event.mouse);
                document.documentElement.style.cursor = 'grabbing';
                hasMouse === true && document.body.classList.add('no-pointer-events');
                document.body.classList.add('non-selectable');
                clearSelection();

                ctx.styleCleanup = withDelay => {
                  ctx.styleCleanup = void 0;
                  document.documentElement.style.cursor = '';
                  document.body.classList.remove('non-selectable');

                  if (hasMouse === true) {
                    var remove = () => {
                      document.body.classList.remove('no-pointer-events');
                    };

                    if (withDelay === true) {
                      setTimeout(remove, 50);
                    } else {
                      remove();
                    }
                  }
                };
              }

              ctx.event.lastX = payload.position.left;
              ctx.event.lastY = payload.position.top;
              ctx.event.lastDir = synthetic === true ? void 0 : payload.direction;
              ctx.event.isFirst = false;
            }
          }

          return;
        }

        if (ctx.direction.all === true) {
          ctx.event.detected = true;
          ctx.move(evt);
          return;
        }

        var pos = event_position(evt),
            distX = pos.left - ctx.event.x,
            distY = pos.top - ctx.event.y,
            absX = Math.abs(distX),
            absY = Math.abs(distY);

        if (absX === absY) {
          return;
        }

        if (ctx.direction.horizontal === true && absX > absY || ctx.direction.vertical === true && absX < absY || ctx.direction.up === true && absX < absY && distY < 0 || ctx.direction.down === true && absX < absY && distY > 0 || ctx.direction.left === true && absX > absY && distX < 0 || ctx.direction.right === true && absX > absY && distX > 0) {
          ctx.event.detected = true;
          ctx.move(evt);
        } else if (ctx.event.mouse !== true || modifiers.mouseAllDir !== true) {
          ctx.end(evt, true);
        }
      },

      end(evt, abort) {
        if (ctx.event === void 0) {
          return;
        }

        cleanEvt(ctx, 'temp');
        client.is.firefox === true && preventDraggable(el, false);
        ctx.styleCleanup !== void 0 && ctx.styleCleanup(true);

        if (abort !== true && ctx.event.detected === true && ctx.event.isFirst !== true) {
          ctx.handler(getChanges(evt === void 0 ? ctx.lastEvt : evt, ctx, true).payload);
        }

        if (abort === true && ctx.event.detected !== true && ctx.initialEvent !== void 0) {
          ctx.initialEvent.target.dispatchEvent(ctx.initialEvent.event);
        }

        ctx.event = void 0;
        ctx.initialEvent = void 0;
        ctx.lastEvt = void 0;
      }

    };

    if (el.__qtouchpan) {
      el.__qtouchpan_old = el.__qtouchpan;
    }

    el.__qtouchpan = ctx;
    modifiers.mouse === true && addEvt(ctx, 'main', [[el, 'mousedown', 'mouseStart', "passive".concat(modifiers.mouseCapture === true ? 'Capture' : '')]]);
    client.has.touch === true && addEvt(ctx, 'main', [[el, 'touchstart', 'touchStart', "passive".concat(modifiers.capture === true ? 'Capture' : '')], [el, 'touchmove', 'noop', 'notPassiveCapture']]);
  },

  update(el, binding) {
    var ctx = el.__qtouchpan;
    ctx !== void 0 && updateModifiers(ctx, binding);
  },

  unbind(el) {
    var ctx = el.__qtouchpan_old || el.__qtouchpan;

    if (ctx !== void 0) {
      cleanEvt(ctx, 'main');
      cleanEvt(ctx, 'temp');
      client.is.firefox === true && preventDraggable(el, false);
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el[el.__qtouchpan_old ? '__qtouchpan_old' : '__qtouchpan'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/slider/slider-utils.js








 // PGDOWN, LEFT, DOWN, PGUP, RIGHT, UP

var keyCodes = [34, 37, 40, 33, 39, 38];
function getRatio(evt, dragging, reverse) {
  var pos = event_position(evt),
      val = between((pos.left - dragging.left) / dragging.width, 0, 1);
  return reverse === true ? 1.0 - val : val;
}
function getModel(ratio, min, max, step, decimals) {
  var model = min + ratio * (max - min);

  if (step > 0) {
    var modulo = (model - min) % step;
    model += (Math.abs(modulo) >= step / 2 ? (modulo < 0 ? -1 : 1) * step : 0) - modulo;
  }

  if (decimals > 0) {
    model = parseFloat(model.toFixed(decimals));
  }

  return between(model, min, max);
}

var SliderMixin = {
  mixins: [mixins_dark],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    step: {
      type: Number,
      default: 1,
      validator: v => v >= 0
    },
    color: String,
    labelColor: String,
    labelTextColor: String,
    dense: Boolean,
    label: Boolean,
    labelAlways: Boolean,
    markers: Boolean,
    snap: Boolean,
    reverse: Boolean,
    disable: Boolean,
    readonly: Boolean,
    tabindex: [String, Number],
    thumbPath: {
      type: String,
      default: 'M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0'
    }
  },

  data() {
    return {
      active: false,
      preventFocus: false,
      focus: false
    };
  },

  computed: {
    classes() {
      return "q-slider q-slider--".concat(this.active === true ? '' : 'in', "active") + (this.isReversed === true ? ' q-slider--reversed' : '') + (this.color !== void 0 ? " text-".concat(this.color) : '') + (this.disable === true ? ' disabled' : '') + (this.editable === true ? ' q-slider--editable' : '') + (this.focus === 'both' ? ' q-slider--focus' : '') + (this.label || this.labelAlways === true ? ' q-slider--label' : '') + (this.labelAlways === true ? ' q-slider--label-always' : '') + (this.isDark === true ? ' q-slider--dark' : '') + (this.dense === true ? ' q-slider--dense' : '');
    },

    editable() {
      return !this.disable && !this.readonly;
    },

    decimals() {
      return (String(this.step).trim('0').split('.')[1] || '').length;
    },

    computedStep() {
      return this.step === 0 ? 1 : this.step;
    },

    markerStyle() {
      return {
        backgroundSize: 100 * this.computedStep / (this.max - this.min) + '% 2px'
      };
    },

    computedTabindex() {
      return this.editable === true ? this.tabindex || 0 : -1;
    },

    isReversed() {
      return this.reverse !== (this.$q.lang.rtl === true);
    },

    horizProp() {
      return this.isReversed === true ? 'right' : 'left';
    }

  },
  methods: {
    __getThumbSvg(h) {
      return h('svg', {
        staticClass: 'q-slider__thumb absolute',
        attrs: {
          focusable: 'false'
          /* needed for IE11 */
          ,
          viewBox: '0 0 20 20',
          width: '20',
          height: '20'
        }
      }, [h('path', {
        attrs: {
          d: this.thumbPath
        }
      })]);
    },

    __getPinStyle(percent, ratio) {
      var offset = "".concat(Math.ceil(20 * Math.abs(0.5 - ratio)), "px");
      return {
        pin: {
          transformOrigin: "".concat(this.$q.lang.rtl === true ? offset : this.$q.platform.is.ie === true ? '100%' : "calc(100% - ".concat(offset, ")"), " 50%")
        },
        pinTextContainer: {
          [this.$q.lang.rtl === true ? 'left' : 'right']: "".concat(percent * 100, "%"),
          transform: "translateX(".concat(Math.ceil((this.$q.lang.rtl === true ? -1 : 1) * 20 * percent), "px)")
        }
      };
    },

    __pan(event) {
      if (event.isFinal) {
        if (this.dragging) {
          this.__updatePosition(event.evt); // only if touch, because we also have mousedown/up:


          event.touch === true && this.__updateValue(true);
          this.dragging = false;
        }

        this.active = false;
      } else if (event.isFirst) {
        this.dragging = this.__getDragging(event.evt);

        this.__updatePosition(event.evt);

        this.__updateValue();

        this.active = true;
      } else {
        this.__updatePosition(event.evt);

        this.__updateValue();
      }
    },

    __blur() {
      this.focus = false;
    },

    __activate(evt) {
      this.__updatePosition(evt, this.__getDragging(evt));

      this.__updateValue();

      this.preventFocus = true;
      this.active = true;
      document.addEventListener('mouseup', this.__deactivate, true);
    },

    __deactivate() {
      this.preventFocus = false;
      this.active = false;

      this.__updateValue(true);

      this.__blur();

      document.removeEventListener('mouseup', this.__deactivate, true);
    },

    __mobileClick(evt) {
      this.__updatePosition(evt, this.__getDragging(evt));

      this.__updateValue(true);
    },

    __keyup(evt) {
      if (keyCodes.includes(evt.keyCode)) {
        this.__updateValue(true);
      }
    }

  },

  beforeDestroy() {
    document.removeEventListener('mouseup', this.__deactivate, true);
  }

};
// CONCATENATED MODULE: ./node_modules/quasar/src/components/slider/QSlider.js










/* harmony default export */ var QSlider = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSlider',
  mixins: [SliderMixin],
  props: {
    value: {
      required: true,
      default: null,
      validator: v => typeof v === 'number' || v === null
    },
    labelValue: [String, Number]
  },

  data() {
    return {
      model: this.value === null ? this.min : this.value,
      curRatio: 0
    };
  },

  watch: {
    value(v) {
      this.model = v === null ? 0 : between(v, this.min, this.max);
    },

    min(v) {
      this.model = between(this.model, v, this.max);
    },

    max(v) {
      this.model = between(this.model, this.min, v);
    }

  },
  computed: {
    ratio() {
      return this.active === true ? this.curRatio : this.modelRatio;
    },

    modelRatio() {
      return (this.model - this.min) / (this.max - this.min);
    },

    trackStyle() {
      return {
        [this.horizProp]: 0,
        width: 100 * this.ratio + '%'
      };
    },

    thumbStyle() {
      return {
        [this.horizProp]: 100 * this.ratio + '%'
      };
    },

    thumbClass() {
      if (this.preventFocus === false && this.focus === true) {
        return 'q-slider--focus';
      }
    },

    pinClass() {
      if (this.labelColor !== void 0) {
        return "text-".concat(this.labelColor);
      }
    },

    pinTextClass() {
      return 'q-slider__pin-value-marker-text' + (this.labelTextColor !== void 0 ? " text-".concat(this.labelTextColor) : '');
    },

    events() {
      if (this.editable === true) {
        return this.$q.platform.is.mobile === true ? {
          click: this.__mobileClick
        } : {
          mousedown: this.__activate,
          focus: this.__focus,
          blur: this.__blur,
          keydown: this.__keydown,
          keyup: this.__keyup
        };
      }
    },

    computedLabel() {
      return this.labelValue !== void 0 ? this.labelValue : this.model;
    },

    pinStyle() {
      var percent = this.reverse === true ? -this.ratio : this.ratio - 1;
      return this.__getPinStyle(percent, this.ratio);
    }

  },
  methods: {
    __updateValue(change) {
      if (this.model !== this.value) {
        this.$emit('input', this.model);
      }

      change === true && this.$emit('change', this.model);
    },

    __getDragging() {
      return this.$el.getBoundingClientRect();
    },

    __updatePosition(event) {
      var dragging = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dragging;
      var ratio = getRatio(event, dragging, this.isReversed);
      this.model = getModel(ratio, this.min, this.max, this.step, this.decimals);
      this.curRatio = this.snap !== true || this.step === 0 ? ratio : (this.model - this.min) / (this.max - this.min);
    },

    __focus() {
      this.focus = true;
    },

    __keydown(evt) {
      if (!keyCodes.includes(evt.keyCode)) {
        return;
      }

      stopAndPrevent(evt);
      var step = ([34, 33].includes(evt.keyCode) ? 10 : 1) * this.computedStep,
          offset = [34, 37, 40].includes(evt.keyCode) ? -step : step;
      this.model = between(parseFloat((this.model + offset).toFixed(this.decimals)), this.min, this.max);

      this.__updateValue();
    }

  },

  render(h) {
    var child = [this.__getThumbSvg(h), h('div', {
      staticClass: 'q-slider__focus-ring'
    })];

    if (this.label === true || this.labelAlways === true) {
      child.push(h('div', {
        staticClass: 'q-slider__pin absolute',
        style: this.pinStyle.pin,
        class: this.pinClass
      }, [h('div', {
        staticClass: 'q-slider__pin-text-container',
        style: this.pinStyle.pinTextContainer
      }, [h('span', {
        staticClass: 'q-slider__pin-text',
        class: this.pinTextClass
      }, [this.computedLabel])])]), h('div', {
        staticClass: 'q-slider__arrow',
        class: this.pinClass
      }));
    }

    return h('div', {
      staticClass: this.value === null ? ' q-slider--no-value' : '',
      attrs: {
        role: 'slider',
        'aria-valuemin': this.min,
        'aria-valuemax': this.max,
        'aria-valuenow': this.value,
        'data-step': this.step,
        'aria-disabled': this.disable,
        tabindex: this.computedTabindex
      },
      class: this.classes,
      on: this.events,
      directives: this.editable === true ? cache(this, 'dir', [{
        name: 'touch-pan',
        value: this.__pan,
        modifiers: {
          horizontal: true,
          prevent: true,
          stop: true,
          mouse: true,
          mouseAllDir: true
        }
      }]) : null
    }, [h('div', {
      staticClass: 'q-slider__track-container absolute overflow-hidden'
    }, [h('div', {
      staticClass: 'q-slider__track absolute',
      style: this.trackStyle
    }), this.markers === true ? h('div', {
      staticClass: 'q-slider__track-markers absolute-full fit',
      style: this.markerStyle
    }) : null]), h('div', {
      staticClass: 'q-slider__thumb-container absolute non-selectable',
      class: this.thumbClass,
      style: this.thumbStyle
    }, child)]);
  }

}));
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js
var es_array_find = __webpack_require__("7db0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js
var es_array_sort = __webpack_require__("4e82");

// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/can-render.js
// using it to manage SSR rendering with best performance

/* harmony default export */ var can_render = ({
  data() {
    return {
      canRender: !onSSR
    };
  },

  mounted() {
    this.canRender === false && (this.canRender = true);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/resize-observer/QResizeObserver.js






/* harmony default export */ var QResizeObserver = (vue_runtime_esm["a" /* default */].extend({
  name: 'QResizeObserver',
  mixins: [can_render],
  props: {
    debounce: {
      type: [String, Number],
      default: 100
    }
  },

  data() {
    return this.hasObserver === true ? {} : {
      url: this.$q.platform.is.ie === true ? null : 'about:blank'
    };
  },

  methods: {
    trigger(now) {
      if (now === true || this.debounce === 0 || this.debounce === '0') {
        this.__onResize();
      } else if (!this.timer) {
        this.timer = setTimeout(this.__onResize, this.debounce);
      }
    },

    __onResize() {
      this.timer = null;

      if (!this.$el || !this.$el.parentNode) {
        return;
      }

      var parent = this.$el.parentNode,
          size = {
        width: parent.offsetWidth,
        height: parent.offsetHeight
      };

      if (size.width === this.size.width && size.height === this.size.height) {
        return;
      }

      this.size = size;
      this.$emit('resize', this.size);
    },

    __cleanup() {
      if (this.curDocView !== void 0) {
        // iOS is fuzzy, need to check it first
        if (this.curDocView.removeEventListener !== void 0) {
          this.curDocView.removeEventListener('resize', this.trigger, listenOpts.passive);
        }

        this.curDocView = void 0;
      }
    },

    __onObjLoad() {
      this.__cleanup();

      if (this.$el.contentDocument) {
        this.curDocView = this.$el.contentDocument.defaultView;
        this.curDocView.addEventListener('resize', this.trigger, listenOpts.passive);
      }

      this.__onResize();
    }

  },

  render(h) {
    if (this.canRender === false || this.hasObserver === true) {
      return;
    }

    return h('object', {
      style: this.style,
      attrs: {
        tabindex: -1,
        // fix for Firefox
        type: 'text/html',
        data: this.url,
        'aria-hidden': true
      },
      on: cache(this, 'load', {
        load: this.__onObjLoad
      })
    });
  },

  beforeCreate() {
    this.size = {
      width: -1,
      height: -1
    };

    if (isSSR === true) {
      return;
    }

    this.hasObserver = typeof ResizeObserver !== 'undefined';

    if (this.hasObserver !== true) {
      this.style = "".concat(this.$q.platform.is.ie ? 'visibility:hidden;' : '', "display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;");
    }
  },

  mounted() {
    if (this.hasObserver === true) {
      this.observer = new ResizeObserver(this.trigger);
      this.observer.observe(this.$el.parentNode);

      this.__onResize();

      return;
    }

    if (this.$q.platform.is.ie === true) {
      this.url = 'about:blank';

      this.__onResize();
    } else {
      this.__onObjLoad();
    }
  },

  beforeDestroy() {
    clearTimeout(this.timer);

    if (this.hasObserver === true) {
      this.$el.parentNode && this.observer.unobserve(this.$el.parentNode);
      return;
    }

    this.__cleanup();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/QTabs.js













function QTabs_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QTabs_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QTabs_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QTabs_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









function getIndicatorClass(color, top, vertical) {
  var pos = vertical === true ? ['left', 'right'] : ['top', 'bottom'];
  return "absolute-".concat(top === true ? pos[0] : pos[1]).concat(color ? " text-".concat(color) : '');
}

function bufferPrioritySort(t1, t2) {
  if (t1.priorityMatched === t2.priorityMatched) {
    return t2.priorityHref - t1.priorityHref;
  }

  return t2.priorityMatched - t1.priorityMatched;
}

function bufferCleanSelected(t) {
  t.selected = false;
  return t;
}

var bufferFilters = [function (t) {
  return t.selected === true && t.exact === true && t.redirected !== true;
}, function (t) {
  return t.selected === true && t.exact === true;
}, function (t) {
  return t.selected === true && t.redirected !== true;
}, function (t) {
  return t.selected === true;
}, function (t) {
  return t.exact === true && t.redirected !== true;
}, function (t) {
  return t.redirected !== true;
}, function (t) {
  return t.exact === true;
}, function (t) {
  return true;
}],
    bufferFiltersLen = bufferFilters.length;
/* harmony default export */ var QTabs = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTabs',
  mixins: [timeout],

  provide() {
    return {
      tabs: this.tabs,
      __recalculateScroll: this.__recalculateScroll,
      __activateTab: this.__activateTab,
      __activateRoute: this.__activateRoute
    };
  },

  props: {
    value: [Number, String],
    align: {
      type: String,
      default: 'center',
      validator: v => ['left', 'center', 'right', 'justify'].includes(v)
    },
    breakpoint: {
      type: [String, Number],
      default: 600
    },
    vertical: Boolean,
    shrink: Boolean,
    stretch: Boolean,
    activeColor: String,
    activeBgColor: String,
    indicatorColor: String,
    leftIcon: String,
    rightIcon: String,
    switchIndicator: Boolean,
    narrowIndicator: Boolean,
    inlineLabel: Boolean,
    noCaps: Boolean,
    dense: Boolean
  },

  data() {
    return {
      tabs: {
        current: this.value,
        activeColor: this.activeColor,
        activeBgColor: this.activeBgColor,
        indicatorClass: getIndicatorClass(this.indicatorColor, this.switchIndicator, this.vertical),
        narrowIndicator: this.narrowIndicator,
        inlineLabel: this.inlineLabel,
        noCaps: this.noCaps
      },
      scrollable: false,
      leftArrow: true,
      rightArrow: false,
      justify: false
    };
  },

  watch: {
    value(name) {
      this.__activateTab(name, true, true);
    },

    activeColor(v) {
      this.tabs.activeColor = v;
    },

    activeBgColor(v) {
      this.tabs.activeBgColor = v;
    },

    vertical(v) {
      this.tabs.indicatorClass = getIndicatorClass(this.indicatorColor, this.switchIndicator, v);
    },

    indicatorColor(v) {
      this.tabs.indicatorClass = getIndicatorClass(v, this.switchIndicator, this.vertical);
    },

    switchIndicator(v) {
      this.tabs.indicatorClass = getIndicatorClass(this.indicatorColor, v, this.vertical);
    },

    narrowIndicator(v) {
      this.tabs.narrowIndicator = v;
    },

    inlineLabel(v) {
      this.tabs.inlineLabel = v;
    },

    noCaps(v) {
      this.tabs.noCaps = v;
    }

  },
  computed: {
    alignClass() {
      var align = this.scrollable === true ? 'left' : this.justify === true ? 'justify' : this.align;
      return "q-tabs__content--align-".concat(align);
    },

    classes() {
      return "q-tabs--".concat(this.scrollable === true ? '' : 'not-', "scrollable") + " q-tabs--".concat(this.vertical === true ? 'vertical' : 'horizontal') + (this.dense === true ? ' q-tabs--dense' : '') + (this.shrink === true ? ' col-shrink' : '') + (this.stretch === true ? ' self-stretch' : '');
    },

    domProps() {
      return this.vertical === true ? {
        container: 'height',
        content: 'scrollHeight',
        posLeft: 'top',
        posRight: 'bottom'
      } : {
        container: 'width',
        content: 'scrollWidth',
        posLeft: 'left',
        posRight: 'right'
      };
    }

  },
  methods: {
    __activateTab(name, setCurrent, skipEmit) {
      if (this.tabs.current !== name) {
        skipEmit !== true && this.$emit('input', name);

        if (setCurrent === true || this.$listeners.input === void 0) {
          this.__animate(this.tabs.current, name);

          this.tabs.current = name;
        }
      }
    },

    __activateRoute(params) {
      if (this.bufferRoute !== this.$route && this.buffer.length > 0) {
        clearTimeout(this.bufferTimer);
        this.bufferTimer = void 0;
        this.buffer.length = 0;
      }

      this.bufferRoute = this.$route;

      if (params !== void 0) {
        if (params.remove === true) {
          this.buffer = this.buffer.filter(t => t.name !== params.name);
        } else {
          this.buffer.push(params);
        }
      }

      if (this.bufferTimer === void 0) {
        this.bufferTimer = setTimeout(() => {
          var tabs = [];

          for (var i = 0; i < bufferFiltersLen && tabs.length === 0; i++) {
            tabs = this.buffer.filter(bufferFilters[i]);
          }

          tabs.sort(bufferPrioritySort);

          this.__activateTab(tabs.length === 0 ? null : tabs[0].name, true);

          this.buffer = this.buffer.map(bufferCleanSelected);
          this.bufferTimer = void 0;
        }, 1);
      }
    },

    __recalculateScroll() {
      this.__nextTick(() => {
        this._isDestroyed !== true && this.__updateContainer({
          width: this.$el.offsetWidth,
          height: this.$el.offsetHeight
        });
      });

      this.__prepareTick();
    },

    __updateContainer(domSize) {
      var size = domSize[this.domProps.container],
          scrollSize = this.$refs.content[this.domProps.content],
          scroll = size > 0 && scrollSize > size; // when there is no tab, in Chrome, size === 0 and scrollSize === 1

      if (this.scrollable !== scroll) {
        this.scrollable = scroll;
      } // Arrows need to be updated even if the scroll status was already true


      scroll === true && this.$nextTick(() => this.__updateArrows());
      var justify = size < parseInt(this.breakpoint, 10);

      if (this.justify !== justify) {
        this.justify = justify;
      }
    },

    __animate(oldName, newName) {
      var oldTab = oldName !== void 0 && oldName !== null && oldName !== '' ? this.$children.find(tab => tab.name === oldName) : null,
          newTab = newName !== void 0 && newName !== null && newName !== '' ? this.$children.find(tab => tab.name === newName) : null;

      if (oldTab && newTab) {
        var oldEl = oldTab.$el.getElementsByClassName('q-tab__indicator')[0],
            newEl = newTab.$el.getElementsByClassName('q-tab__indicator')[0];
        clearTimeout(this.animateTimer);
        oldEl.style.transition = 'none';
        oldEl.style.transform = 'none';
        newEl.style.transition = 'none';
        newEl.style.transform = 'none';
        var oldPos = oldEl.getBoundingClientRect(),
            newPos = newEl.getBoundingClientRect();
        newEl.style.transform = this.vertical === true ? "translate3d(0,".concat(oldPos.top - newPos.top, "px,0) scale3d(1,").concat(newPos.height ? oldPos.height / newPos.height : 1, ",1)") : "translate3d(".concat(oldPos.left - newPos.left, "px,0,0) scale3d(").concat(newPos.width ? oldPos.width / newPos.width : 1, ",1,1)"); // allow scope updates to kick in

        this.$nextTick(() => {
          this.animateTimer = setTimeout(() => {
            newEl.style.transition = 'transform .25s cubic-bezier(.4, 0, .2, 1)';
            newEl.style.transform = 'none';
          }, 30);
        });
      }

      if (newTab && this.scrollable === true) {
        var _this$$refs$content$g = this.$refs.content.getBoundingClientRect(),
            left = _this$$refs$content$g.left,
            width = _this$$refs$content$g.width,
            top = _this$$refs$content$g.top,
            height = _this$$refs$content$g.height,
            _newPos = newTab.$el.getBoundingClientRect();

        var offset = this.vertical === true ? _newPos.top - top : _newPos.left - left;

        if (offset < 0) {
          this.$refs.content[this.vertical === true ? 'scrollTop' : 'scrollLeft'] += offset;

          this.__updateArrows();

          return;
        }

        offset += this.vertical === true ? _newPos.height - height : _newPos.width - width;

        if (offset > 0) {
          this.$refs.content[this.vertical === true ? 'scrollTop' : 'scrollLeft'] += offset;

          this.__updateArrows();
        }
      }
    },

    __updateArrows() {
      var content = this.$refs.content,
          rect = content.getBoundingClientRect(),
          pos = this.vertical === true ? content.scrollTop : content.scrollLeft;
      this.leftArrow = pos > 0;
      this.rightArrow = this.vertical === true ? Math.ceil(pos + rect.height) < content.scrollHeight : Math.ceil(pos + rect.width) < content.scrollWidth;
    },

    __animScrollTo(value) {
      this.__stopAnimScroll();

      this.__scrollTowards(value);

      this.scrollTimer = setInterval(() => {
        if (this.__scrollTowards(value)) {
          this.__stopAnimScroll();
        }
      }, 5);
    },

    __scrollToStart() {
      this.__animScrollTo(0);
    },

    __scrollToEnd() {
      this.__animScrollTo(9999);
    },

    __stopAnimScroll() {
      clearInterval(this.scrollTimer);
    },

    __scrollTowards(value) {
      var content = this.$refs.content,
          pos = this.vertical === true ? content.scrollTop : content.scrollLeft,
          direction = value < pos ? -1 : 1,
          done = false;
      pos += direction * 5;

      if (pos < 0) {
        done = true;
        pos = 0;
      } else if (direction === -1 && pos <= value || direction === 1 && pos >= value) {
        done = true;
        pos = value;
      }

      content[this.vertical === true ? 'scrollTop' : 'scrollLeft'] = pos;

      this.__updateArrows();

      return done;
    }

  },

  created() {
    this.buffer = [];

    if (this.$q.platform.is.desktop !== true) {
      this.__updateArrows = () => {};
    }
  },

  beforeDestroy() {
    clearTimeout(this.bufferTimer);
    clearTimeout(this.animateTimer);
  },

  render(h) {
    var child = [h(QResizeObserver, {
      on: cache(this, 'resize', {
        resize: this.__updateContainer
      })
    }), h('div', {
      ref: 'content',
      staticClass: 'q-tabs__content row no-wrap items-center self-stretch hide-scrollbar',
      class: this.alignClass
    }, slot_slot(this, 'default'))];
    this.$q.platform.is.desktop === true && child.push(h(QIcon, {
      staticClass: 'q-tabs__arrow q-tabs__arrow--left absolute q-tab__icon',
      class: this.leftArrow === true ? '' : 'q-tabs__arrow--faded',
      props: {
        name: this.leftIcon || (this.vertical === true ? this.$q.iconSet.tabs.up : this.$q.iconSet.tabs.left)
      },
      nativeOn: {
        mousedown: this.__scrollToStart,
        touchstart: this.__scrollToStart,
        mouseup: this.__stopAnimScroll,
        mouseleave: this.__stopAnimScroll,
        touchend: this.__stopAnimScroll
      }
    }), h(QIcon, {
      staticClass: 'q-tabs__arrow q-tabs__arrow--right absolute q-tab__icon',
      class: this.rightArrow === true ? '' : 'q-tabs__arrow--faded',
      props: {
        name: this.rightIcon || (this.vertical === true ? this.$q.iconSet.tabs.down : this.$q.iconSet.tabs.right)
      },
      nativeOn: {
        mousedown: this.__scrollToEnd,
        touchstart: this.__scrollToEnd,
        mouseup: this.__stopAnimScroll,
        mouseleave: this.__stopAnimScroll,
        touchend: this.__stopAnimScroll
      }
    }));
    return h('div', {
      staticClass: 'q-tabs row no-wrap items-center',
      class: this.classes,
      on: QTabs_objectSpread({
        input: event_stop
      }, this.$listeners),
      attrs: {
        role: 'tablist'
      }
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/QTab.js








function QTab_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QTab_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QTab_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QTab_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var QTab_uid = 0;
/* harmony default export */ var QTab = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTab',
  mixins: [ripple],
  inject: {
    tabs: {
      default() {
        console.error('QTab/QRouteTab components need to be child of QTabs');
      }

    },
    __activateTab: {},
    __recalculateScroll: {}
  },
  props: {
    icon: String,
    label: [Number, String],
    alert: [Boolean, String],
    name: {
      type: [Number, String],
      default: () => "t_".concat(QTab_uid++)
    },
    noCaps: Boolean,
    tabindex: [String, Number],
    disable: Boolean
  },
  computed: {
    isActive() {
      return this.tabs.current === this.name;
    },

    classes() {
      return {
        ["q-tab--".concat(this.isActive ? '' : 'in', "active")]: true,
        ["text-".concat(this.tabs.activeColor)]: this.isActive && this.tabs.activeColor,
        ["bg-".concat(this.tabs.activeBgColor)]: this.isActive && this.tabs.activeBgColor,
        'q-tab--full': this.icon && this.label && !this.tabs.inlineLabel,
        'q-tab--no-caps': this.noCaps === true || this.tabs.noCaps === true,
        'q-focusable q-hoverable cursor-pointer': !this.disable,
        disabled: this.disable
      };
    },

    computedTabIndex() {
      return this.disable === true || this.isActive === true ? -1 : this.tabindex || 0;
    }

  },
  methods: {
    __activate(e, keyboard) {
      keyboard !== true && this.$refs.blurTarget !== void 0 && this.$refs.blurTarget.focus();

      if (this.disable !== true) {
        this.$listeners.click !== void 0 && this.$emit('click', e);

        this.__activateTab(this.name);
      }
    },

    __onKeyup(e) {
      isKeyCode(e, 13) === true && this.__activate(e, true);
    },

    __getContent(h) {
      var narrow = this.tabs.narrowIndicator,
          content = [],
          indicator = h('div', {
        staticClass: 'q-tab__indicator',
        class: this.tabs.indicatorClass
      });
      this.icon !== void 0 && content.push(h(QIcon, {
        staticClass: 'q-tab__icon',
        props: {
          name: this.icon
        }
      }));
      this.label !== void 0 && content.push(h('div', {
        staticClass: 'q-tab__label'
      }, [this.label]));
      this.alert !== false && content.push(h('div', {
        staticClass: 'q-tab__alert',
        class: this.alert !== true ? "text-".concat(this.alert) : null
      }));
      narrow && content.push(indicator);
      var node = [h('div', {
        staticClass: 'q-focus-helper',
        attrs: {
          tabindex: -1
        },
        ref: 'blurTarget'
      }), h('div', {
        staticClass: 'q-tab__content self-stretch flex-center relative-position q-anchor--skip non-selectable',
        class: this.tabs.inlineLabel === true ? 'row no-wrap q-tab__content--inline' : 'column'
      }, mergeSlot(content, this, 'default'))];
      !narrow && node.push(indicator);
      return node;
    },

    __renderTab(h, tag, props) {
      var data = {
        staticClass: 'q-tab relative-position self-stretch flex flex-center text-center',
        class: this.classes,
        attrs: {
          tabindex: this.computedTabIndex,
          role: 'tab',
          'aria-selected': this.isActive
        },
        directives: this.ripple !== false && this.disable === true ? null : [{
          name: 'ripple',
          value: this.ripple
        }],
        [tag === 'div' ? 'on' : 'nativeOn']: QTab_objectSpread({
          input: event_stop
        }, this.$listeners, {
          click: this.__activate,
          keyup: this.__onKeyup
        })
      };

      if (props !== void 0) {
        data.props = props;
      }

      return h(tag, data, this.__getContent(h));
    }

  },

  mounted() {
    this.__recalculateScroll();
  },

  beforeDestroy() {
    this.__recalculateScroll();
  },

  render(h) {
    return this.__renderTab(h, 'div');
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tab-panels/QTabPanels.js



/* harmony default export */ var QTabPanels = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTabPanels',
  mixins: [mixins_dark, PanelParentMixin],
  methods: {
    __renderPanels(h) {
      return h('div', {
        staticClass: 'q-tab-panels q-panel-parent',
        class: this.isDark === true ? 'q-tab-panels--dark q-dark' : '',
        directives: this.panelDirectives,
        on: this.$listeners
      }, this.__getPanelContent(h));
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tab-panels/QTabPanel.js



/* harmony default export */ var QTabPanel = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTabPanel',
  mixins: [PanelChildMixin],

  render(h) {
    return h('div', {
      staticClass: 'q-tab-panel',
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/color/QColor.js























var palette = ['rgb(255,204,204)', 'rgb(255,230,204)', 'rgb(255,255,204)', 'rgb(204,255,204)', 'rgb(204,255,230)', 'rgb(204,255,255)', 'rgb(204,230,255)', 'rgb(204,204,255)', 'rgb(230,204,255)', 'rgb(255,204,255)', 'rgb(255,153,153)', 'rgb(255,204,153)', 'rgb(255,255,153)', 'rgb(153,255,153)', 'rgb(153,255,204)', 'rgb(153,255,255)', 'rgb(153,204,255)', 'rgb(153,153,255)', 'rgb(204,153,255)', 'rgb(255,153,255)', 'rgb(255,102,102)', 'rgb(255,179,102)', 'rgb(255,255,102)', 'rgb(102,255,102)', 'rgb(102,255,179)', 'rgb(102,255,255)', 'rgb(102,179,255)', 'rgb(102,102,255)', 'rgb(179,102,255)', 'rgb(255,102,255)', 'rgb(255,51,51)', 'rgb(255,153,51)', 'rgb(255,255,51)', 'rgb(51,255,51)', 'rgb(51,255,153)', 'rgb(51,255,255)', 'rgb(51,153,255)', 'rgb(51,51,255)', 'rgb(153,51,255)', 'rgb(255,51,255)', 'rgb(255,0,0)', 'rgb(255,128,0)', 'rgb(255,255,0)', 'rgb(0,255,0)', 'rgb(0,255,128)', 'rgb(0,255,255)', 'rgb(0,128,255)', 'rgb(0,0,255)', 'rgb(128,0,255)', 'rgb(255,0,255)', 'rgb(245,0,0)', 'rgb(245,123,0)', 'rgb(245,245,0)', 'rgb(0,245,0)', 'rgb(0,245,123)', 'rgb(0,245,245)', 'rgb(0,123,245)', 'rgb(0,0,245)', 'rgb(123,0,245)', 'rgb(245,0,245)', 'rgb(214,0,0)', 'rgb(214,108,0)', 'rgb(214,214,0)', 'rgb(0,214,0)', 'rgb(0,214,108)', 'rgb(0,214,214)', 'rgb(0,108,214)', 'rgb(0,0,214)', 'rgb(108,0,214)', 'rgb(214,0,214)', 'rgb(163,0,0)', 'rgb(163,82,0)', 'rgb(163,163,0)', 'rgb(0,163,0)', 'rgb(0,163,82)', 'rgb(0,163,163)', 'rgb(0,82,163)', 'rgb(0,0,163)', 'rgb(82,0,163)', 'rgb(163,0,163)', 'rgb(92,0,0)', 'rgb(92,46,0)', 'rgb(92,92,0)', 'rgb(0,92,0)', 'rgb(0,92,46)', 'rgb(0,92,92)', 'rgb(0,46,92)', 'rgb(0,0,92)', 'rgb(46,0,92)', 'rgb(92,0,92)', 'rgb(255,255,255)', 'rgb(205,205,205)', 'rgb(178,178,178)', 'rgb(153,153,153)', 'rgb(127,127,127)', 'rgb(102,102,102)', 'rgb(76,76,76)', 'rgb(51,51,51)', 'rgb(25,25,25)', 'rgb(0,0,0)'];
/* harmony default export */ var QColor = (vue_runtime_esm["a" /* default */].extend({
  name: 'QColor',
  mixins: [mixins_dark],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    value: String,
    defaultValue: String,
    defaultView: {
      type: String,
      default: 'spectrum',
      validator: v => ['spectrum', 'tune', 'palette'].includes(v)
    },
    formatModel: {
      type: String,
      default: 'auto',
      validator: v => ['auto', 'hex', 'rgb', 'hexa', 'rgba'].includes(v)
    },
    palette: Array,
    noHeader: Boolean,
    noFooter: Boolean,
    square: Boolean,
    flat: Boolean,
    bordered: Boolean,
    disable: Boolean,
    readonly: Boolean
  },

  data() {
    return {
      topView: this.formatModel === 'auto' ? this.value === void 0 || this.value === null || this.value === '' || this.value.startsWith('#') ? 'hex' : 'rgb' : this.formatModel.startsWith('hex') ? 'hex' : 'rgb',
      view: this.defaultView,
      model: this.__parseModel(this.value || this.defaultValue)
    };
  },

  watch: {
    value(v) {
      var model = this.__parseModel(v || this.defaultValue);

      if (model.hex !== this.model.hex) {
        this.model = model;
      }
    },

    defaultValue(v) {
      if (!this.value && v) {
        var model = this.__parseModel(v);

        if (model.hex !== this.model.hex) {
          this.model = model;
        }
      }
    }

  },
  computed: {
    editable() {
      return this.disable !== true && this.readonly !== true;
    },

    forceHex() {
      return this.formatModel === 'auto' ? null : this.formatModel.indexOf('hex') > -1;
    },

    forceAlpha() {
      return this.formatModel === 'auto' ? null : this.formatModel.indexOf('a') > -1;
    },

    isHex() {
      return this.value === void 0 || this.value === null || this.value === '' || this.value.startsWith('#');
    },

    isOutputHex() {
      return this.forceHex !== null ? this.forceHex : this.isHex;
    },

    hasAlpha() {
      if (this.forceAlpha !== null) {
        return this.forceAlpha;
      }

      return this.model.a !== void 0;
    },

    currentBgColor() {
      return {
        backgroundColor: this.model.rgb || '#000'
      };
    },

    headerClass() {
      var light = this.model.a !== void 0 && this.model.a < 65 ? true : luminosity(this.model) > 0.4;
      return "q-color-picker__header-content--".concat(light ? 'light' : 'dark');
    },

    spectrumStyle() {
      return {
        background: "hsl(".concat(this.model.h, ",100%,50%)")
      };
    },

    spectrumPointerStyle() {
      return {
        top: "".concat(100 - this.model.v, "%"),
        [this.$q.lang.rtl === true ? 'right' : 'left']: "".concat(this.model.s, "%")
      };
    },

    inputsArray() {
      var inp = ['r', 'g', 'b'];

      if (this.hasAlpha === true) {
        inp.push('a');
      }

      return inp;
    },

    computedPalette() {
      return this.palette !== void 0 && this.palette.length > 0 ? this.palette : palette;
    },

    classes() {
      return 'q-color-picker' + (this.bordered === true ? ' q-color-picker--bordered' : '') + (this.square === true ? ' q-color-picker--square no-border-radius' : '') + (this.flat === true ? ' q-color-picker--flat no-shadow' : '') + (this.disable === true ? ' disabled' : '') + (this.isDark === true ? ' q-color-picker--dark q-dark' : '');
    }

  },

  created() {
    this.__spectrumChange = throttle(this.__spectrumChange, 20);
  },

  render(h) {
    var child = [this.__getContent(h)];
    this.noHeader !== true && child.unshift(this.__getHeader(h));
    this.noFooter !== true && child.push(this.__getFooter(h));
    return h('div', {
      class: this.classes
    }, child);
  },

  methods: {
    __getHeader(h) {
      return h('div', {
        staticClass: 'q-color-picker__header relative-position overflow-hidden'
      }, [h('div', {
        staticClass: 'q-color-picker__header-bg absolute-full'
      }), h('div', {
        staticClass: 'q-color-picker__header-content absolute-full',
        class: this.headerClass,
        style: this.currentBgColor
      }, [h(QTabs, {
        props: {
          value: this.topView,
          dense: true,
          align: 'justify'
        },
        on: cache(this, 'topVTab', {
          input: val => {
            this.topView = val;
          }
        })
      }, [h(QTab, {
        props: {
          label: 'HEX' + (this.hasAlpha === true ? 'A' : ''),
          name: 'hex',
          ripple: false
        }
      }), h(QTab, {
        props: {
          label: 'RGB' + (this.hasAlpha === true ? 'A' : ''),
          name: 'rgb',
          ripple: false
        }
      })]), h('div', {
        staticClass: 'q-color-picker__header-banner row flex-center no-wrap'
      }, [h('input', {
        staticClass: 'fit',
        domProps: {
          value: this.model[this.topView]
        },
        attrs: this.editable !== true ? {
          readonly: true
        } : null,
        on: cache(this, 'topIn', {
          input: evt => {
            this.__updateErrorIcon(this.__onEditorChange(evt) === true);
          },
          blur: evt => {
            this.__onEditorChange(evt, true) === true && this.$forceUpdate();

            this.__updateErrorIcon(false);
          }
        })
      }), h(QIcon, {
        ref: 'errorIcon',
        staticClass: 'q-color-picker__error-icon absolute no-pointer-events',
        props: {
          name: this.$q.iconSet.type.negative
        }
      })])])]);
    },

    __getContent(h) {
      return h(QTabPanels, {
        props: {
          value: this.view,
          animated: true
        }
      }, [h(QTabPanel, {
        staticClass: 'q-color-picker__spectrum-tab overflow-hidden',
        props: {
          name: 'spectrum'
        }
      }, this.__getSpectrumTab(h)), h(QTabPanel, {
        staticClass: 'q-pa-md q-color-picker__tune-tab',
        props: {
          name: 'tune'
        }
      }, this.__getTuneTab(h)), h(QTabPanel, {
        staticClass: 'q-color-picker__palette-tab',
        props: {
          name: 'palette'
        }
      }, this.__getPaletteTab(h))]);
    },

    __getFooter(h) {
      return h('div', {
        staticClass: 'q-color-picker__footer relative-position overflow-hidden'
      }, [h(QTabs, {
        staticClass: 'absolute-full',
        props: {
          value: this.view,
          dense: true,
          align: 'justify'
        },
        on: cache(this, 'ftIn', {
          input: val => {
            this.view = val;
          }
        })
      }, [h(QTab, {
        props: {
          icon: this.$q.iconSet.colorPicker.spectrum,
          name: 'spectrum',
          ripple: false
        }
      }), h(QTab, {
        props: {
          icon: this.$q.iconSet.colorPicker.tune,
          name: 'tune',
          ripple: false
        }
      }), h(QTab, {
        props: {
          icon: this.$q.iconSet.colorPicker.palette,
          name: 'palette',
          ripple: false
        }
      })])]);
    },

    __getSpectrumTab(h) {
      var thumbPath = 'M5 5 h10 v10 h-10 v-10 z';
      return [h('div', {
        ref: 'spectrum',
        staticClass: 'q-color-picker__spectrum non-selectable relative-position cursor-pointer',
        style: this.spectrumStyle,
        class: {
          readonly: this.editable !== true
        },
        on: this.editable === true ? cache(this, 'spectrT', {
          click: this.__spectrumClick,
          mousedown: this.__activate
        }) : null,
        directives: this.editable === true ? cache(this, 'spectrDir', [{
          name: 'touch-pan',
          modifiers: {
            prevent: true,
            stop: true,
            mouse: true
          },
          value: this.__spectrumPan
        }]) : null
      }, [h('div', {
        style: {
          paddingBottom: '100%'
        }
      }), h('div', {
        staticClass: 'q-color-picker__spectrum-white absolute-full'
      }), h('div', {
        staticClass: 'q-color-picker__spectrum-black absolute-full'
      }), h('div', {
        staticClass: 'absolute',
        style: this.spectrumPointerStyle
      }, [this.model.hex !== void 0 ? h('div', {
        staticClass: 'q-color-picker__spectrum-circle'
      }) : null])]), h('div', {
        staticClass: 'q-color-picker__sliders'
      }, [h('div', {
        staticClass: 'q-color-picker__hue non-selectable'
      }, [h(QSlider, {
        props: {
          value: this.model.h,
          min: 0,
          max: 360,
          fillHandleAlways: true,
          readonly: this.editable !== true,
          thumbPath
        },
        on: cache(this, 'hueSlide', {
          input: this.__onHueChange,
          change: val => this.__onHueChange(val, true)
        })
      })]), this.hasAlpha === true ? h('div', {
        staticClass: 'q-color-picker__alpha non-selectable'
      }, [h(QSlider, {
        props: {
          value: this.model.a,
          min: 0,
          max: 100,
          fillHandleAlways: true,
          readonly: this.editable !== true,
          thumbPath
        },
        on: cache(this, 'alphaSlide', {
          input: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'a', 100),
          change: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'a', 100, true)
        })
      })]) : null])];
    },

    __getTuneTab(h) {
      return [h('div', {
        staticClass: 'row items-center no-wrap'
      }, [h('div', ['R']), h(QSlider, {
        props: {
          value: this.model.r,
          min: 0,
          max: 255,
          color: 'red',
          dark: this.isDark,
          readonly: this.editable !== true
        },
        on: cache(this, 'rSlide', {
          input: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'r', 255),
          change: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'r', 255, true)
        })
      }), h('input', {
        domProps: {
          value: this.model.r
        },
        attrs: {
          maxlength: 3,
          readonly: this.editable !== true
        },
        on: cache(this, 'rIn', {
          input: evt => this.__onNumericChange(evt, 'r', 255),
          blur: evt => this.__onNumericChange(evt, 'r', 255, true)
        })
      })]), h('div', {
        staticClass: 'row items-center no-wrap'
      }, [h('div', ['G']), h(QSlider, {
        props: {
          value: this.model.g,
          min: 0,
          max: 255,
          color: 'green',
          dark: this.isDark,
          readonly: this.editable !== true
        },
        on: cache(this, 'gSlide', {
          input: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'g', 255),
          change: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'g', 255, true)
        })
      }), h('input', {
        domProps: {
          value: this.model.g
        },
        attrs: {
          maxlength: 3,
          readonly: this.editable !== true
        },
        on: cache(this, 'gIn', {
          input: evt => this.__onNumericChange(evt, 'g', 255),
          blur: evt => this.__onNumericChange(evt, 'g', 255, true)
        })
      })]), h('div', {
        staticClass: 'row items-center no-wrap'
      }, [h('div', ['B']), h(QSlider, {
        props: {
          value: this.model.b,
          min: 0,
          max: 255,
          color: 'blue',
          readonly: this.editable !== true,
          dark: this.isDark
        },
        on: cache(this, 'bSlide', {
          input: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'b', 255),
          change: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'b', 255, true)
        })
      }), h('input', {
        domProps: {
          value: this.model.b
        },
        attrs: {
          maxlength: 3,
          readonly: this.editable !== true
        },
        on: cache(this, 'bIn', {
          input: evt => this.__onNumericChange(evt, 'b', 255),
          blur: evt => this.__onNumericChange(evt, 'b', 255, true)
        })
      })]), this.hasAlpha === true ? h('div', {
        staticClass: 'row items-center no-wrap'
      }, [h('div', ['A']), h(QSlider, {
        props: {
          value: this.model.a,
          color: 'grey',
          readonly: this.editable !== true,
          dark: this.isDark
        },
        on: cache(this, 'aSlide', {
          input: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'a', 100),
          change: value => this.__onNumericChange({
            target: {
              value
            }
          }, 'a', 100, true)
        })
      }), h('input', {
        domProps: {
          value: this.model.a
        },
        attrs: {
          maxlength: 3,
          readonly: this.editable !== true
        },
        on: cache(this, 'aIn', {
          input: evt => this.__onNumericChange(evt, 'a', 100),
          blur: evt => this.__onNumericChange(evt, 'a', 100, true)
        })
      })]) : null];
    },

    __getPaletteTab(h) {
      return [h('div', {
        staticClass: 'row items-center q-color-picker__palette-rows',
        class: this.editable === true ? 'q-color-picker__palette-rows--editable' : null
      }, this.computedPalette.map(color => h('div', {
        staticClass: 'q-color-picker__cube col-auto',
        style: {
          backgroundColor: color
        },
        on: this.editable === true ? cache(this, 'palette#' + color, {
          click: () => {
            this.__onPalettePick(color);
          }
        }) : null
      })))];
    },

    __onSpectrumChange(left, top, change) {
      var panel = this.$refs.spectrum;

      if (panel === void 0) {
        return;
      }

      var width = panel.clientWidth,
          height = panel.clientHeight,
          rect = panel.getBoundingClientRect();
      var x = Math.min(width, Math.max(0, left - rect.left));

      if (this.$q.lang.rtl === true) {
        x = width - x;
      }

      var y = Math.min(height, Math.max(0, top - rect.top)),
          s = Math.round(100 * x / width),
          v = Math.round(100 * Math.max(0, Math.min(1, -(y / height) + 1))),
          rgb = hsvToRgb({
        h: this.model.h,
        s,
        v,
        a: this.hasAlpha === true ? this.model.a : void 0
      });
      this.model.s = s;
      this.model.v = v;

      this.__update(rgb, change);
    },

    __onHueChange(h, change) {
      h = Math.round(h);
      var rgb = hsvToRgb({
        h,
        s: this.model.s,
        v: this.model.v,
        a: this.hasAlpha === true ? this.model.a : void 0
      });
      this.model.h = h;

      this.__update(rgb, change);
    },

    __onNumericChange(evt, formatModel, max, change) {
      if (!/^[0-9]+$/.test(evt.target.value)) {
        change && this.$forceUpdate();
        return;
      }

      var val = Math.floor(Number(evt.target.value));

      if (val < 0 || val > max) {
        change && this.$forceUpdate();
        return;
      }

      var rgb = {
        r: formatModel === 'r' ? val : this.model.r,
        g: formatModel === 'g' ? val : this.model.g,
        b: formatModel === 'b' ? val : this.model.b,
        a: this.hasAlpha === true ? formatModel === 'a' ? val : this.model.a : void 0
      };

      if (formatModel !== 'a') {
        var hsv = rgbToHsv(rgb);
        this.model.h = hsv.h;
        this.model.s = hsv.s;
        this.model.v = hsv.v;
      }

      this.__update(rgb, change);

      if (change !== true && evt.target.selectionEnd !== void 0) {
        var index = evt.target.selectionEnd;
        this.$nextTick(() => {
          evt.target.setSelectionRange(index, index);
        });
      }
    },

    __onEditorChange(evt, change) {
      var rgb;
      var inp = evt.target.value;

      if (this.topView === 'hex') {
        if (inp.length !== (this.hasAlpha === true ? 9 : 7) || !/^#[0-9A-Fa-f]+$/.test(inp)) {
          return true;
        }

        rgb = hexToRgb(inp);
      } else {
        var model;

        if (!inp.endsWith(')')) {
          return true;
        } else if (this.hasAlpha !== true && inp.startsWith('rgb(')) {
          model = inp.substring(4, inp.length - 1).split(',').map(n => parseInt(n, 10));

          if (model.length !== 3 || !/^rgb\([0-9]{1,3},[0-9]{1,3},[0-9]{1,3}\)$/.test(inp)) {
            return true;
          }
        } else if (this.hasAlpha === true && inp.startsWith('rgba(')) {
          model = inp.substring(5, inp.length - 1).split(',');

          if (model.length !== 4 || !/^rgba\([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/.test(inp)) {
            return true;
          }

          for (var i = 0; i < 3; i++) {
            var _v = parseInt(model[i], 10);

            if (_v < 0 || _v > 255) {
              return true;
            }

            model[i] = _v;
          }

          var v = parseFloat(model[3]);

          if (v < 0 || v > 1) {
            return true;
          }

          model[3] = v;
        } else {
          return true;
        }

        if (model[0] < 0 || model[0] > 255 || model[1] < 0 || model[1] > 255 || model[2] < 0 || model[2] > 255 || this.hasAlpha === true && (model[3] < 0 || model[3] > 1)) {
          return true;
        }

        rgb = {
          r: model[0],
          g: model[1],
          b: model[2],
          a: this.hasAlpha === true ? model[3] * 100 : void 0
        };
      }

      var hsv = rgbToHsv(rgb);
      this.model.h = hsv.h;
      this.model.s = hsv.s;
      this.model.v = hsv.v;

      this.__update(rgb, change);

      if (change !== true) {
        var index = evt.target.selectionEnd;
        this.$nextTick(() => {
          evt.target.setSelectionRange(index, index);
        });
      }
    },

    __onPalettePick(color) {
      var def = this.__parseModel(color);

      var rgb = {
        r: def.r,
        g: def.g,
        b: def.b,
        a: def.a
      };

      if (rgb.a === void 0) {
        rgb.a = this.model.a;
      }

      this.model.h = def.h;
      this.model.s = def.s;
      this.model.v = def.v;

      this.__update(rgb, true);
    },

    __update(rgb, change) {
      // update internally
      this.model.hex = rgbToHex(rgb);
      this.model.rgb = rgbToString(rgb);
      this.model.r = rgb.r;
      this.model.g = rgb.g;
      this.model.b = rgb.b;
      this.model.a = rgb.a;
      var value = this.model[this.isOutputHex === true ? 'hex' : 'rgb']; // emit new value

      this.$emit('input', value);
      change === true && this.$emit('change', value);
    },

    __updateErrorIcon(val) {
      // we MUST avoid vue triggering a render,
      // so manually changing this
      this.$refs.errorIcon.$el.style.opacity = val ? 1 : 0;
    },

    __parseModel(v) {
      var forceAlpha = this.forceAlpha !== void 0 ? this.forceAlpha : this.formatModel === 'auto' ? null : this.formatModel.indexOf('a') > -1;

      if (v === null || v === void 0 || v === '' || testPattern.anyColor(v) !== true) {
        return {
          h: 0,
          s: 0,
          v: 0,
          r: 0,
          g: 0,
          b: 0,
          a: forceAlpha === true ? 100 : void 0,
          hex: void 0,
          rgb: void 0
        };
      }

      var model = stringToRgb(v);

      if (forceAlpha === true && model.a === void 0) {
        model.a = 100;
      }

      model.hex = rgbToHex(model);
      model.rgb = rgbToString(model);
      return Object.assign(model, rgbToHsv(model));
    },

    __spectrumPan(evt) {
      if (evt.isFinal) {
        this.__onSpectrumChange(evt.position.left, evt.position.top, true);
      } else {
        this.__spectrumChange(evt);
      }
    },

    // throttled in created()
    __spectrumChange(evt) {
      this.__onSpectrumChange(evt.position.left, evt.position.top);
    },

    __spectrumClick(evt) {
      this.__onSpectrumChange(evt.pageX - window.pageXOffset, evt.pageY - window.pageYOffset, true);
    },

    __activate(evt) {
      this.__onSpectrumChange(evt.pageX - window.pageXOffset, evt.pageY - window.pageYOffset);
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/color/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.fill.js
var es_array_fill = __webpack_require__("cb29");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/date-persian.js


// taken from https://github.com/jalaali/jalaali-js

/*
  Jalaali years starting the 33-year rule.
*/
var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];
/*
  Converts a Gregorian date to Jalaali.
*/

function toJalaali(gy, gm, gd) {
  if (Object.prototype.toString.call(gy) === '[object Date]') {
    gd = gy.getDate();
    gm = gy.getMonth() + 1;
    gy = gy.getFullYear();
  }

  return d2j(g2d(gy, gm, gd));
}
/*
  Converts a Jalaali date to Gregorian.
*/

function toGregorian(jy, jm, jd) {
  return d2g(j2d(jy, jm, jd));
}
/*
  Checks whether a Jalaali date is valid or not.
*/

function isValidJalaaliDate(jy, jm, jd) {
  return jy >= -61 && jy <= 3177 && jm >= 1 && jm <= 12 && jd >= 1 && jd <= jalaaliMonthLength(jy, jm);
}
/*
  Is this a leap year or not?
*/

function isLeapJalaaliYear(jy) {
  return jalCalLeap(jy) === 0;
}
/*
  Number of days in a given month in a Jalaali year.
*/


function jalaaliMonthLength(jy, jm) {
  if (jm <= 6) return 31;
  if (jm <= 11) return 30;
  if (isLeapJalaaliYear(jy)) return 30;
  return 29;
}
/*
    This function determines if the Jalaali (Persian) year is
    leap (366-day long) or is the common year (365 days)

    @param jy Jalaali calendar year (-61 to 3177)
    @returns number of years since the last leap year (0 to 4)
 */

function jalCalLeap(jy) {
  var bl = breaks.length,
      jp = breaks[0],
      jm,
      jump,
      leap,
      n,
      i;

  if (jy < jp || jy >= breaks[bl - 1]) {
    throw new Error('Invalid Jalaali year ' + jy);
  }

  for (i = 1; i < bl; i += 1) {
    jm = breaks[i];
    jump = jm - jp;

    if (jy < jm) {
      break;
    }

    jp = jm;
  }

  n = jy - jp;

  if (jump - n < 6) {
    n = n - jump + div(jump + 4, 33) * 33;
  }

  leap = date_persian_mod(date_persian_mod(n + 1, 33) - 1, 4);

  if (leap === -1) {
    leap = 4;
  }

  return leap;
}
/*
  This function determines if the Jalaali (Persian) year is
  leap (366-day long) or is the common year (365 days), and
  finds the day in March (Gregorian calendar) of the first
  day of the Jalaali year (jy).

  @param jy Jalaali calendar year (-61 to 3177)
  @param withoutLeap when don't need leap (true or false) default is false
  @return
    leap: number of years since the last leap year (0 to 4)
    gy: Gregorian year of the beginning of Jalaali year
    march: the March day of Farvardin the 1st (1st day of jy)
  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
  @see: http://www.fourmilab.ch/documents/calendar/
*/


function jalCal(jy, withoutLeap) {
  var bl = breaks.length,
      gy = jy + 621,
      leapJ = -14,
      jp = breaks[0],
      jm,
      jump,
      leap,
      leapG,
      march,
      n,
      i;

  if (jy < jp || jy >= breaks[bl - 1]) {
    throw new Error('Invalid Jalaali year ' + jy);
  } // Find the limiting years for the Jalaali year jy.


  for (i = 1; i < bl; i += 1) {
    jm = breaks[i];
    jump = jm - jp;

    if (jy < jm) {
      break;
    }

    leapJ = leapJ + div(jump, 33) * 8 + div(date_persian_mod(jump, 33), 4);
    jp = jm;
  }

  n = jy - jp; // Find the number of leap years from AD 621 to the beginning
  // of the current Jalaali year in the Persian calendar.

  leapJ = leapJ + div(n, 33) * 8 + div(date_persian_mod(n, 33) + 3, 4);

  if (date_persian_mod(jump, 33) === 4 && jump - n === 4) {
    leapJ += 1;
  } // And the same in the Gregorian calendar (until the year gy).


  leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150; // Determine the Gregorian date of Farvardin the 1st.

  march = 20 + leapJ - leapG; // Find how many years have passed since the last leap year.

  if (!withoutLeap) {
    if (jump - n < 6) {
      n = n - jump + div(jump + 4, 33) * 33;
    }

    leap = date_persian_mod(date_persian_mod(n + 1, 33) - 1, 4);

    if (leap === -1) {
      leap = 4;
    }
  }

  return {
    leap: leap,
    gy: gy,
    march: march
  };
}
/*
  Converts a date of the Jalaali calendar to the Julian Day number.

  @param jy Jalaali year (1 to 3100)
  @param jm Jalaali month (1 to 12)
  @param jd Jalaali day (1 to 29/31)
  @return Julian Day number
*/


function j2d(jy, jm, jd) {
  var r = jalCal(jy, true);
  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
}
/*
  Converts the Julian Day number to a date in the Jalaali calendar.

  @param jdn Julian Day number
  @return
    jy: Jalaali year (1 to 3100)
    jm: Jalaali month (1 to 12)
    jd: Jalaali day (1 to 29/31)
*/


function d2j(jdn) {
  var gy = d2g(jdn).gy,
      // Calculate Gregorian year (gy).
  jy = gy - 621,
      r = jalCal(jy, false),
      jdn1f = g2d(gy, 3, r.march),
      jd,
      jm,
      k; // Find number of days that passed since 1 Farvardin.

  k = jdn - jdn1f;

  if (k >= 0) {
    if (k <= 185) {
      // The first 6 months.
      jm = 1 + div(k, 31);
      jd = date_persian_mod(k, 31) + 1;
      return {
        jy: jy,
        jm: jm,
        jd: jd
      };
    } else {
      // The remaining months.
      k -= 186;
    }
  } else {
    // Previous Jalaali year.
    jy -= 1;
    k += 179;

    if (r.leap === 1) {
      k += 1;
    }
  }

  jm = 7 + div(k, 30);
  jd = date_persian_mod(k, 30) + 1;
  return {
    jy: jy,
    jm: jm,
    jd: jd
  };
}
/*
  Calculates the Julian Day number from Gregorian or Julian
  calendar dates. This integer number corresponds to the noon of
  the date (i.e. 12 hours of Universal Time).
  The procedure was tested to be good since 1 March, -100100 (of both
  calendars) up to a few million years into the future.

  @param gy Calendar year (years BC numbered 0, -1, -2, ...)
  @param gm Calendar month (1 to 12)
  @param gd Calendar day of the month (1 to 28/29/30/31)
  @return Julian Day number
*/


function g2d(gy, gm, gd) {
  var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * date_persian_mod(gm + 9, 12) + 2, 5) + gd - 34840408;
  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
  return d;
}
/*
  Calculates Gregorian and Julian calendar dates from the Julian Day number
  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
  calendars) to some millions years ahead of the present.

  @param jdn Julian Day number
  @return
    gy: Calendar year (years BC numbered 0, -1, -2, ...)
    gm: Calendar month (1 to 12)
    gd: Calendar day of the month M (1 to 28/29/30/31)
*/


function d2g(jdn) {
  var j, i, gd, gm, gy;
  j = 4 * jdn + 139361631;
  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
  i = div(date_persian_mod(j, 1461), 4) * 5 + 308;
  gd = div(date_persian_mod(i, 153), 5) + 1;
  gm = date_persian_mod(div(i, 153), 12) + 1;
  gy = div(j, 1461) - 100100 + div(8 - gm, 6);
  return {
    gy: gy,
    gm: gm,
    gd: gd
  };
}
/*
  Utility helper functions.
*/


function div(a, b) {
  return ~~(a / b);
}

function date_persian_mod(a, b) {
  return a - ~~(a / b) * b;
}
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/datetime.js



/* harmony default export */ var datetime = ({
  mixins: [mixins_dark],
  props: {
    value: {
      required: true
    },
    mask: {
      type: String
    },
    locale: Object,
    calendar: {
      type: String,
      validator: v => ['gregorian', 'persian'].includes(v),
      default: 'gregorian'
    },
    landscape: Boolean,
    color: String,
    textColor: String,
    square: Boolean,
    flat: Boolean,
    bordered: Boolean,
    readonly: Boolean,
    disable: Boolean
  },
  watch: {
    mask() {
      this.$nextTick(() => {
        this.__updateValue({},
        /* reason for QDate only */
        'mask');
      });
    },

    computedLocale() {
      this.$nextTick(() => {
        this.__updateValue({},
        /* reason for QDate only */
        'locale');
      });
    }

  },
  computed: {
    editable() {
      return this.disable !== true && this.readonly !== true;
    },

    computedColor() {
      return this.color || 'primary';
    },

    computedTextColor() {
      return this.textColor || 'white';
    },

    computedTabindex() {
      return this.editable === true ? 0 : -1;
    },

    headerClass() {
      var cls = [];
      this.color !== void 0 && cls.push("bg-".concat(this.color));
      this.textColor !== void 0 && cls.push("text-".concat(this.textColor));
      return cls.join(' ');
    },

    computedLocale() {
      return this.__getComputedLocale();
    }

  },
  methods: {
    __getComputedLocale() {
      return this.locale || this.$q.lang.date;
    },

    __getCurrentDate() {
      var d = new Date();

      if (this.calendar === 'persian') {
        var jDate = toJalaali(d);
        return {
          year: jDate.jy,
          month: jDate.jm,
          day: jDate.jd
        };
      }

      return {
        year: d.getFullYear(),
        month: d.getMonth() + 1,
        day: d.getDate()
      };
    },

    __getCurrentTime() {
      var d = new Date();
      return {
        hour: d.getHours(),
        minute: d.getMinutes(),
        second: d.getSeconds(),
        millisecond: d.getMilliseconds()
      };
    }

  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js
var es_regexp_constructor = __webpack_require__("4d63");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js
var es_string_match = __webpack_require__("466d");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/date.js












/* eslint no-fallthrough: 0 */




var MILLISECONDS_IN_DAY = 86400000,
    MILLISECONDS_IN_HOUR = 3600000,
    MILLISECONDS_IN_MINUTE = 60000,
    defaultMask = 'YYYY-MM-DDTHH:mm:ss.SSSZ',
    token = /\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g,
    reverseToken = /(\[[^\]]*\])|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]|([.*+:?^,\s${}()|\\]+)/g,
    regexStore = {};

function getRegexData(mask, dateLocale) {
  var days = '(' + dateLocale.days.join('|') + ')',
      key = mask + days;

  if (regexStore[key] !== void 0) {
    return regexStore[key];
  }

  var daysShort = '(' + dateLocale.daysShort.join('|') + ')',
      months = '(' + dateLocale.months.join('|') + ')',
      monthsShort = '(' + dateLocale.monthsShort.join('|') + ')';
  var map = {};
  var index = 0;
  var regexText = mask.replace(reverseToken, match => {
    index++;

    switch (match) {
      case 'YY':
        map.YY = index;
        return '(-?\\d{1,2})';

      case 'YYYY':
        map.YYYY = index;
        return '(-?\\d{1,4})';

      case 'M':
        map.M = index;
        return '(\\d{1,2})';

      case 'MM':
        map.M = index; // bumping to M

        return '(\\d{2})';

      case 'MMM':
        map.MMM = index;
        return monthsShort;

      case 'MMMM':
        map.MMMM = index;
        return months;

      case 'D':
        map.D = index;
        return '(\\d{1,2})';

      case 'Do':
        map.D = index++; // bumping to D

        return '(\\d{1,2}(st|nd|rd|th))';

      case 'DD':
        map.D = index; // bumping to D

        return '(\\d{2})';

      case 'H':
        map.H = index;
        return '(\\d{1,2})';

      case 'HH':
        map.H = index; // bumping to H

        return '(\\d{2})';

      case 'h':
        map.h = index;
        return '(\\d{1,2})';

      case 'hh':
        map.h = index; // bumping to h

        return '(\\d{2})';

      case 'm':
        map.m = index;
        return '(\\d{1,2})';

      case 'mm':
        map.m = index; // bumping to m

        return '(\\d{2})';

      case 's':
        map.s = index;
        return '(\\d{1,2})';

      case 'ss':
        map.s = index; // bumping to s

        return '(\\d{2})';

      case 'S':
        map.S = index;
        return '(\\d{1})';

      case 'SS':
        map.S = index; // bump to S

        return '(\\d{2})';

      case 'SSS':
        map.S = index; // bump to S

        return '(\\d{3})';

      case 'A':
        map.A = index;
        return '(AM|PM)';

      case 'a':
        map.a = index;
        return '(am|pm)';

      case 'aa':
        map.aa = index;
        return '(a\\.m\\.|p\\.m\\.)';

      case 'ddd':
        return daysShort;

      case 'dddd':
        return days;

      case 'Q':
      case 'd':
      case 'E':
        return '(\\d{1})';

      case 'Qo':
        return '(1st|2nd|3rd|4th)';

      case 'DDD':
      case 'DDDD':
        return '(\\d{1,3})';

      case 'w':
        return '(\\d{1,2})';

      case 'ww':
        return '(\\d{2})';

      case 'Z':
        // to split: (?:(Z)()()|([+-])?(\\d{2}):?(\\d{2}))
        return '(Z|[+-]\\d{2}:\\d{2})';

      case 'ZZ':
        return '(Z|[+-]\\d{2}\\d{2})';

      case 'X':
        map.X = index;
        return '(-?\\d+)';

      case 'x':
        map.x = index;
        return '(-?\\d{4,})';

      default:
        index--;

        if (match[0] === '[') {
          match = match.substring(1, match.length - 1);
        }

        return match.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
  });
  var res = {
    map,
    regex: new RegExp('^' + regexText)
  };
  regexStore[key] = res;
  return res;
}

function extractDate(str, mask, dateLocale) {
  var d = __splitDate(str, mask, dateLocale);

  return new Date(d.year, d.month === null ? null : d.month - 1, d.day, d.hour, d.minute, d.second, d.millisecond);
}
function __splitDate(str, mask, dateLocale, calendar) {
  var date = {
    year: null,
    month: null,
    day: null,
    hour: null,
    minute: null,
    second: null,
    millisecond: null,
    dateHash: null,
    timeHash: null
  };

  if (str === void 0 || str === null || str === '' || typeof str !== 'string') {
    return date;
  }

  if (mask === void 0) {
    mask = defaultMask;
  }

  var langOpts = dateLocale !== void 0 ? dateLocale : src_lang.props.date,
      months = langOpts.months,
      monthsShort = langOpts.monthsShort;

  var _getRegexData = getRegexData(mask, langOpts),
      regex = _getRegexData.regex,
      map = _getRegexData.map;

  var match = str.match(regex);

  if (match === null) {
    return date;
  }

  if (map.X !== void 0 || map.x !== void 0) {
    var stamp = parseInt(match[map.X !== void 0 ? map.X : map.x], 10);

    if (isNaN(stamp) === true || stamp < 0) {
      return date;
    }

    var d = new Date(stamp * (map.X !== void 0 ? 1000 : 1));
    date.year = d.getFullYear();
    date.month = d.getMonth() + 1;
    date.day = d.getDate();
    date.hour = d.getHours();
    date.minute = d.getMinutes();
    date.second = d.getSeconds();
    date.millisecond = d.getMilliseconds();
  } else {
    if (map.YYYY !== void 0) {
      date.year = parseInt(match[map.YYYY], 10);
    } else if (map.YY !== void 0) {
      var y = parseInt(match[map.YY], 10);
      date.year = y < 0 ? y : 2000 + y;
    }

    if (map.M !== void 0) {
      date.month = parseInt(match[map.M], 10);

      if (date.month < 1 || date.month > 12) {
        return date;
      }
    } else if (map.MMM !== void 0) {
      date.month = monthsShort.indexOf(match[map.MMM]) + 1;
    } else if (map.MMMM !== void 0) {
      date.month = months.indexOf(match[map.MMMM]) + 1;
    }

    if (map.D !== void 0) {
      date.day = parseInt(match[map.D], 10);

      if (date.year === null || date.month === null || date.day < 1) {
        return date;
      }

      var maxDay = calendar !== 'persian' ? new Date(date.year, date.month, 0).getDate() : jalaaliMonthLength(date.year, date.month);

      if (date.day > maxDay) {
        return date;
      }
    }

    if (map.H !== void 0) {
      date.hour = parseInt(match[map.H], 10) % 24;
    } else if (map.h !== void 0) {
      date.hour = parseInt(match[map.h], 10) % 12;

      if (map.A && match[map.A] === 'PM' || map.a && match[map.a] === 'pm' || map.aa && match[map.aa] === 'p.m.') {
        date.hour += 12;
      }

      date.hour = date.hour % 24;
    }

    if (map.m !== void 0) {
      date.minute = parseInt(match[map.m], 10) % 60;
    }

    if (map.s !== void 0) {
      date.second = parseInt(match[map.s], 10) % 60;
    }

    if (map.S !== void 0) {
      date.millisecond = parseInt(match[map.S], 10) * Math.pow(10, 3 - match[map.S].length);
    }
  }

  date.dateHash = date.year + '/' + pad(date.month) + '/' + pad(date.day);
  date.timeHash = pad(date.hour) + ':' + pad(date.minute) + ':' + pad(date.second);
  return date;
}

function formatTimezone(offset) {
  var delimeter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var sign = offset > 0 ? '-' : '+',
      absOffset = Math.abs(offset),
      hours = Math.floor(absOffset / 60),
      minutes = absOffset % 60;
  return sign + pad(hours) + delimeter + pad(minutes);
}

function setMonth(date, newMonth
/* 1-based */
) {
  var test = new Date(date.getFullYear(), newMonth, 0, 0, 0, 0, 0),
      days = test.getDate();
  date.setMonth(newMonth - 1, Math.min(days, date.getDate()));
}

function getChange(date, mod, add) {
  var t = new Date(date),
      sign = add ? 1 : -1;
  Object.keys(mod).forEach(key => {
    if (key === 'month') {
      setMonth(t, t.getMonth() + 1 + sign * mod.month);
      return;
    }

    var op = key === 'year' ? 'FullYear' : capitalize(key === 'days' ? 'date' : key);
    t["set".concat(op)](t["get".concat(op)]() + sign * mod[key]);
  });
  return t;
}

function isValid(date) {
  return typeof date === 'number' ? true : isNaN(Date.parse(date)) === false;
}
function buildDate(mod, utc) {
  return adjustDate(new Date(), mod, utc);
}
function getDayOfWeek(date) {
  var dow = new Date(date).getDay();
  return dow === 0 ? 7 : dow;
}
function getWeekOfYear(date) {
  // Remove time components of date
  var thursday = new Date(date.getFullYear(), date.getMonth(), date.getDate()); // Change date to Thursday same week

  thursday.setDate(thursday.getDate() - (thursday.getDay() + 6) % 7 + 3); // Take January 4th as it is always in week 1 (see ISO 8601)

  var firstThursday = new Date(thursday.getFullYear(), 0, 4); // Change date to Thursday same week

  firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3); // Check if daylight-saving-time-switch occurred and correct for it

  var ds = thursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  thursday.setHours(thursday.getHours() - ds); // Number of weeks between target Thursday and first Thursday

  var weekDiff = (thursday - firstThursday) / (MILLISECONDS_IN_DAY * 7);
  return 1 + Math.floor(weekDiff);
}
function isBetweenDates(date, from, to) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var d1 = new Date(from).getTime(),
      d2 = new Date(to).getTime(),
      cur = new Date(date).getTime();
  opts.inclusiveFrom && d1--;
  opts.inclusiveTo && d2++;
  return cur > d1 && cur < d2;
}
function addToDate(date, mod) {
  return getChange(date, mod, true);
}
function subtractFromDate(date, mod) {
  return getChange(date, mod, false);
}
function adjustDate(date, mod, utc) {
  var t = new Date(date),
      prefix = "set".concat(utc ? 'UTC' : '');
  Object.keys(mod).forEach(key => {
    if (key === 'month') {
      setMonth(t, mod.month);
      return;
    }

    var op = key === 'year' ? 'FullYear' : key.charAt(0).toUpperCase() + key.slice(1);
    t["".concat(prefix).concat(op)](mod[key]);
  });
  return t;
}
function startOfDate(date, unit) {
  var t = new Date(date);

  switch (unit) {
    case 'year':
      t.setMonth(0);

    case 'month':
      t.setDate(1);

    case 'day':
      t.setHours(0);

    case 'hour':
      t.setMinutes(0);

    case 'minute':
      t.setSeconds(0);

    case 'second':
      t.setMilliseconds(0);
  }

  return t;
}
function endOfDate(date, unit) {
  var t = new Date(date);

  switch (unit) {
    case 'year':
      t.setMonth(11);

    case 'month':
      t.setDate(daysInMonth(t));

    case 'day':
      t.setHours(23);

    case 'hour':
      t.setMinutes(59);

    case 'minute':
      t.setSeconds(59);

    case 'second':
      t.setMilliseconds(59);
  }

  return t;
}
function getMaxDate()
/* date, ...args */
{
  var t = 0;
  Array.prototype.slice.call(arguments).forEach(d => {
    t = Math.max(t, new Date(d));
  });
  return t;
}
function getMinDate(date
/*, ...args */
) {
  var t = new Date(date);
  Array.prototype.slice.call(arguments, 1).forEach(d => {
    t = Math.min(t, new Date(d));
  });
  return t;
}

function getDiff(t, sub, interval) {
  return (t.getTime() - t.getTimezoneOffset() * MILLISECONDS_IN_MINUTE - (sub.getTime() - sub.getTimezoneOffset() * MILLISECONDS_IN_MINUTE)) / interval;
}

function getDateDiff(date, subtract) {
  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'days';
  var t = new Date(date),
      sub = new Date(subtract);

  switch (unit) {
    case 'years':
      return t.getFullYear() - sub.getFullYear();

    case 'months':
      return (t.getFullYear() - sub.getFullYear()) * 12 + t.getMonth() - sub.getMonth();

    case 'days':
      return getDiff(startOfDate(t, 'day'), startOfDate(sub, 'day'), MILLISECONDS_IN_DAY);

    case 'hours':
      return getDiff(startOfDate(t, 'hour'), startOfDate(sub, 'hour'), MILLISECONDS_IN_HOUR);

    case 'minutes':
      return getDiff(startOfDate(t, 'minute'), startOfDate(sub, 'minute'), MILLISECONDS_IN_MINUTE);

    case 'seconds':
      return getDiff(startOfDate(t, 'second'), startOfDate(sub, 'second'), 1000);
  }
}
function getDayOfYear(date) {
  return getDateDiff(date, startOfDate(date, 'year'), 'days') + 1;
}
function inferDateFormat(date) {
  return isDate(date) === true ? 'date' : typeof date === 'number' ? 'number' : 'string';
}
function getDateBetween(date, min, max) {
  var t = new Date(date);

  if (min) {
    var low = new Date(min);

    if (t < low) {
      return low;
    }
  }

  if (max) {
    var high = new Date(max);

    if (t > high) {
      return high;
    }
  }

  return t;
}
function isSameDate(date, date2, unit) {
  var t = new Date(date),
      d = new Date(date2);

  if (unit === void 0) {
    return t.getTime() === d.getTime();
  }

  switch (unit) {
    case 'second':
      if (t.getSeconds() !== d.getSeconds()) {
        return false;
      }

    case 'minute':
      // intentional fall-through
      if (t.getMinutes() !== d.getMinutes()) {
        return false;
      }

    case 'hour':
      // intentional fall-through
      if (t.getHours() !== d.getHours()) {
        return false;
      }

    case 'day':
      // intentional fall-through
      if (t.getDate() !== d.getDate()) {
        return false;
      }

    case 'month':
      // intentional fall-through
      if (t.getMonth() !== d.getMonth()) {
        return false;
      }

    case 'year':
      // intentional fall-through
      if (t.getFullYear() !== d.getFullYear()) {
        return false;
      }

      break;

    default:
      throw new Error("date isSameDate unknown unit ".concat(unit));
  }

  return true;
}
function daysInMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
}

function getOrdinal(n) {
  if (n >= 11 && n <= 13) {
    return "".concat(n, "th");
  }

  switch (n % 10) {
    case 1:
      return "".concat(n, "st");

    case 2:
      return "".concat(n, "nd");

    case 3:
      return "".concat(n, "rd");
  }

  return "".concat(n, "th");
}

var formatter = {
  // Year: 00, 01, ..., 99
  YY(date, _, forcedYear) {
    // workaround for < 1900 with new Date()
    var y = this.YYYY(date, _, forcedYear) % 100;
    return y > 0 ? pad(y) : '-' + pad(Math.abs(y));
  },

  // Year: 1900, 1901, ..., 2099
  YYYY(date, _, forcedYear) {
    // workaround for < 1900 with new Date()
    return forcedYear !== void 0 && forcedYear !== null ? forcedYear : date.getFullYear();
  },

  // Month: 1, 2, ..., 12
  M(date) {
    return date.getMonth() + 1;
  },

  // Month: 01, 02, ..., 12
  MM(date) {
    return pad(date.getMonth() + 1);
  },

  // Month Short Name: Jan, Feb, ...
  MMM(date, dateLocale) {
    return dateLocale.monthsShort[date.getMonth()];
  },

  // Month Name: January, February, ...
  MMMM(date, dateLocale) {
    return dateLocale.months[date.getMonth()];
  },

  // Quarter: 1, 2, 3, 4
  Q(date) {
    return Math.ceil((date.getMonth() + 1) / 3);
  },

  // Quarter: 1st, 2nd, 3rd, 4th
  Qo(date) {
    return getOrdinal(this.Q(date));
  },

  // Day of month: 1, 2, ..., 31
  D(date) {
    return date.getDate();
  },

  // Day of month: 1st, 2nd, ..., 31st
  Do(date) {
    return getOrdinal(date.getDate());
  },

  // Day of month: 01, 02, ..., 31
  DD(date) {
    return pad(date.getDate());
  },

  // Day of year: 1, 2, ..., 366
  DDD(date) {
    return getDayOfYear(date);
  },

  // Day of year: 001, 002, ..., 366
  DDDD(date) {
    return pad(getDayOfYear(date), 3);
  },

  // Day of week: 0, 1, ..., 6
  d(date) {
    return date.getDay();
  },

  // Day of week: Su, Mo, ...
  dd(date, dateLocale) {
    return this.dddd(date, dateLocale).slice(0, 2);
  },

  // Day of week: Sun, Mon, ...
  ddd(date, dateLocale) {
    return dateLocale.daysShort[date.getDay()];
  },

  // Day of week: Sunday, Monday, ...
  dddd(date, dateLocale) {
    return dateLocale.days[date.getDay()];
  },

  // Day of ISO week: 1, 2, ..., 7
  E(date) {
    return date.getDay() || 7;
  },

  // Week of Year: 1 2 ... 52 53
  w(date) {
    return getWeekOfYear(date);
  },

  // Week of Year: 01 02 ... 52 53
  ww(date) {
    return pad(getWeekOfYear(date));
  },

  // Hour: 0, 1, ... 23
  H(date) {
    return date.getHours();
  },

  // Hour: 00, 01, ..., 23
  HH(date) {
    return pad(date.getHours());
  },

  // Hour: 1, 2, ..., 12
  h(date) {
    var hours = date.getHours();

    if (hours === 0) {
      return 12;
    }

    if (hours > 12) {
      return hours % 12;
    }

    return hours;
  },

  // Hour: 01, 02, ..., 12
  hh(date) {
    return pad(this.h(date));
  },

  // Minute: 0, 1, ..., 59
  m(date) {
    return date.getMinutes();
  },

  // Minute: 00, 01, ..., 59
  mm(date) {
    return pad(date.getMinutes());
  },

  // Second: 0, 1, ..., 59
  s(date) {
    return date.getSeconds();
  },

  // Second: 00, 01, ..., 59
  ss(date) {
    return pad(date.getSeconds());
  },

  // 1/10 of second: 0, 1, ..., 9
  S(date) {
    return Math.floor(date.getMilliseconds() / 100);
  },

  // 1/100 of second: 00, 01, ..., 99
  SS(date) {
    return pad(Math.floor(date.getMilliseconds() / 10));
  },

  // Millisecond: 000, 001, ..., 999
  SSS(date) {
    return pad(date.getMilliseconds(), 3);
  },

  // Meridiem: AM, PM
  A(date) {
    return this.H(date) < 12 ? 'AM' : 'PM';
  },

  // Meridiem: am, pm
  a(date) {
    return this.H(date) < 12 ? 'am' : 'pm';
  },

  // Meridiem: a.m., p.m.
  aa(date) {
    return this.H(date) < 12 ? 'a.m.' : 'p.m.';
  },

  // Timezone: -01:00, +00:00, ... +12:00
  Z(date) {
    return formatTimezone(date.getTimezoneOffset(), ':');
  },

  // Timezone: -0100, +0000, ... +1200
  ZZ(date) {
    return formatTimezone(date.getTimezoneOffset());
  },

  // Seconds timestamp: 512969520
  X(date) {
    return Math.floor(date.getTime() / 1000);
  },

  // Milliseconds timestamp: 512969520900
  x(date) {
    return date.getTime();
  }

};
function formatDate(val, mask, dateLocale, __forcedYear) {
  if (val !== 0 && !val || val === Infinity || val === -Infinity) {
    return;
  }

  var date = new Date(val);

  if (isNaN(date)) {
    return;
  }

  if (mask === void 0) {
    mask = defaultMask;
  }

  var locale = dateLocale !== void 0 ? dateLocale : src_lang.props.date;
  return mask.replace(token, (match, text) => match in formatter ? formatter[match](date, locale, __forcedYear) : text === void 0 ? match : text.split('\\]').join(']'));
}
function date_clone(date) {
  return isDate(date) === true ? new Date(date.getTime()) : date;
}
/* harmony default export */ var utils_date = ({
  isValid,
  extractDate,
  buildDate,
  getDayOfWeek,
  getWeekOfYear,
  isBetweenDates,
  addToDate,
  subtractFromDate,
  adjustDate,
  startOfDate,
  endOfDate,
  getMaxDate,
  getMinDate,
  getDateDiff,
  getDayOfYear,
  inferDateFormat,
  getDateBetween,
  isSameDate,
  daysInMonth,
  formatDate,
  clone: date_clone
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/date/QDate.js



















function QDate_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QDate_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QDate_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QDate_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var yearsInterval = 20;

var viewIsValid = v => ['Calendar', 'Years', 'Months'].includes(v);

/* harmony default export */ var QDate = (vue_runtime_esm["a" /* default */].extend({
  name: 'QDate',
  mixins: [datetime],
  props: {
    title: String,
    subtitle: String,
    emitImmediately: Boolean,
    mask: {
      // this mask is forced
      // when using persian calendar
      default: 'YYYY/MM/DD'
    },
    defaultYearMonth: {
      type: String,
      validator: v => /^-?[\d]+\/[0-1]\d$/.test(v)
    },
    events: [Array, Function],
    eventColor: [String, Function],
    options: [Array, Function],
    firstDayOfWeek: [String, Number],
    todayBtn: Boolean,
    minimal: Boolean,
    defaultView: {
      type: String,
      default: 'Calendar',
      validator: viewIsValid
    }
  },

  data() {
    var _this$__getModels = this.__getModels(this.value, this.mask, this.__getComputedLocale()),
        inner = _this$__getModels.inner,
        external = _this$__getModels.external,
        direction = this.$q.lang.rtl === true ? 'right' : 'left';

    return {
      view: this.defaultView,
      monthDirection: direction,
      yearDirection: direction,
      startYear: inner.year - inner.year % yearsInterval,
      innerModel: inner,
      extModel: external
    };
  },

  watch: {
    value(v) {
      var _this$__getModels2 = this.__getModels(v, this.mask, this.__getComputedLocale()),
          inner = _this$__getModels2.inner,
          external = _this$__getModels2.external;

      if (this.extModel.dateHash !== external.dateHash || this.extModel.timeHash !== external.timeHash) {
        this.extModel = external;
      }

      if (inner.dateHash !== this.innerModel.dateHash) {
        this.monthDirection = this.innerModel.dateHash < inner.dateHash === (this.$q.lang.rtl !== true) ? 'left' : 'right';

        if (inner.year !== this.innerModel.year) {
          this.yearDirection = this.monthDirection;
        }

        this.$nextTick(() => {
          this.startYear = inner.year - inner.year % yearsInterval;
          this.innerModel = inner;
        });
      }
    },

    view() {
      this.$refs.blurTarget !== void 0 && this.$refs.blurTarget.focus();
    }

  },
  computed: {
    classes() {
      var type = this.landscape === true ? 'landscape' : 'portrait';
      return "q-date--".concat(type, " q-date--").concat(type, "-").concat(this.minimal === true ? 'minimal' : 'standard') + (this.isDark === true ? ' q-date--dark q-dark' : '') + (this.bordered === true ? " q-date--bordered" : '') + (this.square === true ? " q-date--square no-border-radius" : '') + (this.flat === true ? " q-date--flat no-shadow" : '') + (this.readonly === true && this.disable !== true ? ' q-date--readonly' : '') + (this.disable === true ? ' disabled' : '');
    },

    headerTitle() {
      if (this.title !== void 0 && this.title !== null && this.title.length > 0) {
        return this.title;
      }

      var model = this.extModel;

      if (model.dateHash === null) {
        return ' --- ';
      }

      var date;

      if (this.calendar !== 'persian') {
        date = new Date(model.year, model.month - 1, model.day);
      } else {
        var gDate = toGregorian(model.year, model.month, model.day);
        date = new Date(gDate.gy, gDate.gm - 1, gDate.gd);
      }

      if (isNaN(date.valueOf()) === true) {
        return ' --- ';
      }

      if (this.computedLocale.headerTitle !== void 0) {
        return this.computedLocale.headerTitle(date, model);
      }

      return this.computedLocale.daysShort[date.getDay()] + ', ' + this.computedLocale.monthsShort[model.month - 1] + ' ' + model.day;
    },

    headerSubtitle() {
      return this.subtitle !== void 0 && this.subtitle !== null && this.subtitle.length > 0 ? this.subtitle : this.extModel.year !== null ? this.extModel.year : ' --- ';
    },

    dateArrow() {
      var val = [this.$q.iconSet.datetime.arrowLeft, this.$q.iconSet.datetime.arrowRight];
      return this.$q.lang.rtl === true ? val.reverse() : val;
    },

    computedFirstDayOfWeek() {
      return this.firstDayOfWeek !== void 0 ? Number(this.firstDayOfWeek) : this.computedLocale.firstDayOfWeek;
    },

    daysOfWeek() {
      var days = this.computedLocale.daysShort,
          first = this.computedFirstDayOfWeek;
      return first > 0 ? days.slice(first, 7).concat(days.slice(0, first)) : days;
    },

    daysInMonth() {
      return this.__getDaysInMonth(this.innerModel);
    },

    today() {
      return this.__getCurrentDate();
    },

    evtFn() {
      return typeof this.events === 'function' ? this.events : date => this.events.includes(date);
    },

    evtColor() {
      return typeof this.eventColor === 'function' ? this.eventColor : date => this.eventColor;
    },

    isInSelection() {
      return typeof this.options === 'function' ? this.options : date => this.options.includes(date);
    },

    days() {
      var date, endDay;
      var res = [];

      if (this.calendar !== 'persian') {
        date = new Date(this.innerModel.year, this.innerModel.month - 1, 1);
        endDay = new Date(this.innerModel.year, this.innerModel.month - 1, 0).getDate();
      } else {
        var gDate = toGregorian(this.innerModel.year, this.innerModel.month, 1);
        date = new Date(gDate.gy, gDate.gm - 1, gDate.gd);
        var prevJM = this.innerModel.month - 1;
        var prevJY = this.innerModel.year;

        if (prevJM === 0) {
          prevJM = 12;
          prevJY--;
        }

        endDay = jalaaliMonthLength(prevJY, prevJM);
      }

      var days = date.getDay() - this.computedFirstDayOfWeek - 1;
      var len = days < 0 ? days + 7 : days;

      if (len < 6) {
        for (var i = endDay - len; i <= endDay; i++) {
          res.push({
            i,
            fill: true
          });
        }
      }

      var index = res.length,
          prefix = this.innerModel.year + '/' + pad(this.innerModel.month) + '/';

      for (var _i = 1; _i <= this.daysInMonth; _i++) {
        var day = prefix + pad(_i);

        if (this.options !== void 0 && this.isInSelection(day) !== true) {
          res.push({
            i: _i
          });
        } else {
          var event = this.events !== void 0 && this.evtFn(day) === true ? this.evtColor(day) : false;
          res.push({
            i: _i,
            in: true,
            flat: true,
            event
          });
        }
      }

      if (this.innerModel.year === this.extModel.year && this.innerModel.month === this.extModel.month) {
        var _i2 = index + this.innerModel.day - 1;

        res[_i2] !== void 0 && Object.assign(res[_i2], {
          unelevated: true,
          flat: false,
          color: this.computedColor,
          textColor: this.computedTextColor
        });
      }

      if (this.innerModel.year === this.today.year && this.innerModel.month === this.today.month) {
        res[index + this.today.day - 1].today = true;
      }

      var left = res.length % 7;

      if (left > 0) {
        var afterDays = 7 - left;

        for (var _i3 = 1; _i3 <= afterDays; _i3++) {
          res.push({
            i: _i3,
            fill: true
          });
        }
      }

      return res;
    }

  },
  methods: {
    setToday() {
      this.__updateValue(QDate_objectSpread({}, this.today), 'today');

      this.view = 'Calendar';
    },

    setView(view) {
      if (viewIsValid(view) === true) {
        this.view = view;
      }
    },

    offsetCalendar(type, descending) {
      if (['month', 'year'].includes(type)) {
        this["__goTo".concat(type === 'month' ? 'Month' : 'Year')](descending === true ? -1 : 1);
      }
    },

    __getModels(val, mask, locale) {
      var external = __splitDate(val, this.calendar === 'persian' ? 'YYYY/MM/DD' : mask, locale, this.calendar);

      return {
        external,
        inner: external.dateHash === null ? this.__getDefaultModel() : QDate_objectSpread({}, external)
      };
    },

    __getDefaultModel() {
      var year, month;

      if (this.defaultYearMonth !== void 0) {
        var d = this.defaultYearMonth.split('/');
        year = parseInt(d[0], 10);
        month = parseInt(d[1], 10);
      } else {
        // may come from data() where computed
        // props are not yet available
        var _d = this.today !== void 0 ? this.today : this.__getCurrentDate();

        year = _d.year;
        month = _d.month;
      }

      return {
        year,
        month,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
        dateHash: year + '/' + pad(month) + '/01'
      };
    },

    __getHeader(h) {
      if (this.minimal === true) {
        return;
      }

      return h('div', {
        staticClass: 'q-date__header',
        class: this.headerClass
      }, [h('div', {
        staticClass: 'relative-position'
      }, [h('transition', {
        props: {
          name: 'q-transition--fade'
        }
      }, [h('div', {
        key: 'h-yr-' + this.headerSubtitle,
        staticClass: 'q-date__header-subtitle q-date__header-link',
        class: this.view === 'Years' ? 'q-date__header-link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'vY', {
          click: () => {
            this.view = 'Years';
          },
          keyup: e => {
            e.keyCode === 13 && (this.view = 'Years');
          }
        })
      }, [this.headerSubtitle])])]), h('div', {
        staticClass: 'q-date__header-title relative-position flex no-wrap'
      }, [h('div', {
        staticClass: 'relative-position col'
      }, [h('transition', {
        props: {
          name: 'q-transition--fade'
        }
      }, [h('div', {
        key: 'h-sub' + this.headerTitle,
        staticClass: 'q-date__header-title-label q-date__header-link',
        class: this.view === 'Calendar' ? 'q-date__header-link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'vC', {
          click: () => {
            this.view = 'Calendar';
          },
          keyup: e => {
            e.keyCode === 13 && (this.view = 'Calendar');
          }
        })
      }, [this.headerTitle])])]), this.todayBtn === true ? h(QBtn, {
        staticClass: 'q-date__header-today',
        props: {
          icon: this.$q.iconSet.datetime.today,
          flat: true,
          size: 'sm',
          round: true,
          tabindex: this.computedTabindex
        },
        on: cache(this, 'today', {
          click: this.setToday
        })
      }) : null])]);
    },

    __getNavigation(h, _ref) {
      var label = _ref.label,
          view = _ref.view,
          key = _ref.key,
          dir = _ref.dir,
          goTo = _ref.goTo,
          cls = _ref.cls;
      return [h('div', {
        staticClass: 'row items-center q-date__arrow'
      }, [h(QBtn, {
        props: {
          round: true,
          dense: true,
          size: 'sm',
          flat: true,
          icon: this.dateArrow[0],
          tabindex: this.computedTabindex
        },
        on: cache(this, 'go-#' + view, {
          click() {
            goTo(-1);
          }

        })
      })]), h('div', {
        staticClass: 'relative-position overflow-hidden flex flex-center' + cls
      }, [h('transition', {
        props: {
          name: 'q-transition--jump-' + dir
        }
      }, [h('div', {
        key
      }, [h(QBtn, {
        props: {
          flat: true,
          dense: true,
          noCaps: true,
          label,
          tabindex: this.computedTabindex
        },
        on: cache(this, 'view#' + view, {
          click: () => {
            this.view = view;
          }
        })
      })])])]), h('div', {
        staticClass: 'row items-center q-date__arrow'
      }, [h(QBtn, {
        props: {
          round: true,
          dense: true,
          size: 'sm',
          flat: true,
          icon: this.dateArrow[1],
          tabindex: this.computedTabindex
        },
        on: cache(this, 'go+#' + view, {
          click() {
            goTo(1);
          }

        })
      })])];
    },

    __getCalendarView(h) {
      return [h('div', {
        key: 'calendar-view',
        staticClass: 'q-date__view q-date__calendar'
      }, [h('div', {
        staticClass: 'q-date__navigation row items-center no-wrap'
      }, this.__getNavigation(h, {
        label: this.computedLocale.months[this.innerModel.month - 1],
        view: 'Months',
        key: this.innerModel.month,
        dir: this.monthDirection,
        goTo: this.__goToMonth,
        cls: ' col'
      }).concat(this.__getNavigation(h, {
        label: this.innerModel.year,
        view: 'Years',
        key: this.innerModel.year,
        dir: this.yearDirection,
        goTo: this.__goToYear,
        cls: ''
      }))), h('div', {
        staticClass: 'q-date__calendar-weekdays row items-center no-wrap'
      }, this.daysOfWeek.map(day => h('div', {
        staticClass: 'q-date__calendar-item'
      }, [h('div', [day])]))), h('div', {
        staticClass: 'q-date__calendar-days-container relative-position overflow-hidden'
      }, [h('transition', {
        props: {
          name: 'q-transition--slide-' + this.monthDirection
        }
      }, [h('div', {
        key: this.innerModel.year + '/' + this.innerModel.month,
        staticClass: 'q-date__calendar-days fit'
      }, this.days.map(day => h('div', {
        staticClass: "q-date__calendar-item q-date__calendar-item--".concat(day.fill === true ? 'fill' : day.in === true ? 'in' : 'out')
      }, [day.in === true ? h(QBtn, {
        staticClass: day.today === true ? 'q-date__today' : null,
        props: {
          dense: true,
          flat: day.flat,
          unelevated: day.unelevated,
          color: day.color,
          textColor: day.textColor,
          label: day.i,
          tabindex: this.computedTabindex
        },
        on: cache(this, 'day#' + day.i, {
          click: () => {
            this.__setDay(day.i);
          }
        })
      }, day.event !== false ? [h('div', {
        staticClass: 'q-date__event bg-' + day.event
      })] : null) : h('div', [day.i])])))])])])];
    },

    __getMonthsView(h) {
      var currentYear = this.innerModel.year === this.today.year;
      var content = this.computedLocale.monthsShort.map((month, i) => {
        var active = this.innerModel.month === i + 1;
        return h('div', {
          staticClass: 'q-date__months-item flex flex-center'
        }, [h(QBtn, {
          staticClass: currentYear === true && this.today.month === i + 1 ? 'q-date__today' : null,
          props: {
            flat: !active,
            label: month,
            unelevated: active,
            color: active ? this.computedColor : null,
            textColor: active ? this.computedTextColor : null,
            tabindex: this.computedTabindex
          },
          on: cache(this, 'month#' + i, {
            click: () => {
              this.__setMonth(i + 1);
            }
          })
        })]);
      });
      return h('div', {
        key: 'months-view',
        staticClass: 'q-date__view q-date__months flex flex-center'
      }, content);
    },

    __getYearsView(h) {
      var _this = this;

      var start = this.startYear,
          stop = start + yearsInterval,
          years = [];

      var _loop = function _loop(i) {
        var active = _this.innerModel.year === i;
        years.push(h('div', {
          staticClass: 'q-date__years-item flex flex-center'
        }, [h(QBtn, {
          key: 'yr' + i,
          staticClass: _this.today.year === i ? 'q-date__today' : null,
          props: {
            flat: !active,
            label: i,
            dense: true,
            unelevated: active,
            color: active ? _this.computedColor : null,
            textColor: active ? _this.computedTextColor : null,
            tabindex: _this.computedTabindex
          },
          on: cache(_this, 'yr#' + i, {
            click: () => {
              _this.__setYear(i);
            }
          })
        })]));
      };

      for (var i = start; i <= stop; i++) {
        _loop(i);
      }

      return h('div', {
        staticClass: 'q-date__view q-date__years flex flex-center'
      }, [h('div', {
        staticClass: 'col-auto'
      }, [h(QBtn, {
        props: {
          round: true,
          dense: true,
          flat: true,
          icon: this.dateArrow[0],
          tabindex: this.computedTabindex
        },
        on: cache(this, 'y-', {
          click: () => {
            this.startYear -= yearsInterval;
          }
        })
      })]), h('div', {
        staticClass: 'q-date__years-content col self-stretch row items-center'
      }, years), h('div', {
        staticClass: 'col-auto'
      }, [h(QBtn, {
        props: {
          round: true,
          dense: true,
          flat: true,
          icon: this.dateArrow[1],
          tabindex: this.computedTabindex
        },
        on: cache(this, 'y+', {
          click: () => {
            this.startYear += yearsInterval;
          }
        })
      })])]);
    },

    __getDaysInMonth(obj) {
      return this.calendar !== 'persian' ? new Date(obj.year, obj.month, 0).getDate() : jalaaliMonthLength(obj.year, obj.month);
    },

    __goToMonth(offset) {
      var month = Number(this.innerModel.month) + offset,
          yearDir = this.yearDirection;

      if (month === 13) {
        month = 1;
        this.innerModel.year++;
        yearDir = this.$q.lang.rtl !== true ? 'left' : 'right';
      } else if (month === 0) {
        month = 12;
        this.innerModel.year--;
        yearDir = this.$q.lang.rtl !== true ? 'right' : 'left';
      }

      this.monthDirection = offset > 0 === (this.$q.lang.rtl !== true) ? 'left' : 'right';
      this.yearDirection = yearDir;
      this.innerModel.month = month;
      this.emitImmediately === true && this.__updateValue({}, 'month');
    },

    __goToYear(offset) {
      this.monthDirection = this.yearDirection = offset > 0 === (this.$q.lang.rtl !== true) ? 'left' : 'right';
      this.innerModel.year = Number(this.innerModel.year) + offset;
      this.emitImmediately === true && this.__updateValue({}, 'year');
    },

    __setYear(year) {
      this.innerModel.year = year;
      this.emitImmediately === true && this.__updateValue({
        year
      }, 'year');
      this.view = this.extModel.month === null || this.defaultView === 'Years' ? 'Months' : 'Calendar';
    },

    __setMonth(month) {
      this.innerModel.month = month;
      this.emitImmediately === true && this.__updateValue({
        month
      }, 'month');
      this.view = 'Calendar';
    },

    __setDay(day) {
      this.__updateValue({
        day
      }, 'day');
    },

    __updateValue(date, reason) {
      if (date.year === void 0) {
        date.year = this.innerModel.year;
      }

      if (date.month === void 0) {
        date.month = this.innerModel.month;
      }

      if (date.day === void 0 || this.emitImmediately === true && (reason === 'year' || reason === 'month')) {
        date.day = this.innerModel.day;
        var maxDay = this.emitImmediately === true ? this.__getDaysInMonth(date) : this.daysInMonth;
        date.day = Math.min(date.day, maxDay);
      }

      var val = this.calendar === 'persian' ? date.year + '/' + pad(date.month) + '/' + pad(date.day) : formatDate(new Date(date.year, date.month - 1, date.day, this.extModel.hour, this.extModel.minute, this.extModel.second, this.extModel.millisecond), this.mask, this.computedLocale, date.year);
      date.changed = val !== this.value;
      this.$emit('input', val, reason, date);

      if (val === this.value && reason === 'today') {
        var newHash = date.year + '/' + pad(date.month) + '/' + pad(date.day);
        var curHash = this.innerModel.year + '/' + pad(this.innerModel.month) + '/' + pad(this.innerModel.day);

        if (newHash !== curHash) {
          this.monthDirection = curHash < newHash === (this.$q.lang.rtl !== true) ? 'left' : 'right';

          if (date.year !== this.innerModel.year) {
            this.yearDirection = this.monthDirection;
          }

          this.$nextTick(() => {
            this.startYear = date.year - date.year % yearsInterval;
            Object.assign(this.innerModel, {
              year: date.year,
              month: date.month,
              day: date.day,
              dateHash: newHash
            });
          });
        }
      }
    }

  },

  render(h) {
    var content = [h('div', {
      staticClass: 'q-date__content col relative-position'
    }, [h('transition', {
      props: {
        name: 'q-transition--fade'
      }
    }, [this["__get".concat(this.view, "View")](h)])])];
    var def = slot_slot(this, 'default');
    def !== void 0 && content.push(h('div', {
      staticClass: 'q-date__actions'
    }, def));
    return h('div', {
      staticClass: 'q-date',
      class: this.classes,
      on: this.$listeners
    }, [this.__getHeader(h), h('div', {
      staticClass: 'q-date__main col column',
      attrs: {
        tabindex: -1
      },
      ref: 'blurTarget'
    }, content)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/date/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/history.js

/* harmony default export */ var mixins_history = ({
  methods: {
    __addHistory() {
      this.__historyEntry = {
        condition: () => {
          return this.hideOnRouteChange === true;
        },
        handler: this.hide
      };
      src_history.add(this.__historyEntry);
    },

    __removeHistory() {
      if (this.__historyEntry !== void 0) {
        src_history.remove(this.__historyEntry);
        this.__historyEntry = void 0;
      }
    }

  },

  beforeDestroy() {
    this.showing === true && this.__removeHistory();
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/prevent-scroll.js


var registered = 0,
    scrollPositionX,
    scrollPositionY,
    maxScrollTop,
    vpPendingUpdate = false,
    bodyLeft,
    bodyTop,
    closeTimer;

function onWheel(e) {
  if (shouldPreventScroll(e)) {
    stopAndPrevent(e);
  }
}

function shouldPreventScroll(e) {
  if (e.target === document.body || e.target.classList.contains('q-layout__backdrop')) {
    return true;
  }

  var path = getEventPath(e),
      shift = e.shiftKey && !e.deltaX,
      scrollY = !shift && Math.abs(e.deltaX) <= Math.abs(e.deltaY),
      delta = shift || scrollY ? e.deltaY : e.deltaX;

  for (var index = 0; index < path.length; index++) {
    var el = path[index];

    if (hasScrollbar(el, scrollY)) {
      return scrollY ? delta < 0 && el.scrollTop === 0 ? true : delta > 0 && el.scrollTop + el.clientHeight === el.scrollHeight : delta < 0 && el.scrollLeft === 0 ? true : delta > 0 && el.scrollLeft + el.clientWidth === el.scrollWidth;
    }
  }

  return true;
}

function onAppleScroll(e) {
  if (e.target === document) {
    // required, otherwise iOS blocks further scrolling
    // until the mobile scrollbar dissapears
    document.scrollingElement.scrollTop = document.scrollingElement.scrollTop; // eslint-disable-line
  }
}

function onAppleResize(evt) {
  if (vpPendingUpdate === true) {
    return;
  }

  vpPendingUpdate = true;
  requestAnimationFrame(() => {
    vpPendingUpdate = false;
    var height = evt.target.height,
        _document$scrollingEl = document.scrollingElement,
        clientHeight = _document$scrollingEl.clientHeight,
        scrollTop = _document$scrollingEl.scrollTop;

    if (maxScrollTop === void 0 || height !== window.innerHeight) {
      maxScrollTop = clientHeight - height;
      document.scrollingElement.scrollTop = scrollTop;
    }

    if (scrollTop > maxScrollTop) {
      document.scrollingElement.scrollTop -= Math.ceil((scrollTop - maxScrollTop) / 8);
    }
  });
}

function apply(action, is) {
  var body = document.body,
      hasViewport = window.visualViewport !== void 0;

  if (action === 'add') {
    var overflowY = window.getComputedStyle(body).overflowY;
    scrollPositionX = getHorizontalScrollPosition(window);
    scrollPositionY = getScrollPosition(window);
    bodyLeft = body.style.left;
    bodyTop = body.style.top;
    body.style.left = "-".concat(scrollPositionX, "px");
    body.style.top = "-".concat(scrollPositionY, "px");

    if (overflowY !== 'hidden' && (overflowY === 'scroll' || body.scrollHeight > window.innerHeight)) {
      body.classList.add('q-body--force-scrollbar');
    }

    body.classList.add('q-body--prevent-scroll');

    if (is.ios === true) {
      if (hasViewport === true) {
        window.scrollTo(0, 0);
        window.visualViewport.addEventListener('resize', onAppleResize, listenOpts.passiveCapture);
        window.visualViewport.addEventListener('scroll', onAppleResize, listenOpts.passiveCapture);
        window.scrollTo(0, 0);
      } else {
        window.addEventListener('scroll', onAppleScroll, listenOpts.passiveCapture);
      }
    }
  }

  if (is.desktop === true && is.mac === true) {
    // ref. https://developers.google.com/web/updates/2017/01/scrolling-intervention
    window["".concat(action, "EventListener")]('wheel', onWheel, listenOpts.notPassive);
  }

  if (action === 'remove') {
    if (is.ios === true) {
      if (hasViewport === true) {
        window.visualViewport.removeEventListener('resize', onAppleResize, listenOpts.passiveCapture);
        window.visualViewport.removeEventListener('scroll', onAppleResize, listenOpts.passiveCapture);
      } else {
        window.removeEventListener('scroll', onAppleScroll, listenOpts.passiveCapture);
      }
    }

    body.classList.remove('q-body--prevent-scroll');
    body.classList.remove('q-body--force-scrollbar');
    body.style.left = bodyLeft;
    body.style.top = bodyTop;
    window.scrollTo(scrollPositionX, scrollPositionY);
    maxScrollTop = void 0;
  }
}

function preventScroll(state, is) {
  var action = 'add';

  if (state === true) {
    registered++;

    if (closeTimer !== void 0) {
      clearTimeout(closeTimer);
      closeTimer = void 0;
      return;
    }

    if (registered > 1) {
      return;
    }
  } else {
    if (registered === 0) {
      return;
    }

    registered--;

    if (registered > 0) {
      return;
    }

    action = 'remove';

    if (is.ios === true && is.nativeMobile === true) {
      clearTimeout(closeTimer);
      closeTimer = setTimeout(() => {
        apply(action, is);
        closeTimer = void 0;
      }, 100);
      return;
    }
  }

  apply(action, is);
}
/* harmony default export */ var prevent_scroll = ({
  methods: {
    __preventScroll(state) {
      if (state !== this.preventedScroll && (this.preventedScroll !== void 0 || state === true)) {
        this.preventedScroll = state;
        preventScroll(state, this.$q.platform.is);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/dialog/QDialog.js









function QDialog_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QDialog_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QDialog_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QDialog_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











var maximizedModals = 0;
var positionClass = {
  standard: 'fixed-full flex-center',
  top: 'fixed-top justify-center',
  bottom: 'fixed-bottom justify-center',
  right: 'fixed-right items-center',
  left: 'fixed-left items-center'
};
var transitions = {
  standard: ['scale', 'scale'],
  top: ['slide-down', 'slide-up'],
  bottom: ['slide-up', 'slide-down'],
  right: ['slide-left', 'slide-right'],
  left: ['slide-right', 'slide-left']
};
/* harmony default export */ var QDialog = (vue_runtime_esm["a" /* default */].extend({
  name: 'QDialog',
  mixins: [mixins_history, model_toggle, portal, prevent_scroll],
  props: {
    persistent: Boolean,
    autoClose: Boolean,
    noEscDismiss: Boolean,
    noBackdropDismiss: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    seamless: Boolean,
    maximized: Boolean,
    fullWidth: Boolean,
    fullHeight: Boolean,
    square: Boolean,
    position: {
      type: String,
      default: 'standard',

      validator(val) {
        return val === 'standard' || ['top', 'bottom', 'left', 'right'].includes(val);
      }

    },
    transitionShow: String,
    transitionHide: String
  },

  data() {
    return {
      transitionState: this.showing
    };
  },

  watch: {
    showing(val) {
      if (this.transitionShowComputed !== this.transitionHideComputed) {
        this.$nextTick(() => {
          this.transitionState = val;
        });
      }
    },

    maximized(newV, oldV) {
      if (this.showing === true) {
        this.__updateState(false, oldV);

        this.__updateState(true, newV);
      }
    },

    useBackdrop(v) {
      this.__preventScroll(v);

      this.__preventFocusout(v);
    }

  },
  computed: {
    classes() {
      return "q-dialog__inner--".concat(this.maximized === true ? 'maximized' : 'minimized', " ") + "q-dialog__inner--".concat(this.position, " ").concat(positionClass[this.position]) + (this.fullWidth === true ? ' q-dialog__inner--fullwidth' : '') + (this.fullHeight === true ? ' q-dialog__inner--fullheight' : '') + (this.square === true ? ' q-dialog__inner--square' : '');
    },

    transitionShowComputed() {
      return 'q-transition--' + (this.transitionShow === void 0 ? transitions[this.position][0] : this.transitionShow);
    },

    transitionHideComputed() {
      return 'q-transition--' + (this.transitionHide === void 0 ? transitions[this.position][1] : this.transitionHide);
    },

    transition() {
      return this.transitionState === true ? this.transitionHideComputed : this.transitionShowComputed;
    },

    useBackdrop() {
      return this.showing === true && this.seamless !== true;
    },

    hideOnRouteChange() {
      return this.persistent !== true && this.noRouteDismiss !== true && this.seamless !== true;
    }

  },
  methods: {
    focus() {
      var node = this.__getInnerNode();

      if (node === void 0 || node.contains(document.activeElement) === true) {
        return;
      }

      node = node.querySelector('[autofocus], [data-autofocus]') || node;
      node.focus();
    },

    shake() {
      this.focus();

      var node = this.__getInnerNode();

      if (node !== void 0) {
        node.classList.remove('q-animate--scale');
        node.classList.add('q-animate--scale');
        clearTimeout(this.shakeTimeout);
        this.shakeTimeout = setTimeout(() => {
          node.classList.remove('q-animate--scale');
        }, 170);
      }
    },

    __getInnerNode() {
      return this.__portal !== void 0 && this.__portal.$refs !== void 0 ? this.__portal.$refs.inner : void 0;
    },

    __show(evt) {
      this.__addHistory(); // IE can have null document.activeElement


      this.__refocusTarget = this.noRefocus === false && document.activeElement !== null ? document.activeElement : void 0;
      this.$el.dispatchEvent(create('popup-show', {
        bubbles: true
      }));

      this.__updateState(true, this.maximized);

      escape_key.register(this, () => {
        if (this.seamless !== true) {
          if (this.persistent === true || this.noEscDismiss === true) {
            this.maximized !== true && this.shake();
          } else {
            this.$emit('escape-key');
            this.hide();
          }
        }
      });

      this.__showPortal();

      if (this.noFocus !== true) {
        // IE can have null document.activeElement
        document.activeElement !== null && document.activeElement.blur();

        this.__nextTick(this.focus);
      }

      this.__setTimeout(() => {
        if (this.$q.platform.is.ios === true && document.activeElement) {
          var _document$activeEleme = document.activeElement.getBoundingClientRect(),
              top = _document$activeEleme.top,
              bottom = _document$activeEleme.bottom,
              _window = window,
              innerHeight = _window.innerHeight,
              height = window.visualViewport !== void 0 ? window.visualViewport.height : innerHeight;

          if (top > 0 && bottom > height / 2) {
            var scrollTop = Math.min(document.scrollingElement.scrollHeight - height, bottom >= innerHeight ? Infinity : Math.ceil(document.scrollingElement.scrollTop + bottom - height / 2));

            var fn = () => {
              requestAnimationFrame(() => {
                document.scrollingElement.scrollTop += Math.ceil((scrollTop - document.scrollingElement.scrollTop) / 8);

                if (document.scrollingElement.scrollTop !== scrollTop) {
                  fn();
                }
              });
            };

            fn();
          }

          document.activeElement.scrollIntoView();
        } // required in order to avoid the "double-tap needed" issue


        this.$q.platform.is.ios === true && this.__portal.$el.click();
        this.$emit('show', evt);
      }, 300);
    },

    __hide(evt) {
      this.__removeHistory();

      this.__cleanup(true); // check null for IE


      if (this.__refocusTarget !== void 0 && this.__refocusTarget !== null) {
        this.__refocusTarget.focus();
      }

      this.$el.dispatchEvent(create('popup-hide', {
        bubbles: true
      }));

      this.__setTimeout(() => {
        this.__hidePortal();

        this.$emit('hide', evt);
      }, 300);
    },

    __cleanup(hiding) {
      clearTimeout(this.shakeTimeout);

      if (hiding === true || this.showing === true) {
        escape_key.pop(this);

        this.__updateState(false, this.maximized);

        if (this.seamless !== true) {
          this.__preventScroll(false);

          this.__preventFocusout(false);
        }
      }
    },

    __updateState(opening, maximized) {
      if (maximized === true) {
        if (opening === true) {
          maximizedModals < 1 && document.body.classList.add('q-body--dialog');
        } else if (maximizedModals < 2) {
          document.body.classList.remove('q-body--dialog');
        }

        maximizedModals += opening === true ? 1 : -1;
      }
    },

    __preventFocusout(state) {
      if (this.$q.platform.is.desktop === true) {
        var action = "".concat(state === true ? 'add' : 'remove', "EventListener");
        document.body[action]('focusin', this.__onFocusChange);
      }
    },

    __onAutoClose(e) {
      this.hide(e);
      this.$listeners.click !== void 0 && this.$emit('click', e);
    },

    __onBackdropClick(e) {
      if (this.persistent !== true && this.noBackdropDismiss !== true) {
        this.hide(e);
      } else {
        this.shake();
      }
    },

    __onFocusChange(e) {
      // the focus is not in a vue child component
      if (this.showing === true && this.__portal !== void 0 && childHasFocus(this.__portal.$el, e.target) !== true) {
        this.focus();
      }
    },

    __renderPortal(h) {
      var on = QDialog_objectSpread({}, this.$listeners, {
        // stop propagating this events from children
        input: event_stop,
        'popup-show': event_stop,
        'popup-hide': event_stop
      });

      if (this.autoClose === true) {
        on.click = this.__onAutoClose;
      }

      return h('div', {
        staticClass: 'q-dialog fullscreen no-pointer-events',
        class: this.contentClass,
        style: this.contentStyle,
        attrs: this.$attrs
      }, [h('transition', {
        props: {
          name: 'q-transition--fade'
        }
      }, this.useBackdrop === true ? [h('div', {
        staticClass: 'q-dialog__backdrop fixed-full',
        on: cache(this, 'bkdrop', {
          click: this.__onBackdropClick
        })
      })] : null), h('transition', {
        props: {
          name: this.transition
        }
      }, [this.showing === true ? h('div', {
        ref: 'inner',
        staticClass: 'q-dialog__inner flex no-pointer-events',
        class: this.classes,
        attrs: {
          tabindex: -1
        },
        on
      }, slot_slot(this, 'default')) : null])]);
    }

  },

  mounted() {
    this.__processModelChange(this.value);
  },

  beforeDestroy() {
    this.__cleanup();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/dialog/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/drawer/QDrawer.js











function QDrawer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QDrawer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QDrawer_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QDrawer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










var QDrawer_duration = 150;
var directiveTemplate = {
  name: 'touch-pan',
  modifiers: {
    horizontal: true,
    mouse: true,
    mouseAllDir: true
  }
};
var mouseEvents = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
/* harmony default export */ var QDrawer = (vue_runtime_esm["a" /* default */].extend({
  name: 'QDrawer',
  inject: {
    layout: {
      default() {
        console.error('QDrawer needs to be child of QLayout');
      }

    }
  },
  mixins: [mixins_dark, mixins_history, model_toggle, prevent_scroll],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    side: {
      type: String,
      default: 'left',
      validator: v => ['left', 'right'].includes(v)
    },
    width: {
      type: Number,
      default: 300
    },
    mini: Boolean,
    miniToOverlay: Boolean,
    miniWidth: {
      type: Number,
      default: 57
    },
    breakpoint: {
      type: Number,
      default: 1023
    },
    showIfAbove: Boolean,
    behavior: {
      type: String,
      validator: v => ['default', 'desktop', 'mobile'].includes(v),
      default: 'default'
    },
    bordered: Boolean,
    elevated: Boolean,
    contentStyle: [String, Object, Array],
    contentClass: [String, Object, Array],
    overlay: Boolean,
    persistent: Boolean,
    noSwipeOpen: Boolean,
    noSwipeClose: Boolean,
    noSwipeBackdrop: Boolean
  },

  data() {
    var belowBreakpoint = this.behavior === 'mobile' || this.behavior !== 'desktop' && this.layout.totalWidth <= this.breakpoint;
    return {
      belowBreakpoint,
      showing: this.showIfAbove === true && belowBreakpoint === false ? true : this.value === true
    };
  },

  watch: {
    belowBreakpoint(val) {
      if (val === true) {
        // from lg to xs
        this.lastDesktopState = this.showing;
        this.showing === true && this.hide(false);
      } else if (this.overlay === false && this.behavior !== 'mobile' && this.lastDesktopState !== false) {
        // from xs to lg
        if (this.showing === true) {
          this.__applyPosition(0);

          this.__applyBackdrop(0);

          this.__cleanup();
        } else {
          this.show(false);
        }
      }
    },

    'layout.totalWidth'(val) {
      this.__updateLocal('belowBreakpoint', this.behavior === 'mobile' || this.behavior !== 'desktop' && val <= this.breakpoint);
    },

    side(_, oldSide) {
      this.layout[oldSide].space = false;
      this.layout[oldSide].offset = 0;
    },

    behavior(val) {
      this.__updateLocal('belowBreakpoint', val === 'mobile' || val !== 'desktop' && this.layout.totalWidth <= this.breakpoint);
    },

    breakpoint(val) {
      this.__updateLocal('belowBreakpoint', this.behavior === 'mobile' || this.behavior !== 'desktop' && this.layout.totalWidth <= val);
    },

    'layout.container'(val) {
      this.showing === true && this.__preventScroll(val !== true);
    },

    'layout.scrollbarWidth'() {
      this.__applyPosition(this.showing === true ? 0 : void 0);
    },

    offset(val) {
      this.__update('offset', val);
    },

    onLayout(val) {
      this.$emit('on-layout', val);

      this.__update('space', val);
    },

    rightSide() {
      this.__applyPosition();
    },

    size(val) {
      this.__applyPosition();

      this.__updateSizeOnLayout(this.miniToOverlay, val);
    },

    miniToOverlay(val) {
      this.__updateSizeOnLayout(val, this.size);
    },

    '$q.lang.rtl'() {
      this.__applyPosition();
    },

    mini() {
      if (this.value === true) {
        this.__animateMini();

        this.layout.__animate();
      }
    },

    isMini(val) {
      this.$emit('mini-state', val);
    }

  },
  computed: {
    rightSide() {
      return this.side === 'right';
    },

    offset() {
      return this.showing === true && this.belowBreakpoint === false && this.overlay === false ? this.miniToOverlay === true ? this.miniWidth : this.size : 0;
    },

    size() {
      return this.isMini === true ? this.miniWidth : this.width;
    },

    fixed() {
      return this.overlay === true || this.miniToOverlay === true || this.layout.view.indexOf(this.rightSide ? 'R' : 'L') > -1 || this.$q.platform.is.ios && this.layout.container === true;
    },

    onLayout() {
      return this.showing === true && this.belowBreakpoint === false && this.overlay === false;
    },

    onScreenOverlay() {
      return this.showing === true && this.belowBreakpoint === false && this.overlay === true;
    },

    backdropClass() {
      return this.showing === false ? 'no-pointer-events' : null;
    },

    headerSlot() {
      return this.rightSide === true ? this.layout.rows.top[2] === 'r' : this.layout.rows.top[0] === 'l';
    },

    footerSlot() {
      return this.rightSide === true ? this.layout.rows.bottom[2] === 'r' : this.layout.rows.bottom[0] === 'l';
    },

    aboveStyle() {
      var css = {};

      if (this.layout.header.space === true && this.headerSlot === false) {
        if (this.fixed === true) {
          css.top = "".concat(this.layout.header.offset, "px");
        } else if (this.layout.header.space === true) {
          css.top = "".concat(this.layout.header.size, "px");
        }
      }

      if (this.layout.footer.space === true && this.footerSlot === false) {
        if (this.fixed === true) {
          css.bottom = "".concat(this.layout.footer.offset, "px");
        } else if (this.layout.footer.space === true) {
          css.bottom = "".concat(this.layout.footer.size, "px");
        }
      }

      return css;
    },

    style() {
      var style = {
        width: "".concat(this.size, "px")
      };
      return this.belowBreakpoint === true ? style : Object.assign(style, this.aboveStyle);
    },

    classes() {
      return "q-drawer--".concat(this.side) + (this.bordered === true ? ' q-drawer--bordered' : '') + (this.isDark === true ? ' q-drawer--dark q-dark' : '') + (this.belowBreakpoint === true ? ' fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding' : " q-drawer--".concat(this.isMini === true ? 'mini' : 'standard') + (this.fixed === true || this.onLayout !== true ? ' fixed' : '') + (this.overlay === true || this.miniToOverlay === true ? ' q-drawer--on-top' : '') + (this.headerSlot === true ? ' q-drawer--top-padding' : ''));
    },

    stateDirection() {
      return (this.$q.lang.rtl === true ? -1 : 1) * (this.rightSide === true ? 1 : -1);
    },

    isMini() {
      return this.mini === true && this.belowBreakpoint !== true;
    },

    onNativeEvents() {
      if (this.belowBreakpoint !== true) {
        var evt = {
          '!click': e => {
            this.$emit('click', e);
          }
        };
        mouseEvents.forEach(name => {
          evt[name] = e => {
            this.$listeners[name] !== void 0 && this.$emit(name, e);
          };
        });
        return evt;
      }
    },

    hideOnRouteChange() {
      return this.persistent !== true && (this.belowBreakpoint === true || this.onScreenOverlay === true);
    },

    openDirective() {
      if (this.belowBreakpoint === true) {
        return [QDrawer_objectSpread({}, directiveTemplate, {
          value: this.__openByTouch
        })];
      }
    },

    closeDirective() {
      if (this.belowBreakpoint === true) {
        return [QDrawer_objectSpread({}, directiveTemplate, {
          value: this.__closeByTouch
        })];
      }
    }

  },
  methods: {
    __applyPosition(position) {
      if (position === void 0) {
        this.$nextTick(() => {
          position = this.showing === true ? 0 : this.size;

          this.__applyPosition(this.stateDirection * position);
        });
      } else if (this.$refs.content !== void 0) {
        if (this.layout.container === true && this.rightSide === true && (this.belowBreakpoint === true || Math.abs(position) === this.size)) {
          position += this.stateDirection * this.layout.scrollbarWidth;
        }

        if (this.__lastPosition !== position) {
          this.$refs.content.style.transform = "translateX(".concat(position, "px)");
          this.__lastPosition = position;
        }
      }
    },

    __applyBackdrop(x, retry) {
      if (this.$refs.backdrop !== void 0) {
        this.$refs.backdrop.style.backgroundColor = this.lastBackdropBg = "rgba(0,0,0,".concat(x * 0.4, ")");
      } else {
        // rendered nodes might not have
        // picked up this.showing change yet,
        // so we need one retry
        retry !== true && this.$nextTick(() => {
          this.__applyBackdrop(x, true);
        });
      }
    },

    __setScrollable(v) {
      var action = v === true ? 'remove' : this.layout.container !== true ? 'add' : '';
      action !== '' && document.body.classList[action]('q-body--drawer-toggle');
    },

    __animateMini() {
      if (this.timerMini !== void 0) {
        clearTimeout(this.timerMini);
      } else if (this.$el !== void 0) {
        this.$el.classList.add('q-drawer--mini-animate');
      }

      this.timerMini = setTimeout(() => {
        this.$el !== void 0 && this.$el.classList.remove('q-drawer--mini-animate');
        this.timerMini = void 0;
      }, 150);
    },

    __openByTouch(evt) {
      if (this.showing !== false) {
        // some browsers might capture and trigger this
        // even if Drawer has just been opened (but animation is still pending)
        return;
      }

      var width = this.size,
          position = between(evt.distance.x, 0, width);

      if (evt.isFinal === true) {
        var el = this.$refs.content,
            opened = position >= Math.min(75, width);
        el.classList.remove('no-transition');

        if (opened === true) {
          this.show();
        } else {
          this.layout.__animate();

          this.__applyBackdrop(0);

          this.__applyPosition(this.stateDirection * width);

          el.classList.remove('q-drawer--delimiter');
        }

        return;
      }

      this.__applyPosition((this.$q.lang.rtl === true ? !this.rightSide : this.rightSide) ? Math.max(width - position, 0) : Math.min(0, position - width));

      this.__applyBackdrop(between(position / width, 0, 1));

      if (evt.isFirst === true) {
        var _el = this.$refs.content;

        _el.classList.add('no-transition');

        _el.classList.add('q-drawer--delimiter');
      }
    },

    __closeByTouch(evt) {
      if (this.showing !== true) {
        // some browsers might capture and trigger this
        // even if Drawer has just been closed (but animation is still pending)
        return;
      }

      var width = this.size,
          dir = evt.direction === this.side,
          position = (this.$q.lang.rtl === true ? !dir : dir) ? between(evt.distance.x, 0, width) : 0;

      if (evt.isFinal === true) {
        var opened = Math.abs(position) < Math.min(75, width);
        this.$refs.content.classList.remove('no-transition');

        if (opened === true) {
          this.layout.__animate();

          this.__applyBackdrop(1);

          this.__applyPosition(0);
        } else {
          this.hide();
        }

        return;
      }

      this.__applyPosition(this.stateDirection * position);

      this.__applyBackdrop(between(1 - position / width, 0, 1));

      if (evt.isFirst === true) {
        this.$refs.content.classList.add('no-transition');
      }
    },

    __show(evt, noEvent) {
      this.__addHistory();

      evt !== false && this.layout.__animate();

      this.__applyPosition(0);

      if (this.belowBreakpoint === true) {
        var otherSide = this.layout.instances[this.rightSide === true ? 'left' : 'right'];

        if (otherSide !== void 0 && otherSide.belowBreakpoint === true) {
          otherSide.hide(false);
        }

        this.__applyBackdrop(1);

        this.layout.container !== true && this.__preventScroll(true);
      } else {
        this.__applyBackdrop(0);

        evt !== false && this.__setScrollable(false);
      }

      this.__setTimeout(() => {
        evt !== false && this.__setScrollable(true);
        noEvent !== true && this.$emit('show', evt);
      }, QDrawer_duration);
    },

    __hide(evt, noEvent) {
      this.__removeHistory();

      evt !== false && this.layout.__animate();

      this.__applyBackdrop(0);

      this.__applyPosition(this.stateDirection * this.size);

      this.__cleanup();

      noEvent !== true && this.__setTimeout(() => {
        this.$emit('hide', evt);
      }, QDrawer_duration);
    },

    __cleanup() {
      this.__preventScroll(false);

      this.__setScrollable(true);
    },

    __update(prop, val) {
      if (this.layout[this.side][prop] !== val) {
        this.layout[this.side][prop] = val;
      }
    },

    __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    },

    __updateSizeOnLayout(miniToOverlay, size) {
      this.__update('size', miniToOverlay === true ? this.miniWidth : size);
    }

  },

  created() {
    this.layout.instances[this.side] = this;

    this.__updateSizeOnLayout(this.miniToOverlay, this.size);

    this.__update('space', this.onLayout);

    this.__update('offset', this.offset);

    if (this.showIfAbove === true && this.value !== true && this.showing === true && this.$listeners.input !== void 0) {
      this.$emit('input', true);
    }
  },

  mounted() {
    this.$emit('on-layout', this.onLayout);
    this.$emit('mini-state', this.isMini);

    var fn = () => {
      var action = this.showing === true ? 'show' : 'hide';
      this["__".concat(action)](false, true);
    };

    if (this.layout.totalWidth !== 0) {
      fn();
      return;
    }

    this.watcher = this.$watch('layout.totalWidth', () => {
      this.watcher();
      this.watcher = void 0;

      if (this.showing === false && this.showIfAbove === true && this.belowBreakpoint === false) {
        this.show(false);
      } else {
        fn();
      }
    });
  },

  beforeDestroy() {
    this.watcher !== void 0 && this.watcher();
    clearTimeout(this.timerMini);
    this.showing === true && this.__cleanup();

    if (this.layout.instances[this.side] === this) {
      this.layout.instances[this.side] = void 0;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },

  render(h) {
    var child = [];

    if (this.noSwipeOpen !== true && this.belowBreakpoint === true) {
      child.push(h('div', {
        staticClass: "q-drawer__opener fixed-".concat(this.side),
        directives: this.openDirective
      }));
    }

    this.belowBreakpoint === true && child.push(h('div', {
      ref: 'backdrop',
      staticClass: 'fullscreen q-drawer__backdrop',
      class: this.backdropClass,
      style: this.lastBackdropBg !== void 0 ? {
        backgroundColor: this.lastBackdropBg
      } : null,
      on: cache(this, 'bkdrop', {
        click: this.hide
      }),
      directives: this.noSwipeBackdrop !== true ? this.closeDirective : void 0
    }));
    var content = [h('div', {
      staticClass: 'q-drawer__content fit ' + (this.layout.container === true ? 'overflow-auto' : 'scroll'),
      class: this.contentClass,
      style: this.contentStyle
    }, this.isMini === true && this.$scopedSlots.mini !== void 0 ? this.$scopedSlots.mini() : slot_slot(this, 'default'))];

    if (this.elevated === true && this.showing === true) {
      content.push(h('div', {
        staticClass: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
      }));
    }

    child.push(h('aside', {
      ref: 'content',
      staticClass: "q-drawer",
      class: this.classes,
      style: this.style,
      on: this.onNativeEvents,
      directives: this.noSwipeClose !== true ? this.closeDirective : void 0
    }, content));
    return h('div', {
      staticClass: 'q-drawer-container'
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/drawer/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
var es_array_iterator = __webpack_require__("e260");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
var web_dom_collections_iterator = __webpack_require__("ddb0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
var es_promise = __webpack_require__("e6cf");

// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/validate.js






/* harmony default export */ var validate = ({
  props: {
    value: {},
    error: {
      type: Boolean,
      default: null
    },
    errorMessage: String,
    noErrorIcon: Boolean,
    rules: Array,
    lazyRules: Boolean
  },

  data() {
    return {
      isDirty: false,
      innerError: false,
      innerErrorMessage: void 0
    };
  },

  watch: {
    value(v) {
      if (this.rules === void 0) {
        return;
      }

      if (this.lazyRules === true && this.isDirty === false) {
        return;
      }

      this.validate(v);
    },

    focused(focused) {
      focused === false && this.__triggerValidation();
    }

  },
  computed: {
    hasError() {
      return this.error === true || this.innerError === true;
    },

    computedErrorMessage() {
      return typeof this.errorMessage === 'string' && this.errorMessage.length > 0 ? this.errorMessage : this.innerErrorMessage;
    }

  },

  mounted() {
    this.validateIndex = 0;
    this.focused === void 0 && this.$el.addEventListener('focusout', this.__triggerValidation);
  },

  beforeDestroy() {
    this.focused === void 0 && this.$el.removeEventListener('focusout', this.__triggerValidation);
  },

  methods: {
    resetValidation() {
      this.validateIndex++;
      this.innerLoading = false;
      this.isDirty = false;
      this.innerError = false;
      this.innerErrorMessage = void 0;
    },

    /*
     * Return value
     *   - true (validation succeeded)
     *   - false (validation failed)
     *   - Promise (pending async validation)
     */
    validate() {
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;

      if (!this.rules || this.rules.length === 0) {
        return true;
      }

      this.validateIndex++;

      if (this.innerLoading !== true && this.lazyRules !== true) {
        this.isDirty = true;
      }

      var update = (err, msg) => {
        if (this.innerError !== err) {
          this.innerError = err;
        }

        var m = msg || void 0;

        if (this.innerErrorMessage !== m) {
          this.innerErrorMessage = m;
        }

        if (this.innerLoading !== false) {
          this.innerLoading = false;
        }
      };

      var promises = [];

      for (var i = 0; i < this.rules.length; i++) {
        var rule = this.rules[i];
        var res = void 0;

        if (typeof rule === 'function') {
          res = rule(val);
        } else if (typeof rule === 'string' && testPattern[rule] !== void 0) {
          res = testPattern[rule](val);
        }

        if (res === false || typeof res === 'string') {
          update(true, res);
          return false;
        } else if (res !== true && res !== void 0) {
          promises.push(res);
        }
      }

      if (promises.length === 0) {
        update(false);
        return true;
      }

      if (this.innerLoading !== true) {
        this.innerLoading = true;
      }

      var index = this.validateIndex;
      return Promise.all(promises).then(res => {
        if (index !== this.validateIndex) {
          return true;
        }

        if (res === void 0 || Array.isArray(res) === false || res.length === 0) {
          update(false);
          return true;
        }

        var msg = res.find(r => r === false || typeof r === 'string');
        update(msg !== void 0, msg);
        return msg === void 0;
      }, e => {
        if (index === this.validateIndex) {
          console.error(e);
          update(true);
          return false;
        }

        return true;
      });
    },

    __triggerValidation() {
      if (this.isDirty === false && this.rules !== void 0) {
        this.isDirty = true;
        this.validate(this.value);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/uid.js



function s4() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}

/* harmony default export */ var utils_uid = (function () {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/field/QField.js









function QField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QField_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











function getTargetUid(val) {
  return val === void 0 ? "f_".concat(utils_uid()) : val;
}

/* harmony default export */ var QField = (vue_runtime_esm["a" /* default */].extend({
  name: 'QField',
  mixins: [mixins_dark, validate],
  inheritAttrs: false,
  props: {
    label: String,
    stackLabel: Boolean,
    hint: String,
    hideHint: Boolean,
    prefix: String,
    suffix: String,
    labelColor: String,
    color: String,
    bgColor: String,
    filled: Boolean,
    outlined: Boolean,
    borderless: Boolean,
    standout: [Boolean, String],
    square: Boolean,
    loading: Boolean,
    bottomSlots: Boolean,
    hideBottomSpace: Boolean,
    rounded: Boolean,
    dense: Boolean,
    itemAligned: Boolean,
    counter: Boolean,
    clearable: Boolean,
    clearIcon: String,
    disable: Boolean,
    readonly: Boolean,
    autofocus: Boolean,
    for: [String],
    maxlength: [Number, String],
    maxValues: [Number, String] // private, do not add to JSON; internally needed by QSelect

  },

  data() {
    return {
      focused: false,
      targetUid: getTargetUid(this.for),
      // used internally by validation for QInput
      // or menu handling for QSelect
      innerLoading: false
    };
  },

  watch: {
    for(val) {
      // don't transform targetUid into a computed
      // prop as it will break SSR
      this.targetUid = getTargetUid(val);
    }

  },
  computed: {
    editable() {
      return this.disable !== true && this.readonly !== true;
    },

    hasValue() {
      var value = this.__getControl === void 0 ? this.value : this.innerValue;
      return value !== void 0 && value !== null && ('' + value).length > 0;
    },

    computedCounter() {
      if (this.counter !== false) {
        var len = typeof this.value === 'string' || typeof this.value === 'number' ? ('' + this.value).length : Array.isArray(this.value) === true ? this.value.length : 0;
        var max = this.maxlength !== void 0 ? this.maxlength : this.maxValues;
        return len + (max !== void 0 ? ' / ' + max : '');
      }
    },

    floatingLabel() {
      return this.stackLabel === true || this.focused === true || (this.inputValue !== void 0 && this.hideSelected === true ? this.inputValue.length > 0 : this.hasValue === true) || this.displayValue !== void 0 && this.displayValue !== null && ('' + this.displayValue).length > 0;
    },

    shouldRenderBottom() {
      return this.bottomSlots === true || this.hint !== void 0 || this.rules !== void 0 || this.counter === true || this.error !== null;
    },

    classes() {
      return {
        [this.fieldClass]: this.fieldClass !== void 0,
        ["q-field--".concat(this.styleType)]: true,
        'q-field--rounded': this.rounded,
        'q-field--square': this.square,
        'q-field--focused': this.focused === true || this.hasError === true,
        'q-field--float': this.floatingLabel,
        'q-field--labeled': this.label !== void 0,
        'q-field--dense': this.dense,
        'q-field--item-aligned q-item-type': this.itemAligned,
        'q-field--dark': this.isDark,
        'q-field--auto-height': this.__getControl === void 0,
        'q-field--with-bottom': this.hideBottomSpace !== true && this.shouldRenderBottom === true,
        'q-field--error': this.hasError,
        'q-field--readonly': this.readonly === true && this.disable !== true,
        'q-field--disabled': this.disable
      };
    },

    styleType() {
      if (this.filled === true) {
        return 'filled';
      }

      if (this.outlined === true) {
        return 'outlined';
      }

      if (this.borderless === true) {
        return 'borderless';
      }

      if (this.standout) {
        return 'standout';
      }

      return 'standard';
    },

    contentClass() {
      var cls = [];

      if (this.hasError === true) {
        cls.push('text-negative');
      } else if (typeof this.standout === 'string' && this.standout.length > 0 && this.focused === true) {
        return this.standout;
      } else if (this.color !== void 0) {
        cls.push('text-' + this.color);
      }

      if (this.bgColor !== void 0) {
        cls.push("bg-".concat(this.bgColor));
      }

      return cls;
    },

    labelClass() {
      if (this.labelColor !== void 0 && this.hasError !== true) {
        return 'text-' + this.labelColor;
      }
    },

    controlSlotScope() {
      return {
        id: this.targetUid,
        field: this.$el,
        editable: this.editable,
        focused: this.focused,
        floatingLabel: this.floatingLabel,
        value: this.value,
        emitValue: this.__emitValue
      };
    }

  },
  methods: {
    focus() {
      if (this.showPopup !== void 0 && this.hasDialog === true) {
        this.showPopup();
        return;
      }

      this.__focus();
    },

    blur() {
      var el = document.activeElement; // IE can have null document.activeElement

      if (el !== null && this.$el.contains(el)) {
        el.blur();
      }
    },

    __focus() {
      var el = document.activeElement;
      var target = this.$refs.target; // IE can have null document.activeElement

      if (target !== void 0 && (el === null || el.id !== this.targetUid)) {
        target.hasAttribute('tabindex') === true || (target = target.querySelector('[tabindex]'));
        target !== null && target !== el && target.focus();
      }
    },

    __getContent(h) {
      var node = [];
      this.$scopedSlots.prepend !== void 0 && node.push(h('div', {
        staticClass: 'q-field__prepend q-field__marginal row no-wrap items-center',
        key: 'prepend',
        on: this.slotsEvents
      }, this.$scopedSlots.prepend()));
      node.push(h('div', {
        staticClass: 'q-field__control-container col relative-position row no-wrap q-anchor--skip'
      }, this.__getControlContainer(h)));
      this.$scopedSlots.append !== void 0 && node.push(h('div', {
        staticClass: 'q-field__append q-field__marginal row no-wrap items-center',
        key: 'append',
        on: this.slotsEvents
      }, this.$scopedSlots.append()));
      this.hasError === true && this.noErrorIcon === false && node.push(this.__getInnerAppendNode(h, 'error', [h(QIcon, {
        props: {
          name: this.$q.iconSet.field.error,
          color: 'negative'
        }
      })]));

      if (this.loading === true || this.innerLoading === true) {
        node.push(this.__getInnerAppendNode(h, 'inner-loading-append', this.$scopedSlots.loading !== void 0 ? this.$scopedSlots.loading() : [h(QSpinner, {
          props: {
            color: this.color
          }
        })]));
      } else if (this.clearable === true && this.hasValue === true && this.editable === true) {
        node.push(this.__getInnerAppendNode(h, 'inner-clearable-append', [h(QIcon, {
          staticClass: 'cursor-pointer',
          props: {
            name: this.clearIcon || this.$q.iconSet.field.clear
          },
          on: this.clearableEvents
        })]));
      }

      this.__getInnerAppend !== void 0 && node.push(this.__getInnerAppendNode(h, 'inner-append', this.__getInnerAppend(h)));
      this.__getPopup !== void 0 && node.push(this.__getPopup(h));
      return node;
    },

    __getControlContainer(h) {
      var node = [];
      this.prefix !== void 0 && this.prefix !== null && node.push(h('div', {
        staticClass: 'q-field__prefix no-pointer-events row items-center'
      }, [this.prefix]));

      if (this.__getControl !== void 0) {
        node.push(this.__getControl(h));
      } // internal usage only:
      else if (this.$scopedSlots.rawControl !== void 0) {
          node.push(this.$scopedSlots.rawControl());
        } else if (this.$scopedSlots.control !== void 0) {
          node.push(h('div', {
            ref: 'target',
            staticClass: 'q-field__native row',
            attrs: QField_objectSpread({}, this.$attrs, {
              'data-autofocus': this.autofocus
            })
          }, this.$scopedSlots.control(this.controlSlotScope)));
        }

      this.label !== void 0 && node.push(h('div', {
        staticClass: 'q-field__label no-pointer-events absolute ellipsis',
        class: this.labelClass
      }, [this.label]));
      this.suffix !== void 0 && this.suffix !== null && node.push(h('div', {
        staticClass: 'q-field__suffix no-pointer-events row items-center'
      }, [this.suffix]));
      return node.concat(this.__getDefaultSlot !== void 0 ? this.__getDefaultSlot(h) : slot_slot(this, 'default'));
    },

    __getBottom(h) {
      var msg, key;

      if (this.hasError === true) {
        if (this.computedErrorMessage !== void 0) {
          msg = [h('div', [this.computedErrorMessage])];
          key = this.computedErrorMessage;
        } else {
          msg = slot_slot(this, 'error');
          key = 'q--slot-error';
        }
      } else if (this.hideHint !== true || this.focused === true) {
        if (this.hint !== void 0) {
          msg = [h('div', [this.hint])];
          key = this.hint;
        } else {
          msg = slot_slot(this, 'hint');
          key = 'q--slot-hint';
        }
      }

      var hasCounter = this.counter === true || this.$scopedSlots.counter !== void 0;

      if (this.hideBottomSpace === true && hasCounter === false && msg === void 0) {
        return;
      }

      var main = h('div', {
        key,
        staticClass: 'q-field__messages col'
      }, msg);
      return h('div', {
        staticClass: 'q-field__bottom row items-start q-field__bottom--' + (this.hideBottomSpace !== true ? 'animated' : 'stale')
      }, [this.hideBottomSpace === true ? main : h('transition', {
        props: {
          name: 'q-transition--field-message'
        }
      }, [main]), hasCounter === true ? h('div', {
        staticClass: 'q-field__counter'
      }, this.$scopedSlots.counter !== void 0 ? this.$scopedSlots.counter() : [this.computedCounter]) : null]);
    },

    __getInnerAppendNode(h, key, content) {
      return content === null ? null : h('div', {
        staticClass: 'q-field__append q-field__marginal row no-wrap items-center q-anchor--skip',
        key
      }, content);
    },

    __onControlPopupShow(e) {
      e !== void 0 && event_stop(e);
      this.$emit('popup-show', e);
      this.hasPopupOpen = true;

      this.__onControlFocusin(e);
    },

    __onControlPopupHide(e) {
      e !== void 0 && event_stop(e);
      this.$emit('popup-hide', e);
      this.hasPopupOpen = false;

      this.__onControlFocusout(e);
    },

    __onControlFocusin(e) {
      if (this.editable === true && this.focused === false) {
        this.focused = true;
        this.$emit('focus', e);
      }
    },

    __onControlFocusout(e, then) {
      clearTimeout(this.focusoutTimer);
      this.focusoutTimer = setTimeout(() => {
        if (document.hasFocus() === true && (this.hasPopupOpen === true || this.$refs === void 0 || this.$refs.control === void 0 || this.$refs.control.contains(document.activeElement) !== false)) {
          return;
        }

        if (this.focused === true) {
          this.focused = false;
          this.$emit('blur', e);
        }

        then !== void 0 && then();
      });
    },

    __clearValue(e) {
      event_stop(e);

      if (this.type === 'file') {
        // do not let focus be triggered
        // as it will make the native file dialog
        // appear for another selection
        prevent(e);
        this.$refs.input.value = null;
      }

      this.$emit('input', null);
      this.$emit('clear', this.value);
    },

    __emitValue(value) {
      this.$emit('input', value);
    }

  },

  render(h) {
    this.__onPreRender !== void 0 && this.__onPreRender();
    this.__onPostRender !== void 0 && this.$nextTick(this.__onPostRender);
    return h('label', {
      staticClass: 'q-field row no-wrap items-start',
      class: this.classes,
      attrs: {
        for: this.targetUid
      }
    }, [this.$scopedSlots.before !== void 0 ? h('div', {
      staticClass: 'q-field__before q-field__marginal row no-wrap items-center',
      on: this.slotsEvents
    }, this.$scopedSlots.before()) : null, h('div', {
      staticClass: 'q-field__inner relative-position col self-stretch column justify-center'
    }, [h('div', {
      ref: 'control',
      staticClass: 'q-field__control relative-position row no-wrap',
      class: this.contentClass,
      attrs: {
        tabindex: -1
      },
      on: this.controlEvents
    }, this.__getContent(h)), this.shouldRenderBottom === true ? this.__getBottom(h) : null]), this.$scopedSlots.after !== void 0 ? h('div', {
      staticClass: 'q-field__after q-field__marginal row no-wrap items-center',
      on: this.slotsEvents
    }, this.$scopedSlots.after()) : null]);
  },

  created() {
    this.__onPreRender !== void 0 && this.__onPreRender();
    this.slotsEvents = {
      click: prevent
    };
    this.clearableEvents = {
      click: this.__clearValue
    };
    this.controlEvents = this.__getControlEvents !== void 0 ? this.__getControlEvents() : {
      focusin: this.__onControlFocusin,
      focusout: this.__onControlFocusout,
      'popup-show': this.__onControlPopupShow,
      'popup-hide': this.__onControlPopupHide
    };
  },

  mounted() {
    if (fromSSR === true && this.for === void 0) {
      this.targetUid = getTargetUid();
    }

    this.autofocus === true && this.focus();
  },

  beforeDestroy() {
    clearTimeout(this.focusoutTimer);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/mask.js












 // leave NAMED_MASKS at top of file (code referenced from docs)

var NAMED_MASKS = {
  date: '####/##/##',
  datetime: '####/##/## ##:##',
  time: '##:##',
  fulltime: '##:##:##',
  phone: '(###) ### - ####',
  card: '#### #### #### ####'
};
var TOKENS = {
  '#': {
    pattern: '[\\d]',
    negate: '[^\\d]'
  },
  S: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]'
  },
  N: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]'
  },
  A: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]',
    transform: v => v.toLocaleUpperCase()
  },
  a: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]',
    transform: v => v.toLocaleLowerCase()
  },
  X: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]',
    transform: v => v.toLocaleUpperCase()
  },
  x: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]',
    transform: v => v.toLocaleLowerCase()
  }
};
var KEYS = Object.keys(TOKENS);
KEYS.forEach(key => {
  TOKENS[key].regex = new RegExp(TOKENS[key].pattern);
});
var tokenRegexMask = new RegExp('\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|([' + KEYS.join('') + '])|(.)', 'g'),
    escRegex = /[.*+?^${}()|[\]\\]/g;
var MARKER = String.fromCharCode(1);
/* harmony default export */ var mixins_mask = ({
  props: {
    mask: String,
    reverseFillMask: Boolean,
    fillMask: [Boolean, String],
    unmaskedValue: Boolean
  },
  watch: {
    type() {
      this.__updateMaskInternals();
    },

    mask(v) {
      if (v !== void 0) {
        this.__updateMaskValue(this.innerValue, true);
      } else {
        var val = this.__unmask(this.innerValue);

        this.__updateMaskInternals();

        this.value !== val && this.$emit('input', val);
      }
    },

    fillMask() {
      this.hasMask === true && this.__updateMaskValue(this.innerValue, true);
    },

    reverseFillMask() {
      this.hasMask === true && this.__updateMaskValue(this.innerValue, true);
    },

    unmaskedValue() {
      this.hasMask === true && this.__updateMaskValue(this.innerValue);
    }

  },
  methods: {
    __getInitialMaskedValue() {
      this.__updateMaskInternals();

      if (this.hasMask === true) {
        var masked = this.__mask(this.__unmask(this.value));

        return this.fillMask !== false ? this.__fillWithMask(masked) : masked;
      }

      return this.value;
    },

    __getPaddedMaskMarked(size) {
      if (size < this.maskMarked.length) {
        return this.maskMarked.slice(-size);
      }

      var maskMarked = this.maskMarked,
          padPos = maskMarked.indexOf(MARKER),
          pad = '';

      if (padPos > -1) {
        for (var i = size - maskMarked.length; i > 0; i--) {
          pad += MARKER;
        }

        maskMarked = maskMarked.slice(0, padPos) + pad + maskMarked.slice(padPos);
      }

      return maskMarked;
    },

    __updateMaskInternals() {
      this.hasMask = this.mask !== void 0 && this.mask.length > 0 && ['text', 'search', 'url', 'tel', 'password'].includes(this.type);

      if (this.hasMask === false) {
        this.computedUnmask = void 0;
        this.maskMarked = '';
        this.maskReplaced = '';
        return;
      }

      var computedMask = NAMED_MASKS[this.mask] === void 0 ? this.mask : NAMED_MASKS[this.mask],
          fillChar = typeof this.fillMask === 'string' && this.fillMask.length > 0 ? this.fillMask.slice(0, 1) : '_',
          fillCharEscaped = fillChar.replace(escRegex, '\\$&'),
          unmask = [],
          extract = [],
          mask = [];
      var firstMatch = this.reverseFillMask === true,
          unmaskChar = '',
          negateChar = '';
      computedMask.replace(tokenRegexMask, (_, char1, esc, token, char2) => {
        if (token !== void 0) {
          var c = TOKENS[token];
          mask.push(c);
          negateChar = c.negate;

          if (firstMatch === true) {
            extract.push('(?:' + negateChar + '+)?(' + c.pattern + '+)?(?:' + negateChar + '+)?(' + c.pattern + '+)?');
            firstMatch = false;
          }

          extract.push('(?:' + negateChar + '+)?(' + c.pattern + ')?');
        } else if (esc !== void 0) {
          unmaskChar = '\\' + (esc === '\\' ? '' : esc);
          mask.push(esc);
          unmask.push('([^' + unmaskChar + ']+)?' + unmaskChar + '?');
        } else {
          var _c = char1 !== void 0 ? char1 : char2;

          unmaskChar = _c === '\\' ? '\\\\\\\\' : _c.replace(escRegex, '\\\\$&');
          mask.push(_c);
          unmask.push('([^' + unmaskChar + ']+)?' + unmaskChar + '?');
        }
      });
      var unmaskMatcher = new RegExp('^' + unmask.join('') + '(' + (unmaskChar === '' ? '.' : '[^' + unmaskChar + ']') + '+)?' + '$'),
          extractLast = extract.length - 1,
          extractMatcher = extract.map((re, index) => {
        if (index === 0 && this.reverseFillMask === true) {
          return new RegExp('^' + fillCharEscaped + '*' + re);
        } else if (index === extractLast) {
          return new RegExp('^' + re + '(' + (negateChar === '' ? '.' : negateChar) + '+)?' + (this.reverseFillMask === true ? '$' : fillCharEscaped + '*'));
        }

        return new RegExp('^' + re);
      });
      this.computedMask = mask;

      this.computedUnmask = val => {
        var unmaskMatch = unmaskMatcher.exec(val);

        if (unmaskMatch !== null) {
          val = unmaskMatch.slice(1).join('');
        }

        var extractMatch = [],
            extractMatcherLength = extractMatcher.length;

        for (var i = 0, str = val; i < extractMatcherLength; i++) {
          var m = extractMatcher[i].exec(str);

          if (m === null) {
            break;
          }

          str = str.slice(m.shift().length);
          extractMatch.push(...m);
        }

        if (extractMatch.length > 0) {
          return extractMatch.join('');
        }

        return val;
      };

      this.maskMarked = mask.map(v => typeof v === 'string' ? v : MARKER).join('');
      this.maskReplaced = this.maskMarked.split(MARKER).join(fillChar);
    },

    __updateMaskValue(rawVal, updateMaskInternals, inputType) {
      var inp = this.$refs.input,
          end = inp.selectionEnd,
          endReverse = inp.value.length - end,
          unmasked = this.__unmask(rawVal); // Update here so unmask uses the original fillChar


      updateMaskInternals === true && this.__updateMaskInternals();

      var preMasked = this.__mask(unmasked),
          masked = this.fillMask !== false ? this.__fillWithMask(preMasked) : preMasked,
          changed = this.innerValue !== masked; // We want to avoid "flickering" so we set value immediately


      inp.value !== masked && (inp.value = masked);
      changed === true && (this.innerValue = masked);
      this.$nextTick(() => {
        if (masked === this.maskReplaced) {
          var cursor = this.reverseFillMask === true ? this.maskReplaced.length : 0;
          inp.setSelectionRange(cursor, cursor, 'forward');
          return;
        }

        if (inputType === 'insertFromPaste' && this.reverseFillMask !== true) {
          var _cursor = end - 1;

          this.__moveCursorRight(inp, _cursor, _cursor);

          return;
        }

        if (['deleteContentBackward', 'deleteContentForward'].indexOf(inputType) > -1) {
          var _cursor2 = this.reverseFillMask === true ? Math.max(0, masked.length - (masked === this.maskReplaced ? 0 : Math.min(preMasked.length, endReverse) + 1)) + 1 : end;

          inp.setSelectionRange(_cursor2, _cursor2, 'forward');
          return;
        }

        if (this.reverseFillMask === true) {
          if (changed === true) {
            var _cursor3 = Math.max(0, masked.length - (masked === this.maskReplaced ? 0 : Math.min(preMasked.length, endReverse + 1)));

            this.__moveCursorRightReverse(inp, _cursor3, _cursor3);
          } else {
            var _cursor4 = masked.length - endReverse;

            inp.setSelectionRange(_cursor4, _cursor4, 'backward');
          }
        } else {
          if (changed === true) {
            var _cursor5 = Math.max(0, this.maskMarked.indexOf(MARKER), Math.min(preMasked.length, end) - 1);

            this.__moveCursorRight(inp, _cursor5, _cursor5);
          } else {
            var _cursor6 = end - 1;

            this.__moveCursorRight(inp, _cursor6, _cursor6);
          }
        }
      });
      var val = this.unmaskedValue === true ? this.__unmask(masked) : masked;
      this.value !== val && this.__emitValue(val, true);
    },

    __moveCursorForPaste(inp, start, end) {
      var preMasked = this.__mask(this.__unmask(inp.value));

      start = Math.max(0, this.maskMarked.indexOf(MARKER), Math.min(preMasked.length, start));
      inp.setSelectionRange(start, end, 'forward');
    },

    __moveCursorLeft(inp, start, end, selection) {
      var noMarkBefore = this.maskMarked.slice(start - 1).indexOf(MARKER) === -1;
      var i = Math.max(0, start - 1);

      for (; i >= 0; i--) {
        if (this.maskMarked[i] === MARKER) {
          start = i;
          noMarkBefore === true && start++;
          break;
        }
      }

      if (i < 0 && this.maskMarked[start] !== void 0 && this.maskMarked[start] !== MARKER) {
        return this.__moveCursorRight(inp, 0, 0);
      }

      start >= 0 && inp.setSelectionRange(start, selection === true ? end : start, 'backward');
    },

    __moveCursorRight(inp, start, end, selection) {
      var limit = inp.value.length;
      var i = Math.min(limit, end + 1);

      for (; i <= limit; i++) {
        if (this.maskMarked[i] === MARKER) {
          end = i;
          break;
        } else if (this.maskMarked[i - 1] === MARKER) {
          end = i;
        }
      }

      if (i > limit && this.maskMarked[end - 1] !== void 0 && this.maskMarked[end - 1] !== MARKER) {
        return this.__moveCursorLeft(inp, limit, limit);
      }

      inp.setSelectionRange(selection ? start : end, end, 'forward');
    },

    __moveCursorLeftReverse(inp, start, end, selection) {
      var maskMarked = this.__getPaddedMaskMarked(inp.value.length);

      var i = Math.max(0, start - 1);

      for (; i >= 0; i--) {
        if (maskMarked[i - 1] === MARKER) {
          start = i;
          break;
        } else if (maskMarked[i] === MARKER) {
          start = i;

          if (i === 0) {
            break;
          }
        }
      }

      if (i < 0 && maskMarked[start] !== void 0 && maskMarked[start] !== MARKER) {
        return this.__moveCursorRightReverse(inp, 0, 0);
      }

      start >= 0 && inp.setSelectionRange(start, selection === true ? end : start, 'backward');
    },

    __moveCursorRightReverse(inp, start, end, selection) {
      var limit = inp.value.length,
          maskMarked = this.__getPaddedMaskMarked(limit),
          noMarkBefore = maskMarked.slice(0, end + 1).indexOf(MARKER) === -1;

      var i = Math.min(limit, end + 1);

      for (; i <= limit; i++) {
        if (maskMarked[i - 1] === MARKER) {
          end = i;
          end > 0 && noMarkBefore === true && end--;
          break;
        }
      }

      if (i > limit && maskMarked[end - 1] !== void 0 && maskMarked[end - 1] !== MARKER) {
        return this.__moveCursorLeftReverse(inp, limit, limit);
      }

      inp.setSelectionRange(selection === true ? start : end, end, 'forward');
    },

    __onMaskedKeydown(e) {
      if (shouldIgnoreKey(e) === true) {
        return;
      }

      var inp = this.$refs.input,
          start = inp.selectionStart,
          end = inp.selectionEnd;

      if (e.keyCode === 37 || e.keyCode === 39) {
        // Left / Right
        var fn = this['__moveCursor' + (e.keyCode === 39 ? 'Right' : 'Left') + (this.reverseFillMask === true ? 'Reverse' : '')];
        e.preventDefault();
        fn(inp, start, end, e.shiftKey);
      } else if (e.keyCode === 8 && // Backspace
      this.reverseFillMask !== true && start === end) {
        this.__moveCursorLeft(inp, start, end, true);
      } else if (e.keyCode === 46 && // Delete
      this.reverseFillMask === true && start === end) {
        this.__moveCursorRightReverse(inp, start, end, true);
      }

      this.$emit('keydown', e);
    },

    __mask(val) {
      if (val === void 0 || val === null || val === '') {
        return '';
      }

      if (this.reverseFillMask === true) {
        return this.__maskReverse(val);
      }

      var mask = this.computedMask;
      var valIndex = 0,
          output = '';

      for (var maskIndex = 0; maskIndex < mask.length; maskIndex++) {
        var valChar = val[valIndex],
            maskDef = mask[maskIndex];

        if (typeof maskDef === 'string') {
          output += maskDef;
          valChar === maskDef && valIndex++;
        } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
          output += maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar;
          valIndex++;
        } else {
          return output;
        }
      }

      return output;
    },

    __maskReverse(val) {
      var mask = this.computedMask,
          firstTokenIndex = this.maskMarked.indexOf(MARKER);
      var valIndex = val.length - 1,
          output = '';

      for (var maskIndex = mask.length - 1; maskIndex >= 0; maskIndex--) {
        var maskDef = mask[maskIndex];
        var valChar = val[valIndex];

        if (typeof maskDef === 'string') {
          output = maskDef + output;
          valChar === maskDef && valIndex--;
        } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
          do {
            output = (maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar) + output;
            valIndex--;
            valChar = val[valIndex]; // eslint-disable-next-line no-unmodified-loop-condition
          } while (firstTokenIndex === maskIndex && valChar !== void 0 && maskDef.regex.test(valChar));
        } else {
          return output;
        }
      }

      return output;
    },

    __unmask(val) {
      return typeof val !== 'string' || this.computedUnmask === void 0 ? typeof val === 'number' ? this.computedUnmask('' + val) : val : this.computedUnmask(val);
    },

    __fillWithMask(val) {
      if (this.maskReplaced.length - val.length <= 0) {
        return val;
      }

      return this.reverseFillMask === true && val.length > 0 ? this.maskReplaced.slice(0, -val.length) + val : val + this.maskReplaced.slice(val.length);
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/composition.js
var isJapanese = /[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/;
var isChinese = /(?:[\u3300-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF\uFE30-\uFE4F]|[\uD840-\uD868\uD86A-\uD872][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD873[\uDC00-\uDEAF]|\uD87E[\uDC00-\uDE1F])/;
var isKorean = /[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;
/* harmony default export */ var composition = ({
  methods: {
    __onComposition(e) {
      if (e.type === 'compositionend' || e.type === 'change') {
        if (e.target.composing !== true) {
          return;
        }

        e.target.composing = false;

        this.__onInput(e);
      } else if (e.type === 'compositionupdate') {
        if (typeof e.data === 'string' && isJapanese.test(e.data) === false && isChinese.test(e.data) === false && isKorean.test(e.data) === false) {
          e.target.composing = false;
        }
      } else {
        e.target.composing = true;
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/input/QInput.js








function QInput_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QInput_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QInput_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QInput_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







/* harmony default export */ var QInput = (vue_runtime_esm["a" /* default */].extend({
  name: 'QInput',
  mixins: [QField, mixins_mask, composition],
  props: {
    value: {
      required: false
    },
    type: {
      type: String,
      default: 'text'
    },
    debounce: [String, Number],
    autogrow: Boolean,
    // makes a textarea
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object]
  },
  watch: {
    value(v) {
      if (this.hasMask === true) {
        if (this.stopValueWatcher === true) {
          this.stopValueWatcher = false;
          return;
        }

        this.__updateMaskValue(v);
      } else if (this.innerValue !== v) {
        this.innerValue = v;

        if (this.type === 'number' && this.hasOwnProperty('tempValue') === true) {
          if (this.typedNumber === true) {
            this.typedNumber = false;
          } else {
            delete this.tempValue;
          }
        }
      } // textarea only


      this.autogrow === true && this.$nextTick(this.__adjustHeightDebounce);
    },

    autogrow(autogrow) {
      // textarea only
      if (autogrow === true) {
        this.$nextTick(this.__adjustHeightDebounce);
      } // if it has a number of rows set respect it
      else if (this.$attrs.rows > 0 && this.$refs.input !== void 0) {
          var inp = this.$refs.input;
          inp.style.height = 'auto';
        }
    },

    dense() {
      this.autogrow === true && this.$nextTick(this.__adjustHeight);
    }

  },

  data() {
    return {
      innerValue: this.__getInitialMaskedValue()
    };
  },

  computed: {
    isTextarea() {
      return this.type === 'textarea' || this.autogrow === true;
    },

    fieldClass() {
      return "q-".concat(this.isTextarea === true ? 'textarea' : 'input') + (this.autogrow === true ? ' q-textarea--autogrow' : '');
    }

  },
  methods: {
    focus() {
      var el = document.activeElement;

      if (this.$refs.input !== void 0 && this.$refs.input !== el && ( // IE can have null document.activeElement
      el === null || el.id !== this.targetUid)) {
        this.$refs.input.focus();
      }
    },

    select() {
      this.$refs.input !== void 0 && this.$refs.input.select();
    },

    __onPaste(e) {
      if (this.hasMask === true && this.reverseFillMask !== true) {
        var inp = e.target;

        this.__moveCursorForPaste(inp, inp.selectionStart, inp.selectionEnd);
      }
    },

    __onInput(e) {
      if (e && e.target && e.target.composing === true) {
        return;
      }

      if (this.type === 'file') {
        this.$emit('input', e.target.files);
        return;
      }

      var val = e.target.value;

      if (this.hasMask === true) {
        this.__updateMaskValue(val, false, e.inputType);
      } else {
        this.__emitValue(val);
      } // we need to trigger it immediately too,
      // to avoid "flickering"


      this.autogrow === true && this.__adjustHeight();
    },

    __emitValue(val, stopWatcher) {
      this.emitValueFn = () => {
        if (this.type !== 'number' && this.hasOwnProperty('tempValue') === true) {
          delete this.tempValue;
        }

        if (this.value !== val) {
          stopWatcher === true && (this.stopValueWatcher = true);
          this.$emit('input', val);
        }

        this.emitValueFn = void 0;
      };

      if (this.type === 'number') {
        this.typedNumber = true;
        this.tempValue = val;
      }

      if (this.debounce !== void 0) {
        clearTimeout(this.emitTimer);
        this.tempValue = val;
        this.emitTimer = setTimeout(this.emitValueFn, this.debounce);
      } else {
        this.emitValueFn();
      }
    },

    // textarea only
    __adjustHeight() {
      var inp = this.$refs.input;

      if (inp !== void 0) {
        var parentStyle = inp.parentNode.style; // reset height of textarea to a small size to detect the real height
        // but keep the total control size the same

        parentStyle.marginBottom = inp.scrollHeight - 1 + 'px';
        inp.style.height = '1px';
        inp.style.height = inp.scrollHeight + 'px';
        parentStyle.marginBottom = '';
      }
    },

    __onChange(e) {
      this.__onComposition(e);

      clearTimeout(this.emitTimer);
      this.emitValueFn !== void 0 && this.emitValueFn();
      this.$emit('change', e);
    },

    __onFinishEditing(e) {
      e !== void 0 && event_stop(e);
      clearTimeout(this.emitTimer);
      this.emitValueFn !== void 0 && this.emitValueFn();
      this.typedNumber = false;
      this.stopValueWatcher = false;
      delete this.tempValue;
      this.type !== 'file' && this.$nextTick(() => {
        if (this.$refs.input !== void 0) {
          this.$refs.input.value = this.innerValue !== void 0 ? this.innerValue : '';
        }
      });
    },

    __getControl(h) {
      var on = QInput_objectSpread({}, this.$listeners, {
        input: this.__onInput,
        paste: this.__onPaste,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        change: this.__onChange,
        blur: this.__onFinishEditing,
        focus: event_stop
      });

      on.compositionstart = on.compositionupdate = on.compositionend = this.__onComposition;

      if (this.hasMask === true) {
        on.keydown = this.__onMaskedKeydown;
      }

      var attrs = QInput_objectSpread({
        tabindex: 0,
        'data-autofocus': this.autofocus,
        rows: this.type === 'textarea' ? 6 : void 0,
        'aria-label': this.label
      }, this.$attrs, {
        id: this.targetUid,
        type: this.type,
        maxlength: this.maxlength,
        disabled: this.disable === true,
        readonly: this.readonly === true
      });

      if (this.autogrow === true) {
        attrs.rows = 1;
      }

      return h(this.isTextarea === true ? 'textarea' : 'input', {
        ref: 'input',
        staticClass: 'q-field__native q-placeholder',
        style: this.inputStyle,
        class: this.inputClass,
        attrs,
        on,
        domProps: this.type !== 'file' ? {
          value: this.hasOwnProperty('tempValue') === true ? this.tempValue : this.innerValue !== void 0 ? this.innerValue : ''
        } : null
      });
    }

  },

  created() {
    // textarea only
    this.__adjustHeightDebounce = debounce(this.__adjustHeight, 100);
  },

  mounted() {
    // textarea only
    this.autogrow === true && this.__adjustHeight();
  },

  beforeDestroy() {
    this.__onFinishEditing();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tooltip/QTooltip.js












/* harmony default export */ var QTooltip = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTooltip',
  mixins: [mixins_anchor, model_toggle, portal, transition],
  props: {
    maxHeight: {
      type: String,
      default: null
    },
    maxWidth: {
      type: String,
      default: null
    },
    transitionShow: {
      default: 'jump-down'
    },
    transitionHide: {
      default: 'jump-up'
    },
    anchor: {
      type: String,
      default: 'bottom middle',
      validator: validatePosition
    },
    self: {
      type: String,
      default: 'top middle',
      validator: validatePosition
    },
    offset: {
      type: Array,
      default: () => [14, 14],
      validator: validateOffset
    },
    delay: {
      type: Number,
      default: 0
    }
  },
  computed: {
    anchorOrigin() {
      return parsePosition(this.anchor);
    },

    selfOrigin() {
      return parsePosition(this.self);
    },

    hideOnRouteChange() {
      return this.persistent !== true;
    }

  },
  methods: {
    __show(evt) {
      this.__showPortal();

      this.__nextTick(() => {
        this.updatePosition();

        this.__configureScrollTarget();
      });

      this.__setTimeout(() => {
        this.$emit('show', evt);
      }, 300);
    },

    __hide(evt) {
      this.__anchorCleanup();

      this.__setTimeout(() => {
        this.__hidePortal();

        this.$emit('hide', evt);
      }, 300);
    },

    __anchorCleanup() {
      this.__unconfigureScrollTarget();

      cleanEvt(this, 'tooltipTemp');
    },

    updatePosition() {
      if (this.anchorEl === void 0 || this.__portal === void 0) {
        return;
      }

      var el = this.__portal.$el;

      if (el.nodeType === 8) {
        // IE replaces the comment with delay
        setTimeout(this.updatePosition, 25);
        return;
      }

      setPosition({
        el,
        offset: this.offset,
        anchorEl: this.anchorEl,
        anchorOrigin: this.anchorOrigin,
        selfOrigin: this.selfOrigin,
        maxHeight: this.maxHeight,
        maxWidth: this.maxWidth
      });
    },

    __delayShow(evt) {
      if (this.$q.platform.is.mobile === true) {
        clearSelection();
        document.body.classList.add('non-selectable');
        var target = getTouchTarget(this.anchorEl);
        var evts = ['touchmove', 'touchcancel', 'touchend', 'click'].map(e => [target, e, '__delayHide', 'passiveCapture']);
        addEvt(this, 'tooltipTemp', evts);
      }

      this.__setTimeout(() => {
        this.show(evt);
      }, this.delay);
    },

    __delayHide(evt) {
      this.__clearTimeout();

      if (this.$q.platform.is.mobile === true) {
        cleanEvt(this, 'tooltipTemp');
        clearSelection(); // delay needed otherwise selection still occurs

        setTimeout(() => {
          document.body.classList.remove('non-selectable');
        }, 10);
      }

      this.hide(evt);
    },

    __configureAnchorEl() {
      if (this.noParentEvent === true || this.anchorEl === void 0) {
        return;
      }

      var evts = this.$q.platform.is.mobile === true ? [[this.anchorEl, 'touchstart', '__delayShow', 'passive']] : [[this.anchorEl, 'mouseenter', '__delayShow', 'passive'], [this.anchorEl, 'mouseleave', '__delayHide', 'passive']];
      addEvt(this, 'anchor', evts);
    },

    __unconfigureScrollTarget() {
      if (this.scrollTarget !== void 0) {
        this.__changeScrollEvent(this.scrollTarget);

        this.scrollTarget = void 0;
      }
    },

    __configureScrollTarget() {
      if (this.anchorEl !== void 0) {
        this.scrollTarget = getScrollTarget(this.anchorEl);
        var fn = this.noParentEvent === true ? this.updatePosition : this.hide;

        this.__changeScrollEvent(this.scrollTarget, fn);
      }
    },

    __renderPortal(h) {
      return h('transition', {
        props: {
          name: this.transition
        }
      }, [this.showing === true ? h('div', {
        staticClass: 'q-tooltip no-pointer-events',
        class: this.contentClass,
        style: this.contentStyle,
        attrs: {
          role: 'complementary'
        }
      }, slot_slot(this, 'default')) : null]);
    }

  },

  mounted() {
    this.__processModelChange(this.value);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/item/QList.js



/* harmony default export */ var QList = (vue_runtime_esm["a" /* default */].extend({
  name: 'QList',
  mixins: [mixins_dark],
  props: {
    bordered: Boolean,
    dense: Boolean,
    separator: Boolean,
    padding: Boolean
  },
  computed: {
    classes() {
      return 'q-list' + (this.bordered === true ? ' q-list--bordered' : '') + (this.dense === true ? ' q-list--dense' : '') + (this.separator === true ? ' q-list--separator' : '') + (this.isDark === true ? ' q-list--dark' : '') + (this.padding === true ? ' q-list--padding' : '');
    }

  },

  render(h) {
    return h('div', {
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/item/QItem.js








function QItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QItem_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







/* harmony default export */ var QItem = (vue_runtime_esm["a" /* default */].extend({
  name: 'QItem',
  mixins: [mixins_dark, RouterLinkMixin],
  props: {
    active: Boolean,
    clickable: Boolean,
    dense: Boolean,
    insetLevel: Number,
    tabindex: [String, Number],
    tag: {
      type: String,
      default: 'div'
    },
    focused: Boolean,
    manualFocus: Boolean
  },
  computed: {
    isClickable() {
      return this.disable !== true && (this.clickable === true || this.hasRouterLink === true || this.tag === 'a' || this.tag === 'label');
    },

    classes() {
      return {
        'q-item--clickable q-link cursor-pointer': this.isClickable,
        'q-focusable q-hoverable': this.isClickable === true && this.manualFocus === false,
        'q-manual-focusable': this.isClickable === true && this.manualFocus === true,
        'q-manual-focusable--focused': this.isClickable === true && this.focused === true,
        'q-item--dense': this.dense,
        'q-item--dark': this.isDark,
        'q-item--active': this.active,
        [this.activeClass]: this.active === true && this.hasRouterLink !== true && this.activeClass !== void 0,
        'disabled': this.disable
      };
    },

    style() {
      if (this.insetLevel !== void 0) {
        var dir = this.$q.lang.rtl === true ? 'Right' : 'Left';
        return {
          ['padding' + dir]: 16 + this.insetLevel * 56 + 'px'
        };
      }
    }

  },
  methods: {
    __getContent(h) {
      var child = uniqueSlot(this, 'default', []);
      this.isClickable === true && child.unshift(h('div', {
        staticClass: 'q-focus-helper',
        attrs: {
          tabindex: -1
        },
        ref: 'blurTarget'
      }));
      return child;
    },

    __onClick(e) {
      if (this.isClickable === true) {
        if (this.$refs.blurTarget !== void 0) {
          if (e.qKeyEvent !== true && document.activeElement === this.$el) {
            this.$refs.blurTarget.focus();
          } else if (document.activeElement === this.$refs.blurTarget) {
            this.$el.focus();
          }
        }

        this.$emit('click', e);
      }
    },

    __onKeyup(e) {
      if (this.isClickable === true && isKeyCode(e, 13) === true) {
        stopAndPrevent(e); // for ripple

        e.qKeyEvent = true; // for click trigger

        var evt = new MouseEvent('click', e);
        evt.qKeyEvent = true;
        this.$el.dispatchEvent(evt);
      }

      this.$emit('keyup', e);
    }

  },

  render(h) {
    var data = {
      staticClass: 'q-item q-item-type row no-wrap',
      class: this.classes,
      style: this.style
    };
    var evtProp = this.hasRouterLink === true ? 'nativeOn' : 'on';
    data[evtProp] = QItem_objectSpread({}, this.$listeners, {
      click: this.__onClick,
      keyup: this.__onKeyup
    });

    if (this.isClickable === true) {
      data.attrs = {
        tabindex: this.tabindex || '0'
      };
    }

    if (this.hasRouterLink === true) {
      data.tag = 'a';
      data.props = this.routerLinkProps;
      return h('router-link', data, this.__getContent(h));
    }

    return h(this.tag, data, this.__getContent(h));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/item/QItemSection.js


/* harmony default export */ var QItemSection = (vue_runtime_esm["a" /* default */].extend({
  name: 'QItemSection',
  props: {
    avatar: Boolean,
    thumbnail: Boolean,
    side: Boolean,
    top: Boolean,
    noWrap: Boolean
  },
  computed: {
    classes() {
      var side = this.avatar || this.side || this.thumbnail;
      return {
        'q-item__section--top': this.top,
        'q-item__section--avatar': this.avatar,
        'q-item__section--thumbnail': this.thumbnail,
        'q-item__section--side': side,
        'q-item__section--nowrap': this.noWrap,
        'q-item__section--main': !side,
        ["justify-".concat(this.top ? 'start' : 'center')]: true
      };
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-item__section column',
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/editor/editor-utils.js










function editor_utils_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function editor_utils_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { editor_utils_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { editor_utils_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }













function run(e, btn, vm) {
  if (btn.handler) {
    btn.handler(e, vm, vm.caret);
  } else {
    vm.runCmd(btn.cmd, btn.param);
  }
}

function __getGroup(h, children) {
  return h('div', {
    staticClass: 'q-editor__toolbar-group'
  }, children);
}

function getBtn(h, vm, btn, clickHandler) {
  var active = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var toggled = active || (btn.type === 'toggle' ? btn.toggled ? btn.toggled(vm) : btn.cmd && vm.caret.is(btn.cmd, btn.param) : false),
      child = [],
      events = {
    click(e) {
      clickHandler && clickHandler();
      run(e, btn, vm);
    }

  };

  if (btn.tip && vm.$q.platform.is.desktop) {
    var Key = btn.key ? h('div', [h('small', "(CTRL + ".concat(String.fromCharCode(btn.key), ")"))]) : null;
    child.push(h(QTooltip, {
      props: {
        delay: 1000
      }
    }, [h('div', {
      domProps: {
        innerHTML: btn.tip
      }
    }), Key]));
  }

  return h(QBtn, {
    props: editor_utils_objectSpread({}, vm.buttonProps, {
      icon: btn.icon,
      color: toggled ? btn.toggleColor || vm.toolbarToggleColor : btn.color || vm.toolbarColor,
      textColor: toggled && !vm.toolbarPush ? null : btn.textColor || vm.toolbarTextColor,
      label: btn.label,
      disable: btn.disable ? typeof btn.disable === 'function' ? btn.disable(vm) : true : false,
      size: 'sm'
    }),
    on: events
  }, child);
}

function getDropdown(h, vm, btn) {
  var label = btn.label,
      icon = btn.icon,
      onlyIcons = btn.list === 'only-icons',
      contentClass,
      Items;

  function closeDropdown() {
    Dropdown.componentInstance.hide();
  }

  if (onlyIcons) {
    Items = btn.options.map(btn => {
      var active = btn.type === void 0 ? vm.caret.is(btn.cmd, btn.param) : false;

      if (active) {
        label = btn.tip;
        icon = btn.icon;
      }

      return getBtn(h, vm, btn, closeDropdown, active);
    });
    contentClass = vm.toolbarBackgroundClass;
    Items = [__getGroup(h, Items)];
  } else {
    var activeClass = vm.toolbarToggleColor !== void 0 ? "text-".concat(vm.toolbarToggleColor) : null;
    var inactiveClass = vm.toolbarTextColor !== void 0 ? "text-".concat(vm.toolbarTextColor) : null;
    Items = btn.options.map(btn => {
      var disable = btn.disable ? btn.disable(vm) : false;
      var active = btn.type === void 0 ? vm.caret.is(btn.cmd, btn.param) : false;

      if (active) {
        label = btn.tip;
        icon = btn.icon;
      }

      var htmlTip = btn.htmlTip;
      return h(QItem, {
        props: {
          active,
          activeClass,
          clickable: true,
          disable: disable,
          dense: true
        },
        on: {
          click(e) {
            closeDropdown();
            vm.$refs.content && vm.$refs.content.focus();
            vm.caret.restore();
            run(e, btn, vm);
          }

        }
      }, [btn.list === 'no-icons' ? null : h(QItemSection, {
        class: active ? activeClass : inactiveClass,
        props: {
          side: true
        }
      }, [h(QIcon, {
        props: {
          name: btn.icon
        }
      })]), h(QItemSection, [htmlTip ? h('div', {
        domProps: {
          innerHTML: btn.htmlTip
        }
      }) : btn.tip ? h('div', [btn.tip]) : null])]);
    });
    contentClass = [vm.toolbarBackgroundClass, inactiveClass];
    Items = [h(QList, [Items])];
  }

  var highlight = btn.highlight && label !== btn.label;
  var Dropdown = h(QBtnDropdown, {
    props: editor_utils_objectSpread({}, vm.buttonProps, {
      noCaps: true,
      noWrap: true,
      color: highlight ? vm.toolbarToggleColor : vm.toolbarColor,
      textColor: highlight && !vm.toolbarPush ? null : vm.toolbarTextColor,
      label: btn.fixedLabel ? btn.label : label,
      icon: btn.fixedIcon ? btn.icon : icon,
      contentClass
    })
  }, Items);
  return Dropdown;
}

function getToolbar(h, vm) {
  if (vm.caret) {
    return vm.buttons.filter(f => {
      return !vm.isViewingSource || f.find(fb => fb.cmd === 'viewsource');
    }).map(group => __getGroup(h, group.map(btn => {
      if (vm.isViewingSource && btn.cmd !== 'viewsource') {
        return false;
      }

      if (btn.type === 'slot') {
        return slot_slot(vm, btn.slot);
      }

      if (btn.type === 'dropdown') {
        return getDropdown(h, vm, btn);
      }

      return getBtn(h, vm, btn);
    })));
  }
}
function getFonts(defaultFont, defaultFontLabel, defaultFontIcon) {
  var fonts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var aliases = Object.keys(fonts);

  if (aliases.length === 0) {
    return {};
  }

  var def = {
    default_font: {
      cmd: 'fontName',
      param: defaultFont,
      icon: defaultFontIcon,
      tip: defaultFontLabel
    }
  };
  aliases.forEach(alias => {
    var name = fonts[alias];
    def[alias] = {
      cmd: 'fontName',
      param: name,
      icon: defaultFontIcon,
      tip: name,
      htmlTip: "<font face=\"".concat(name, "\">").concat(name, "</font>")
    };
  });
  return def;
}
function getLinkEditor(h, vm, ie11) {
  if (vm.caret) {
    var color = vm.toolbarColor || vm.toolbarTextColor;
    var link = vm.editLinkUrl;

    var updateLink = () => {
      vm.caret.restore();

      if (link !== vm.editLinkUrl) {
        document.execCommand('createLink', false, link === '' ? ' ' : link);
      }

      vm.editLinkUrl = null;
      ie11 === true && vm.$nextTick(vm.__onInput);
    };

    return [h('div', {
      staticClass: 'q-mx-xs',
      'class': "text-".concat(color)
    }, ["".concat(vm.$q.lang.editor.url, ": ")]), h(QInput, {
      key: 'qedt_btm_input',
      staticClass: 'q-ma-none q-pa-none col q-editor-input',
      props: {
        value: link,
        color,
        autofocus: true,
        borderless: true,
        dense: true
      },
      on: {
        input: val => {
          link = val;
        },
        keydown: event => {
          if (shouldIgnoreKey(event) === true) {
            return;
          }

          switch (event.keyCode) {
            case 13:
              // ENTER key
              prevent(event);
              return updateLink();

            case 27:
              // ESCAPE key
              prevent(event);
              vm.caret.restore();

              if (!vm.editLinkUrl || vm.editLinkUrl === 'https://') {
                document.execCommand('unlink');
              }

              vm.editLinkUrl = null;
              break;
          }
        }
      }
    }), __getGroup(h, [h(QBtn, {
      key: 'qedt_btm_rem',
      attrs: {
        tabindex: -1
      },
      props: editor_utils_objectSpread({}, vm.buttonProps, {
        label: vm.$q.lang.label.remove,
        noCaps: true
      }),
      on: {
        click: () => {
          vm.caret.restore();
          document.execCommand('unlink');
          vm.editLinkUrl = null;
          ie11 === true && vm.$nextTick(vm.__onInput);
        }
      }
    }), h(QBtn, {
      key: 'qedt_btm_upd',
      props: editor_utils_objectSpread({}, vm.buttonProps, {
        label: vm.$q.lang.label.update,
        noCaps: true
      }),
      on: {
        click: updateLink
      }
    })])];
  }
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/editor/editor-caret.js






function getBlockElement(el, parent) {
  if (parent && el === parent) {
    return null;
  }

  var nodeName = el.nodeName.toLowerCase();

  if (['div', 'li', 'ul', 'ol', 'blockquote'].includes(nodeName) === true) {
    return el;
  }

  var style = window.getComputedStyle ? window.getComputedStyle(el) : el.currentStyle,
      display = style.display;

  if (display === 'block' || display === 'table') {
    return el;
  }

  return getBlockElement(el.parentNode);
}

function isChildOf(el, parent) {
  if (!el) {
    return false;
  }

  while (el = el.parentNode) {
    if (el === document.body) {
      return false;
    }

    if (el === parent) {
      return true;
    }
  }

  return false;
}

var urlRegex = /^https?:\/\//;
class Caret {
  constructor(el, vm) {
    this.el = el;
    this.vm = vm;
    this._range = null;
  }

  get selection() {
    if (this.el) {
      var sel = document.getSelection(); // only when the selection in element

      if (isChildOf(sel.anchorNode, this.el) && isChildOf(sel.focusNode, this.el)) {
        return sel;
      }
    }

    return null;
  }

  get hasSelection() {
    return this.selection !== null ? this.selection.toString().length > 0 : false;
  }

  get range() {
    var sel = this.selection;

    if (sel !== null && sel.rangeCount) {
      return sel.getRangeAt(0);
    }

    return this._range;
  }

  get parent() {
    var range = this.range;

    if (range !== null) {
      var node = range.startContainer;
      return node.nodeType === document.ELEMENT_NODE ? node : node.parentNode;
    }

    return null;
  }

  get blockParent() {
    var parent = this.parent;

    if (parent !== null) {
      return getBlockElement(parent, this.el);
    }

    return null;
  }

  save() {
    var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.range;

    if (range !== null) {
      this._range = range;
    }
  }

  restore() {
    var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._range;
    var r = document.createRange(),
        sel = document.getSelection();

    if (range !== null) {
      r.setStart(range.startContainer, range.startOffset);
      r.setEnd(range.endContainer, range.endOffset);
      sel.removeAllRanges();
      sel.addRange(r);
    } else {
      sel.selectAllChildren(this.el);
      sel.collapseToEnd();
    }
  }

  hasParent(name, spanLevel) {
    var el = spanLevel ? this.parent : this.blockParent;
    return el !== null ? el.nodeName.toLowerCase() === name.toLowerCase() : false;
  }

  hasParents(list, recursive) {
    var el = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.parent;

    if (el === null) {
      return false;
    }

    if (el !== null && list.includes(el.nodeName.toLowerCase()) === true) {
      return true;
    }

    return recursive === true ? this.hasParents(list, recursive, el.parentNode) : false;
  }

  is(cmd, param) {
    switch (cmd) {
      case 'formatBlock':
        if (param === 'DIV' && this.parent === this.el) {
          return true;
        }

        return this.hasParent(param, param === 'PRE');

      case 'link':
        return this.hasParent('A', true);

      case 'fontSize':
        return document.queryCommandValue(cmd) === param;

      case 'fontName':
        var res = document.queryCommandValue(cmd);
        return res === "\"".concat(param, "\"") || res === param;

      case 'fullscreen':
        return this.vm.inFullscreen;

      case 'viewsource':
        return this.vm.isViewingSource;

      case void 0:
        return false;

      default:
        var state = document.queryCommandState(cmd);
        return param !== void 0 ? state === param : state;
    }
  }

  getParentAttribute(attrib) {
    if (this.parent !== null) {
      return this.parent.getAttribute(attrib);
    }

    return null;
  }

  can(name) {
    if (name === 'outdent') {
      return this.hasParents(['blockquote', 'li'], true);
    }

    if (name === 'indent') {
      return this.hasParents(['li'], true);
    }

    if (name === 'link') {
      return this.selection !== null || this.is('link');
    }
  }

  apply(cmd, param) {
    var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

    if (cmd === 'formatBlock') {
      if (['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(param) && this.is(cmd, param)) {
        cmd = 'outdent';
        param = null;
      }

      if (param === 'PRE' && this.is(cmd, 'PRE')) {
        param = 'P';
      }
    } else if (cmd === 'print') {
      done();
      var win = window.open();
      win.document.write("\n        <!doctype html>\n        <html>\n          <head>\n            <title>Print - ".concat(document.title, "</title>\n          </head>\n          <body>\n            <div>").concat(this.el.innerHTML, "</div>\n          </body>\n        </html>\n      "));
      win.print();
      win.close();
      return;
    } else if (cmd === 'link') {
      var link = this.getParentAttribute('href');

      if (link === null) {
        var selection = this.selectWord(this.selection);
        var url = selection ? selection.toString() : '';

        if (!url.length) {
          return;
        }

        this.vm.editLinkUrl = urlRegex.test(url) ? url : 'https://';
        document.execCommand('createLink', false, this.vm.editLinkUrl);
        this.save(selection.getRangeAt(0));
      } else {
        this.vm.editLinkUrl = link;
        this.range.selectNodeContents(this.parent);
        this.save();
      }

      return;
    } else if (cmd === 'fullscreen') {
      this.vm.toggleFullscreen();
      done();
      return;
    } else if (cmd === 'viewsource') {
      this.vm.isViewingSource = this.vm.isViewingSource === false;

      this.vm.__setContent(this.vm.value);

      done();
      return;
    }

    document.execCommand(cmd, false, param);
    done();
  }

  selectWord(sel) {
    if (sel === null || sel.isCollapsed !== true ||
    /* IE 11 */
    sel.modify === void 0) {
      return sel;
    } // Detect if selection is backwards


    var range = document.createRange();
    range.setStart(sel.anchorNode, sel.anchorOffset);
    range.setEnd(sel.focusNode, sel.focusOffset);
    var direction = range.collapsed ? ['backward', 'forward'] : ['forward', 'backward'];
    range.detach(); // modify() works on the focus of the selection

    var endNode = sel.focusNode,
        endOffset = sel.focusOffset;
    sel.collapse(sel.anchorNode, sel.anchorOffset);
    sel.modify('move', direction[0], 'character');
    sel.modify('move', direction[1], 'word');
    sel.extend(endNode, endOffset);
    sel.modify('extend', direction[1], 'character');
    sel.modify('extend', direction[0], 'word');
    return sel;
  }

}
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/extend.js




var extend_toString = Object.prototype.toString,
    hasOwn = Object.prototype.hasOwnProperty,
    class2type = {};
'Boolean Number String Function Array Date RegExp Object'.split(' ').forEach(name => {
  class2type['[object ' + name + ']'] = name.toLowerCase();
});

function extend_type(obj) {
  return obj === null ? String(obj) : class2type[extend_toString.call(obj)] || 'object';
}

function isPlainObject(obj) {
  if (!obj || extend_type(obj) !== 'object') {
    return false;
  }

  if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
    return false;
  }

  var key;

  for (key in obj) {}

  return key === undefined || hasOwn.call(obj, key);
}

function extend() {
  var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    i = 2;
  }

  if (Object(target) !== target && extend_type(target) !== 'function') {
    target = {};
  }

  if (length === i) {
    target = this;
    i--;
  }

  for (; i < length; i++) {
    if ((options = arguments[i]) !== null) {
      for (name in options) {
        src = target[name];
        copy = options[name];

        if (target === copy) {
          continue;
        }

        if (deep && copy && (isPlainObject(copy) || (copyIsArray = extend_type(copy) === 'array'))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && extend_type(src) === 'array' ? src : [];
          } else {
            clone = src && isPlainObject(src) ? src : {};
          }

          target[name] = extend(deep, clone, copy);
        } else if (copy !== undefined) {
          target[name] = copy;
        }
      }
    }
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/editor/QEditor.js















function QEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QEditor_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










/* harmony default export */ var QEditor = (vue_runtime_esm["a" /* default */].extend({
  name: 'QEditor',
  mixins: [fullscreen, mixins_dark],
  props: {
    value: {
      type: String,
      required: true
    },
    readonly: Boolean,
    disable: Boolean,
    minHeight: {
      type: String,
      default: '10rem'
    },
    maxHeight: String,
    height: String,
    definitions: Object,
    fonts: Object,
    toolbar: {
      type: Array,
      validator: v => v.length === 0 || v.every(group => group.length),

      default() {
        return [['left', 'center', 'right', 'justify'], ['bold', 'italic', 'underline', 'strike'], ['undo', 'redo']];
      }

    },
    toolbarColor: String,
    toolbarBg: String,
    toolbarTextColor: String,
    toolbarToggleColor: {
      type: String,
      default: 'primary'
    },
    toolbarOutline: Boolean,
    toolbarPush: Boolean,
    toolbarRounded: Boolean,
    contentStyle: Object,
    contentClass: [Object, Array, String],
    square: Boolean,
    flat: Boolean,
    dense: Boolean
  },
  computed: {
    editable() {
      return !this.readonly && !this.disable;
    },

    hasToolbar() {
      return this.toolbar && this.toolbar.length > 0;
    },

    toolbarBackgroundClass() {
      if (this.toolbarBg) {
        return "bg-".concat(this.toolbarBg);
      }
    },

    buttonProps() {
      var flat = this.toolbarOutline !== true && this.toolbarPush !== true;
      return {
        type: 'a',
        flat,
        noWrap: true,
        outline: this.toolbarOutline,
        push: this.toolbarPush,
        rounded: this.toolbarRounded,
        dense: true,
        color: this.toolbarColor,
        disable: !this.editable,
        size: 'sm'
      };
    },

    buttonDef() {
      var e = this.$q.lang.editor,
          i = this.$q.iconSet.editor;
      return {
        bold: {
          cmd: 'bold',
          icon: i.bold,
          tip: e.bold,
          key: 66
        },
        italic: {
          cmd: 'italic',
          icon: i.italic,
          tip: e.italic,
          key: 73
        },
        strike: {
          cmd: 'strikeThrough',
          icon: i.strikethrough,
          tip: e.strikethrough,
          key: 83
        },
        underline: {
          cmd: 'underline',
          icon: i.underline,
          tip: e.underline,
          key: 85
        },
        unordered: {
          cmd: 'insertUnorderedList',
          icon: i.unorderedList,
          tip: e.unorderedList
        },
        ordered: {
          cmd: 'insertOrderedList',
          icon: i.orderedList,
          tip: e.orderedList
        },
        subscript: {
          cmd: 'subscript',
          icon: i.subscript,
          tip: e.subscript,
          htmlTip: 'x<subscript>2</subscript>'
        },
        superscript: {
          cmd: 'superscript',
          icon: i.superscript,
          tip: e.superscript,
          htmlTip: 'x<superscript>2</superscript>'
        },
        link: {
          cmd: 'link',
          disable: vm => vm.caret && !vm.caret.can('link'),
          icon: i.hyperlink,
          tip: e.hyperlink,
          key: 76
        },
        fullscreen: {
          cmd: 'fullscreen',
          icon: i.toggleFullscreen,
          tip: e.toggleFullscreen,
          key: 70
        },
        viewsource: {
          cmd: 'viewsource',
          icon: i.viewSource,
          tip: e.viewSource
        },
        quote: {
          cmd: 'formatBlock',
          param: 'BLOCKQUOTE',
          icon: i.quote,
          tip: e.quote,
          key: 81
        },
        left: {
          cmd: 'justifyLeft',
          icon: i.left,
          tip: e.left
        },
        center: {
          cmd: 'justifyCenter',
          icon: i.center,
          tip: e.center
        },
        right: {
          cmd: 'justifyRight',
          icon: i.right,
          tip: e.right
        },
        justify: {
          cmd: 'justifyFull',
          icon: i.justify,
          tip: e.justify
        },
        print: {
          type: 'no-state',
          cmd: 'print',
          icon: i.print,
          tip: e.print,
          key: 80
        },
        outdent: {
          type: 'no-state',
          disable: vm => vm.caret && !vm.caret.can('outdent'),
          cmd: 'outdent',
          icon: i.outdent,
          tip: e.outdent
        },
        indent: {
          type: 'no-state',
          disable: vm => vm.caret && !vm.caret.can('indent'),
          cmd: 'indent',
          icon: i.indent,
          tip: e.indent
        },
        removeFormat: {
          type: 'no-state',
          cmd: 'removeFormat',
          icon: i.removeFormat,
          tip: e.removeFormat
        },
        hr: {
          type: 'no-state',
          cmd: 'insertHorizontalRule',
          icon: i.hr,
          tip: e.hr
        },
        undo: {
          type: 'no-state',
          cmd: 'undo',
          icon: i.undo,
          tip: e.undo,
          key: 90
        },
        redo: {
          type: 'no-state',
          cmd: 'redo',
          icon: i.redo,
          tip: e.redo,
          key: 89
        },
        h1: {
          cmd: 'formatBlock',
          param: 'H1',
          icon: i.heading1 || i.heading,
          tip: e.heading1,
          htmlTip: "<h1 class=\"q-ma-none\">".concat(e.heading1, "</h1>")
        },
        h2: {
          cmd: 'formatBlock',
          param: 'H2',
          icon: i.heading2 || i.heading,
          tip: e.heading2,
          htmlTip: "<h2 class=\"q-ma-none\">".concat(e.heading2, "</h2>")
        },
        h3: {
          cmd: 'formatBlock',
          param: 'H3',
          icon: i.heading3 || i.heading,
          tip: e.heading3,
          htmlTip: "<h3 class=\"q-ma-none\">".concat(e.heading3, "</h3>")
        },
        h4: {
          cmd: 'formatBlock',
          param: 'H4',
          icon: i.heading4 || i.heading,
          tip: e.heading4,
          htmlTip: "<h4 class=\"q-ma-none\">".concat(e.heading4, "</h4>")
        },
        h5: {
          cmd: 'formatBlock',
          param: 'H5',
          icon: i.heading5 || i.heading,
          tip: e.heading5,
          htmlTip: "<h5 class=\"q-ma-none\">".concat(e.heading5, "</h5>")
        },
        h6: {
          cmd: 'formatBlock',
          param: 'H6',
          icon: i.heading6 || i.heading,
          tip: e.heading6,
          htmlTip: "<h6 class=\"q-ma-none\">".concat(e.heading6, "</h6>")
        },
        p: {
          cmd: 'formatBlock',
          param: 'DIV',
          icon: i.heading,
          tip: e.paragraph
        },
        code: {
          cmd: 'formatBlock',
          param: 'PRE',
          icon: i.code,
          htmlTip: "<code>".concat(e.code, "</code>")
        },
        'size-1': {
          cmd: 'fontSize',
          param: '1',
          icon: i.size1 || i.size,
          tip: e.size1,
          htmlTip: "<font size=\"1\">".concat(e.size1, "</font>")
        },
        'size-2': {
          cmd: 'fontSize',
          param: '2',
          icon: i.size2 || i.size,
          tip: e.size2,
          htmlTip: "<font size=\"2\">".concat(e.size2, "</font>")
        },
        'size-3': {
          cmd: 'fontSize',
          param: '3',
          icon: i.size3 || i.size,
          tip: e.size3,
          htmlTip: "<font size=\"3\">".concat(e.size3, "</font>")
        },
        'size-4': {
          cmd: 'fontSize',
          param: '4',
          icon: i.size4 || i.size,
          tip: e.size4,
          htmlTip: "<font size=\"4\">".concat(e.size4, "</font>")
        },
        'size-5': {
          cmd: 'fontSize',
          param: '5',
          icon: i.size5 || i.size,
          tip: e.size5,
          htmlTip: "<font size=\"5\">".concat(e.size5, "</font>")
        },
        'size-6': {
          cmd: 'fontSize',
          param: '6',
          icon: i.size6 || i.size,
          tip: e.size6,
          htmlTip: "<font size=\"6\">".concat(e.size6, "</font>")
        },
        'size-7': {
          cmd: 'fontSize',
          param: '7',
          icon: i.size7 || i.size,
          tip: e.size7,
          htmlTip: "<font size=\"7\">".concat(e.size7, "</font>")
        }
      };
    },

    buttons() {
      var userDef = this.definitions || {};
      var def = this.definitions || this.fonts ? extend(true, {}, this.buttonDef, userDef, getFonts(this.defaultFont, this.$q.lang.editor.defaultFont, this.$q.iconSet.editor.font, this.fonts)) : this.buttonDef;
      return this.toolbar.map(group => group.map(token => {
        if (token.options) {
          return {
            type: 'dropdown',
            icon: token.icon,
            label: token.label,
            size: 'sm',
            dense: true,
            fixedLabel: token.fixedLabel,
            fixedIcon: token.fixedIcon,
            highlight: token.highlight,
            list: token.list,
            options: token.options.map(item => def[item])
          };
        }

        var obj = def[token];

        if (obj) {
          return obj.type === 'no-state' || userDef[token] && (obj.cmd === void 0 || this.buttonDef[obj.cmd] && this.buttonDef[obj.cmd].type === 'no-state') ? obj : Object.assign({
            type: 'toggle'
          }, obj);
        } else {
          return {
            type: 'slot',
            slot: token
          };
        }
      }));
    },

    keys() {
      var k = {},
          add = btn => {
        if (btn.key) {
          k[btn.key] = {
            cmd: btn.cmd,
            param: btn.param
          };
        }
      };

      this.buttons.forEach(group => {
        group.forEach(token => {
          if (token.options) {
            token.options.forEach(add);
          } else {
            add(token);
          }
        });
      });
      return k;
    },

    innerStyle() {
      return this.inFullscreen ? this.contentStyle : [{
        minHeight: this.minHeight,
        height: this.height,
        maxHeight: this.maxHeight
      }, this.contentStyle];
    },

    innerClass() {
      return [this.contentClass, {
        col: this.inFullscreen,
        'overflow-auto': this.inFullscreen || this.maxHeight
      }];
    }

  },

  data() {
    return {
      editWatcher: true,
      editLinkUrl: null,
      isViewingSource: false
    };
  },

  watch: {
    value(v) {
      if (this.editWatcher === true) {
        this.__setContent(v);
      } else {
        this.editWatcher = true;
      }
    }

  },
  methods: {
    __onInput() {
      if (this.editWatcher === true) {
        var val = this.isViewingSource ? this.$refs.content.innerText : this.$refs.content.innerHTML;

        if (val !== this.value) {
          this.editWatcher = false;
          this.$emit('input', val);
        }
      }
    },

    __onKeydown(e) {
      this.$emit('keydown', e);

      if (e.ctrlKey !== true || shouldIgnoreKey(e) === true) {
        this.refreshToolbar();
        this.$q.platform.is.ie && this.$nextTick(this.__onInput);
        return;
      }

      var key = e.keyCode;
      var target = this.keys[key];

      if (target !== void 0) {
        var cmd = target.cmd,
            param = target.param;
        stopAndPrevent(e);
        this.runCmd(cmd, param, false);
      }
    },

    __onClick(e) {
      this.refreshToolbar();
      this.$emit('click', e);
    },

    __onBlur() {
      var _this$$refs$content = this.$refs.content,
          scrollTop = _this$$refs$content.scrollTop,
          scrollHeight = _this$$refs$content.scrollHeight;
      this.__offsetBottom = scrollHeight - scrollTop;
      this.$q.platform.is.ie !== true && this.caret.save();
      this.$emit('blur');
    },

    __onFocus() {
      this.$nextTick(() => {
        if (this.$refs.content !== void 0 && this.__offsetBottom !== void 0) {
          this.$refs.content.scrollTop = this.$refs.content.scrollHeight - this.__offsetBottom;
        }
      });
    },

    __onMouseup(e) {
      this.caret.save();

      if (this.$listeners.mouseup !== void 0) {
        this.$emit('mouseup', e);
      }
    },

    __onKeyup(e) {
      this.caret.save();

      if (this.$listeners.keyup !== void 0) {
        this.$emit('keyup', e);
      }
    },

    __onTouchend(e) {
      this.caret.save();

      if (this.$listeners.touchend !== void 0) {
        this.$emit('touchend', e);
      }
    },

    runCmd(cmd, param) {
      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      this.focus();
      this.caret.restore();
      this.caret.apply(cmd, param, () => {
        this.focus();
        this.caret.save();

        if (this.$q.platform.is.ie === true || this.$q.platform.is.edge === true) {
          this.$nextTick(this.__onInput);
        }

        if (update) {
          this.refreshToolbar();
        }
      });
    },

    refreshToolbar() {
      setTimeout(() => {
        this.editLinkUrl = null;
        this.$forceUpdate();
      }, 1);
    },

    focus() {
      this.$refs.content.focus();
    },

    getContentEl() {
      return this.$refs.content;
    },

    __setContent(v) {
      if (this.isViewingSource) {
        this.$refs.content.innerText = v;
      } else {
        this.$refs.content.innerHTML = v;
      }
    }

  },

  created() {
    if (isSSR === false) {
      document.execCommand('defaultParagraphSeparator', false, 'div');
      this.defaultFont = window.getComputedStyle(document.body).fontFamily;
    }
  },

  mounted() {
    this.caret = new Caret(this.$refs.content, this);

    this.__setContent(this.value);

    this.refreshToolbar();
  },

  render(h) {
    var toolbars;

    if (this.hasToolbar) {
      var bars = [];
      bars.push(h('div', {
        key: 'qedt_top',
        staticClass: 'q-editor__toolbar row no-wrap scroll-x',
        class: this.toolbarBackgroundClass
      }, getToolbar(h, this)));
      this.editLinkUrl !== null && bars.push(h('div', {
        key: 'qedt_btm',
        staticClass: 'q-editor__toolbar row no-wrap items-center scroll-x',
        class: this.toolbarBackgroundClass
      }, getLinkEditor(h, this, this.$q.platform.is.ie)));
      toolbars = h('div', {
        key: 'toolbar_ctainer',
        staticClass: 'q-editor__toolbars-container'
      }, bars);
    }

    var on = QEditor_objectSpread({}, this.$listeners, {
      input: this.__onInput,
      keydown: this.__onKeydown,
      click: this.__onClick,
      blur: this.__onBlur,
      focus: this.__onFocus,
      // save caret
      mouseup: this.__onMouseup,
      keyup: this.__onKeyup,
      touchend: this.__onTouchend
    });

    return h('div', {
      staticClass: 'q-editor',
      style: {
        height: this.inFullscreen === true ? '100vh' : null
      },
      'class': {
        disabled: this.disable,
        'fullscreen column': this.inFullscreen,
        'q-editor--square no-border-radius': this.square,
        'q-editor--flat': this.flat,
        'q-editor--dense': this.dense,
        'q-editor--dark q-dark': this.isDark
      }
    }, [toolbars, h('div', {
      ref: 'content',
      staticClass: "q-editor__content",
      style: this.innerStyle,
      class: this.innerClass,
      attrs: {
        contenteditable: this.editable
      },
      domProps: isSSR ? {
        innerHTML: this.value
      } : undefined,
      on
    })]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/editor/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/item/QItemLabel.js



/* harmony default export */ var QItemLabel = (vue_runtime_esm["a" /* default */].extend({
  name: 'QItemLabel',
  props: {
    overline: Boolean,
    caption: Boolean,
    header: Boolean,
    lines: [Number, String]
  },
  computed: {
    classes() {
      return {
        'q-item__label--overline text-overline': this.overline,
        'q-item__label--caption text-caption': this.caption,
        'q-item__label--header': this.header,
        'ellipsis': parseInt(this.lines, 10) === 1
      };
    },

    style() {
      if (this.lines !== void 0 && parseInt(this.lines, 10) > 1) {
        return {
          overflow: 'hidden',
          display: '-webkit-box',
          '-webkit-box-orient': 'vertical',
          '-webkit-line-clamp': this.lines
        };
      }
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-item__label',
      style: this.style,
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/slide-transition/QSlideTransition.js




/* harmony default export */ var QSlideTransition = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSlideTransition',
  props: {
    appear: Boolean,
    duration: {
      type: Number,
      default: 300
    }
  },
  methods: {
    __begin(el, height, done) {
      el.style.overflowY = 'hidden';

      if (height !== void 0) {
        el.style.height = "".concat(height, "px");
      }

      el.style.transition = "height ".concat(this.duration, "ms cubic-bezier(.25, .8, .50, 1)");
      this.animating = true;
      this.done = done;
    },

    __end(el, event) {
      el.style.overflowY = null;
      el.style.height = null;
      el.style.transition = null;

      this.__cleanup();

      event !== this.lastEvent && this.$emit(event);
    },

    __cleanup() {
      this.done && this.done();
      this.done = null;
      this.animating = false;
      clearTimeout(this.timer);
      clearTimeout(this.timerFallback);
      this.el !== void 0 && this.el.removeEventListener('transitionend', this.animListener);
      this.animListener = null;
    }

  },

  beforeDestroy() {
    this.animating && this.__cleanup();
  },

  render(h) {
    return h('transition', {
      props: {
        css: false,
        appear: this.appear
      },
      on: cache(this, 'tr', {
        enter: (el, done) => {
          var pos = 0;
          this.el = el;

          if (this.animating === true) {
            this.__cleanup();

            pos = el.offsetHeight === el.scrollHeight ? 0 : void 0;
          } else {
            this.lastEvent = 'hide';
          }

          this.__begin(el, pos, done);

          this.timer = setTimeout(() => {
            el.style.height = "".concat(el.scrollHeight, "px");

            this.animListener = ev => {
              if (Object(ev) !== ev || ev.target === el) {
                this.__end(el, 'show');
              }
            };

            el.addEventListener('transitionend', this.animListener);
            this.timerFallback = setTimeout(this.animListener, this.duration * 1.1);
          }, 100);
        },
        leave: (el, done) => {
          var pos;
          this.el = el;

          if (this.animating === true) {
            this.__cleanup();
          } else {
            this.lastEvent = 'show';
            pos = el.scrollHeight;
          }

          this.__begin(el, pos, done);

          this.timer = setTimeout(() => {
            el.style.height = 0;

            this.animListener = ev => {
              if (Object(ev) !== ev || ev.target === el) {
                this.__end(el, 'hide');
              }
            };

            el.addEventListener('transitionend', this.animListener);
            this.timerFallback = setTimeout(this.animListener, this.duration * 1.1);
          }, 100);
        }
      })
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/separator/QSeparator.js


/* harmony default export */ var QSeparator = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSeparator',
  mixins: [mixins_dark],
  props: {
    spaced: Boolean,
    inset: [Boolean, String],
    vertical: Boolean,
    color: String
  },
  computed: {
    classes() {
      return {
        ["bg-".concat(this.color)]: this.color,
        'q-separator--dark': this.isDark,
        'q-separator--spaced': this.spaced,
        'q-separator--inset': this.inset === true,
        'q-separator--item-inset': this.inset === 'item',
        'q-separator--item-thumbnail-inset': this.inset === 'item-thumbnail',
        ["q-separator--".concat(this.vertical ? 'vertical self-stretch' : 'horizontal col-grow')]: true
      };
    }

  },

  render(h) {
    return h('hr', {
      staticClass: 'q-separator',
      class: this.classes
    });
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/expansion-item/QExpansionItem.js










function QExpansionItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QExpansionItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QExpansionItem_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QExpansionItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }














var eventName = 'q:expansion-item:close';
/* harmony default export */ var QExpansionItem = (vue_runtime_esm["a" /* default */].extend({
  name: 'QExpansionItem',
  mixins: [mixins_dark, RouterLinkMixin, model_toggle],
  props: {
    icon: String,
    label: String,
    labelLines: [Number, String],
    caption: String,
    captionLines: [Number, String],
    dense: Boolean,
    expandIcon: String,
    expandedIcon: String,
    expandIconClass: [Array, String, Object],
    duration: Number,
    headerInsetLevel: Number,
    contentInsetLevel: Number,
    expandSeparator: Boolean,
    defaultOpened: Boolean,
    expandIconToggle: Boolean,
    switchToggleSide: Boolean,
    denseToggle: Boolean,
    group: String,
    popup: Boolean,
    headerStyle: [Array, String, Object],
    headerClass: [Array, String, Object]
  },

  data() {
    return {
      showing: this.value !== void 0 ? this.value : this.defaultOpened
    };
  },

  watch: {
    showing(val) {
      val === true && this.group !== void 0 && this.$root.$emit(eventName, this);
    },

    group(newVal, oldVal) {
      if (newVal !== void 0 && oldVal === void 0) {
        this.$root.$on(eventName, this.__eventHandler);
      } else if (newVal === void 0 && oldVal !== void 0) {
        this.$root.$off(eventName, this.__eventHandler);
      }
    }

  },
  computed: {
    classes() {
      return "q-expansion-item--".concat(this.showing === true ? 'expanded' : 'collapsed') + " q-expansion-item--".concat(this.popup === true ? 'popup' : 'standard');
    },

    contentStyle() {
      if (this.contentInsetLevel !== void 0) {
        var dir = this.$q.lang.rtl === true ? 'Right' : 'Left';
        return {
          ['padding' + dir]: this.contentInsetLevel * 56 + 'px'
        };
      }
    },

    isClickable() {
      return this.hasRouterLink === true || this.expandIconToggle !== true;
    },

    expansionIcon() {
      return this.expandedIcon !== void 0 && this.showing === true ? this.expandedIcon : this.expandIcon || this.$q.iconSet.expansionItem[this.denseToggle === true ? 'denseIcon' : 'icon'];
    },

    activeToggleIcon() {
      return this.disable !== true && (this.hasRouterLink === true || this.expandIconToggle === true);
    }

  },
  methods: {
    __onHeaderClick(e) {
      this.hasRouterLink !== true && this.toggle(e);
      this.$emit('click', e);
    },

    __toggleIconKeyboard(e) {
      e.keyCode === 13 && this.__toggleIcon(e, true);
    },

    __toggleIcon(e, keyboard) {
      keyboard !== true && this.$refs.blurTarget !== void 0 && this.$refs.blurTarget.focus();
      this.toggle(e);
      stopAndPrevent(e);
    },

    __eventHandler(comp) {
      this !== comp && this.group === comp.group && this.hide();
    },

    __getToggleIcon(h) {
      return h(QItemSection, {
        staticClass: "cursor-pointer".concat(this.denseToggle === true && this.switchToggleSide === true ? ' items-end' : ''),
        class: this.expandIconClass,
        props: {
          side: this.switchToggleSide !== true,
          avatar: this.switchToggleSide
        },
        on: this.activeToggleIcon === true ? cache(this, 'inpExt', {
          click: this.__toggleIcon,
          keyup: this.__toggleIconKeyboard
        }) : void 0
      }, [h(QIcon, {
        staticClass: 'q-expansion-item__toggle-icon q-focusable',
        class: {
          'rotate-180': this.expandedIcon === void 0 ? this.showing : false,
          invisible: this.disable
        },
        props: {
          name: this.expansionIcon
        },
        attrs: this.activeToggleIcon === true ? {
          tabindex: 0
        } : void 0
      }, [h('div', {
        staticClass: 'q-focus-helper q-focus-helper--round',
        attrs: {
          tabindex: -1
        },
        ref: 'blurTarget'
      })])]);
    },

    __getHeader(h) {
      var child;

      if (this.$scopedSlots.header !== void 0) {
        child = this.$scopedSlots.header().slice();
      } else {
        child = [h(QItemSection, [h(QItemLabel, {
          props: {
            lines: this.labelLines
          }
        }, [this.label || '']), this.caption ? h(QItemLabel, {
          props: {
            lines: this.captionLines,
            caption: true
          }
        }, [this.caption]) : null])];
        this.icon && child[this.switchToggleSide === true ? 'push' : 'unshift'](h(QItemSection, {
          props: {
            side: this.switchToggleSide === true,
            avatar: this.switchToggleSide !== true
          }
        }, [h(QIcon, {
          props: {
            name: this.icon
          }
        })]));
      }

      child[this.switchToggleSide === true ? 'unshift' : 'push'](this.__getToggleIcon(h));
      var data = {
        ref: 'item',
        style: this.headerStyle,
        class: this.headerClass,
        props: {
          dark: this.isDark,
          disable: this.disable,
          dense: this.dense,
          insetLevel: this.headerInsetLevel
        }
      };

      if (this.isClickable === true) {
        var evtProp = this.hasRouterLink === true ? 'nativeOn' : 'on';
        data.props.clickable = true;
        data[evtProp] = QExpansionItem_objectSpread({}, this.$listeners, {
          click: this.__onHeaderClick
        });
        this.hasRouterLink === true && Object.assign(data.props, this.routerLinkProps);
      }

      return h(QItem, data, child);
    },

    __getContent(h) {
      var node = [this.__getHeader(h), h(QSlideTransition, {
        props: {
          duration: this.duration
        }
      }, [h('div', {
        staticClass: 'q-expansion-item__content relative-position',
        style: this.contentStyle,
        directives: [{
          name: 'show',
          value: this.showing
        }]
      }, slot_slot(this, 'default'))])];

      if (this.expandSeparator) {
        node.push(h(QSeparator, {
          staticClass: 'q-expansion-item__border q-expansion-item__border--top absolute-top',
          props: {
            dark: this.isDark
          }
        }), h(QSeparator, {
          staticClass: 'q-expansion-item__border q-expansion-item__border--bottom absolute-bottom',
          props: {
            dark: this.isDark
          }
        }));
      }

      return node;
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-expansion-item q-item-type',
      class: this.classes
    }, [h('div', {
      staticClass: 'q-expansion-item__container relative-position'
    }, this.__getContent(h))]);
  },

  created() {
    this.group !== void 0 && this.$root.$on(eventName, this.__eventHandler);
  },

  beforeDestroy() {
    this.group !== void 0 && this.$root.$off(eventName, this.__eventHandler);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/expansion-item/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/fab/fab-mixin.js
/* harmony default export */ var fab_mixin = ({
  props: {
    type: {
      type: String,
      default: 'a'
    },
    outline: Boolean,
    push: Boolean,
    flat: Boolean,
    color: String,
    textColor: String,
    glossy: Boolean,
    disable: Boolean
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/fab/QFab.js









function QFab_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QFab_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QFab_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QFab_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








/* harmony default export */ var QFab = (vue_runtime_esm["a" /* default */].extend({
  name: 'QFab',
  mixins: [fab_mixin, model_toggle],

  provide() {
    return {
      __qFabClose: evt => {
        this.hide(evt);
        this.$refs.trigger && this.$refs.trigger.$el && this.$refs.trigger.$el.focus();
      }
    };
  },

  props: {
    icon: String,
    activeIcon: String,
    direction: {
      type: String,
      default: 'right',
      validator: v => ['up', 'right', 'down', 'left'].includes(v)
    },
    persistent: Boolean
  },

  data() {
    return {
      showing: this.value === true
    };
  },

  computed: {
    hideOnRouteChange() {
      return this.persistent !== true;
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-fab z-fab row inline justify-center',
      class: this.showing === true ? 'q-fab--opened' : null,
      on: this.$listeners
    }, [h(QBtn, {
      ref: 'trigger',
      props: QFab_objectSpread({}, this.$props, {
        icon: void 0,
        fab: true
      }),
      on: cache(this, 'tog', {
        click: this.toggle
      })
    }, slot_slot(this, 'tooltip', []).concat([h(QIcon, {
      staticClass: 'q-fab__icon absolute-full',
      props: {
        name: this.icon || this.$q.iconSet.fab.icon
      }
    }), h(QIcon, {
      staticClass: 'q-fab__active-icon absolute-full',
      props: {
        name: this.activeIcon || this.$q.iconSet.fab.activeIcon
      }
    })])), h('div', {
      staticClass: 'q-fab__actions flex no-wrap inline items-center',
      class: "q-fab__actions--".concat(this.direction)
    }, slot_slot(this, 'default'))]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/fab/QFabAction.js







function QFabAction_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QFabAction_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QFabAction_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QFabAction_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/* harmony default export */ var QFabAction = (vue_runtime_esm["a" /* default */].extend({
  name: 'QFabAction',
  mixins: [fab_mixin],
  props: {
    icon: {
      type: String,
      required: true
    },
    to: [String, Object],
    replace: Boolean
  },
  inject: {
    __qFabClose: {
      default() {
        console.error('QFabAction needs to be child of QFab');
      }

    }
  },
  methods: {
    click(e) {
      this.__qFabClose();

      this.$emit('click', e);
    }

  },

  render(h) {
    return h(QBtn, {
      props: QFabAction_objectSpread({}, this.$props, {
        fabMini: true
      }),
      on: QFabAction_objectSpread({}, this.$listeners, {
        click: this.click
      })
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/fab/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/field/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/footer/QFooter.js









function QFooter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QFooter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QFooter_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QFooter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







/* harmony default export */ var QFooter = (vue_runtime_esm["a" /* default */].extend({
  name: 'QFooter',
  inject: {
    layout: {
      default() {
        console.error('QFooter needs to be child of QLayout');
      }

    }
  },
  props: {
    value: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    bordered: Boolean,
    elevated: Boolean,
    heightHint: {
      type: [String, Number],
      default: 50
    }
  },

  data() {
    return {
      size: parseInt(this.heightHint, 10),
      revealed: true,
      windowHeight: onSSR || this.layout.container ? 0 : window.innerHeight
    };
  },

  watch: {
    value(val) {
      this.__update('space', val);

      this.__updateLocal('revealed', true);

      this.layout.__animate();
    },

    offset(val) {
      this.__update('offset', val);
    },

    reveal(val) {
      val === false && this.__updateLocal('revealed', this.value);
    },

    revealed(val) {
      this.layout.__animate();

      this.$emit('reveal', val);
    },

    'layout.scroll'() {
      this.__updateRevealed();
    },

    'layout.height'() {
      this.__updateRevealed();
    },

    size() {
      this.__updateRevealed();
    },

    '$q.screen.height'(val) {
      this.layout.container !== true && this.__updateLocal('windowHeight', val);
    }

  },
  computed: {
    fixed() {
      return this.reveal === true || this.layout.view.indexOf('F') > -1 || this.layout.container === true;
    },

    containerHeight() {
      return this.layout.container === true ? this.layout.containerHeight : this.windowHeight;
    },

    offset() {
      if (this.value !== true) {
        return 0;
      }

      if (this.fixed === true) {
        return this.revealed === true ? this.size : 0;
      }

      var offset = this.layout.scroll.position + this.containerHeight + this.size - this.layout.height;
      return offset > 0 ? offset : 0;
    },

    classes() {
      return (this.fixed === true ? 'fixed' : 'absolute') + '-bottom' + (this.value === true || this.fixed === true ? '' : ' hidden') + (this.bordered === true ? ' q-footer--bordered' : '') + (this.value !== true || this.fixed === true && this.revealed !== true ? ' q-footer--hidden' : '');
    },

    style() {
      var view = this.layout.rows.bottom,
          css = {};

      if (view[0] === 'l' && this.layout.left.space === true) {
        css[this.$q.lang.rtl === true ? 'right' : 'left'] = "".concat(this.layout.left.size, "px");
      }

      if (view[2] === 'r' && this.layout.right.space === true) {
        css[this.$q.lang.rtl === true ? 'left' : 'right'] = "".concat(this.layout.right.size, "px");
      }

      return css;
    }

  },

  render(h) {
    var child = [h(QResizeObserver, {
      props: {
        debounce: 0
      },
      on: cache(this, 'resize', {
        resize: this.__onResize
      })
    })];
    this.elevated === true && child.push(h('div', {
      staticClass: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
    }));
    return h('footer', {
      staticClass: 'q-footer q-layout__section--marginal',
      class: this.classes,
      style: this.style,
      on: QFooter_objectSpread({}, this.$listeners, {
        input: event_stop
      })
    }, mergeSlot(child, this, 'default'));
  },

  created() {
    this.layout.instances.footer = this;
    this.value === true && this.__update('size', this.size);

    this.__update('space', this.value);

    this.__update('offset', this.offset);
  },

  beforeDestroy() {
    if (this.layout.instances.footer === this) {
      this.layout.instances.footer = void 0;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },

  methods: {
    __onResize(_ref) {
      var height = _ref.height;

      this.__updateLocal('size', height);

      this.__update('size', height);
    },

    __update(prop, val) {
      if (this.layout.footer[prop] !== val) {
        this.layout.footer[prop] = val;
      }
    },

    __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    },

    __updateRevealed() {
      if (this.reveal !== true) {
        return;
      }

      var _this$layout$scroll = this.layout.scroll,
          direction = _this$layout$scroll.direction,
          position = _this$layout$scroll.position,
          inflexionPosition = _this$layout$scroll.inflexionPosition;

      this.__updateLocal('revealed', direction === 'up' || position - inflexionPosition < 100 || this.layout.height - this.containerHeight - position - this.size < 300);
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/footer/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/form/QForm.js












function QForm_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QForm_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QForm_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QForm_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/* harmony default export */ var QForm = (vue_runtime_esm["a" /* default */].extend({
  name: 'QForm',
  props: {
    autofocus: Boolean,
    noErrorFocus: Boolean,
    noResetFocus: Boolean,
    greedy: Boolean
  },

  mounted() {
    this.validateIndex = 0;
    this.autofocus === true && this.focus();
  },

  methods: {
    validate(shouldFocus) {
      var _this = this;

      var promises = [];
      var focus = typeof shouldFocus === 'boolean' ? shouldFocus : this.noErrorFocus !== true;
      this.validateIndex++;
      var components = getAllChildren(this);

      var emit = res => {
        this.$emit('validation-' + (res === true ? 'success' : 'error'));
      };

      var _loop = function _loop(i) {
        var comp = components[i];

        if (typeof comp.validate === 'function') {
          var valid = comp.validate();

          if (typeof valid.then === 'function') {
            promises.push(valid.then(valid => ({
              valid,
              comp
            }), error => ({
              valid: false,
              comp,
              error
            })));
          } else if (valid !== true) {
            if (_this.greedy === false) {
              emit(false);

              if (focus === true && typeof comp.focus === 'function') {
                comp.focus();
              }

              return {
                v: Promise.resolve(false)
              };
            }

            promises.push({
              valid: false,
              comp
            });
          }
        }
      };

      for (var i = 0; i < components.length; i++) {
        var _ret = _loop(i);

        if (typeof _ret === "object") return _ret.v;
      }

      if (promises.length === 0) {
        emit(true);
        return Promise.resolve(true);
      }

      var index = this.validateIndex;
      return Promise.all(promises).then(res => {
        if (index === this.validateIndex) {
          var errors = res.filter(r => r.valid !== true);

          if (errors.length === 0) {
            emit(true);
            return true;
          }

          emit(false);
          var _errors$ = errors[0],
              valid = _errors$.valid,
              comp = _errors$.comp;

          if (focus === true && valid !== true && typeof comp.focus === 'function') {
            comp.focus();
          }

          return false;
        }
      });
    },

    resetValidation() {
      this.validateIndex++;
      getAllChildren(this).forEach(comp => {
        if (typeof comp.resetValidation === 'function') {
          comp.resetValidation();
        }
      });
    },

    submit(evt) {
      evt !== void 0 && stopAndPrevent(evt);
      this.validate().then(val => {
        val === true && this.$emit('submit', evt);
      });
    },

    reset(evt) {
      evt !== void 0 && stopAndPrevent(evt);
      this.$emit('reset');
      this.$nextTick(() => {
        // allow userland to reset values before
        this.resetValidation();

        if (this.autofocus === true && this.noResetFocus !== true) {
          this.focus();
        }
      });
    },

    focus() {
      var target = this.$el.querySelector('[autofocus], [data-autofocus]') || [].find.call(this.$el.querySelectorAll('[tabindex]'), el => el.tabIndex > -1);
      target !== null && target !== void 0 && target.focus();
    }

  },

  render(h) {
    return h('form', {
      staticClass: 'q-form',
      on: QForm_objectSpread({}, this.$listeners, {
        submit: this.submit,
        reset: this.reset
      })
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/form/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/header/QHeader.js









function QHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QHeader_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






/* harmony default export */ var QHeader = (vue_runtime_esm["a" /* default */].extend({
  name: 'QHeader',
  inject: {
    layout: {
      default() {
        console.error('QHeader needs to be child of QLayout');
      }

    }
  },
  props: {
    value: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    revealOffset: {
      type: Number,
      default: 250
    },
    bordered: Boolean,
    elevated: Boolean,
    heightHint: {
      type: [String, Number],
      default: 50
    }
  },

  data() {
    return {
      size: parseInt(this.heightHint, 10),
      revealed: true
    };
  },

  watch: {
    value(val) {
      this.__update('space', val);

      this.__updateLocal('revealed', true);

      this.layout.__animate();
    },

    offset(val) {
      this.__update('offset', val);
    },

    reveal(val) {
      val === false && this.__updateLocal('revealed', this.value);
    },

    revealed(val) {
      this.layout.__animate();

      this.$emit('reveal', val);
    },

    'layout.scroll'(scroll) {
      this.reveal === true && this.__updateLocal('revealed', scroll.direction === 'up' || scroll.position <= this.revealOffset || scroll.position - scroll.inflexionPosition < 100);
    }

  },
  computed: {
    fixed() {
      return this.reveal === true || this.layout.view.indexOf('H') > -1 || this.layout.container === true;
    },

    offset() {
      if (this.value !== true) {
        return 0;
      }

      if (this.fixed === true) {
        return this.revealed === true ? this.size : 0;
      }

      var offset = this.size - this.layout.scroll.position;
      return offset > 0 ? offset : 0;
    },

    classes() {
      return (this.fixed === true ? 'fixed' : 'absolute') + '-top' + (this.bordered === true ? ' q-header--bordered' : '') + (this.value !== true || this.fixed === true && this.revealed !== true ? ' q-header--hidden' : '');
    },

    style() {
      var view = this.layout.rows.top,
          css = {};

      if (view[0] === 'l' && this.layout.left.space === true) {
        css[this.$q.lang.rtl === true ? 'right' : 'left'] = "".concat(this.layout.left.size, "px");
      }

      if (view[2] === 'r' && this.layout.right.space === true) {
        css[this.$q.lang.rtl === true ? 'left' : 'right'] = "".concat(this.layout.right.size, "px");
      }

      return css;
    }

  },

  render(h) {
    var child = mergeSlot([h(QResizeObserver, {
      props: {
        debounce: 0
      },
      on: cache(this, 'resize', {
        resize: this.__onResize
      })
    })], this, 'default');
    this.elevated === true && child.push(h('div', {
      staticClass: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
    }));
    return h('header', {
      staticClass: 'q-header q-layout__section--marginal',
      class: this.classes,
      style: this.style,
      on: QHeader_objectSpread({}, this.$listeners, {
        input: event_stop
      })
    }, child);
  },

  created() {
    this.layout.instances.header = this;
    this.value === true && this.__update('size', this.size);

    this.__update('space', this.value);

    this.__update('offset', this.offset);
  },

  beforeDestroy() {
    if (this.layout.instances.header === this) {
      this.layout.instances.header = void 0;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },

  methods: {
    __onResize(_ref) {
      var height = _ref.height;

      this.__updateLocal('size', height);

      this.__update('size', height);
    },

    __update(prop, val) {
      if (this.layout.header[prop] !== val) {
        this.layout.header[prop] = val;
      }
    },

    __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/header/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/icon/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/img/QImg.js





/* harmony default export */ var QImg = (vue_runtime_esm["a" /* default */].extend({
  name: 'QImg',
  mixins: [mixins_ratio],
  props: {
    src: String,
    srcset: String,
    sizes: String,
    alt: String,
    placeholderSrc: String,
    basic: Boolean,
    contain: Boolean,
    position: {
      type: String,
      default: '50% 50%'
    },
    transition: {
      type: String,
      default: 'fade'
    },
    imgClass: [Array, String, Object],
    imgStyle: Object,
    noDefaultSpinner: Boolean,
    spinnerColor: String,
    spinnerSize: String
  },

  data() {
    return {
      currentSrc: '',
      image: null,
      isLoading: !!this.src,
      hasError: false,
      naturalRatio: void 0
    };
  },

  watch: {
    src() {
      this.__load();
    },

    srcset(val) {
      this.__updateWatcher(val);
    }

  },
  computed: {
    url() {
      return this.currentSrc || this.placeholderSrc || void 0;
    },

    attrs() {
      var att = {
        role: 'img'
      };

      if (this.alt !== void 0) {
        att['aria-label'] = this.alt;
      }

      return att;
    },

    style() {
      return Object.assign({
        backgroundSize: this.contain ? 'contain' : 'cover',
        backgroundPosition: this.position
      }, this.imgStyle, {
        backgroundImage: "url(\"".concat(this.url, "\")")
      });
    }

  },
  methods: {
    __onLoad(img) {
      this.isLoading = false;
      this.hasError = false;

      this.__computeRatio(img);

      this.__updateSrc();

      this.__updateWatcher(this.srcset);

      this.$emit('load', this.currentSrc);
    },

    __onError(err) {
      clearTimeout(this.ratioTimer);
      this.isLoading = false;
      this.hasError = true;
      this.currentSrc = '';
      this.$emit('error', err);
    },

    __updateSrc() {
      if (this.image !== void 0 && this.isLoading === false) {
        var src = this.image.currentSrc || this.image.src;

        if (this.currentSrc !== src) {
          this.currentSrc = src;
        }
      }
    },

    __updateWatcher(srcset) {
      if (srcset) {
        if (this.unwatch === void 0) {
          this.unwatch = this.$watch('$q.screen.width', this.__updateSrc);
        }
      } else if (this.unwatch !== void 0) {
        this.unwatch();
        this.unwatch = void 0;
      }
    },

    __load() {
      clearTimeout(this.ratioTimer);
      this.hasError = false;

      if (!this.src) {
        this.isLoading = false;
        this.image = void 0;
        this.currentSrc = '';
        return;
      }

      this.isLoading = true;
      var img = new Image();
      this.image = img;

      img.onerror = err => {
        // if we are still rendering same image
        if (this.image === img && this.destroyed !== true) {
          this.__onError(err);
        }
      };

      img.onload = () => {
        if (this.destroyed === true) {
          return;
        } // if we are still rendering same image


        if (this.image === img) {
          if (img.decode !== void 0) {
            img.decode().catch(err => {
              if (this.image === img && this.destroyed !== true) {
                this.__onError(err);
              }
            }).then(() => {
              if (this.image === img && this.destroyed !== true) {
                this.__onLoad(img);
              }
            });
          } else {
            this.__onLoad(img);
          }
        }
      };

      img.src = this.src;

      if (this.srcset) {
        img.srcset = this.srcset;
      }

      if (this.sizes) {
        img.sizes = this.sizes;
      }
    },

    __computeRatio(img) {
      var naturalHeight = img.naturalHeight,
          naturalWidth = img.naturalWidth;

      if (naturalHeight || naturalWidth) {
        this.naturalRatio = naturalHeight === 0 ? 1 : naturalWidth / naturalHeight;
      } else {
        this.ratioTimer = setTimeout(() => {
          if (this.image === img && this.destroyed !== true) {
            this.__computeRatio(img);
          }
        }, 100);
      }
    },

    __getImage(h) {
      var content = this.url !== void 0 ? h('div', {
        key: this.url,
        staticClass: 'q-img__image absolute-full',
        class: this.imgClass,
        style: this.style
      }) : null;
      return this.basic === true ? content : h('transition', {
        props: {
          name: 'q-transition--' + this.transition
        }
      }, [content]);
    },

    __getContent(h) {
      var slotVm = slot_slot(this, this.hasError === true ? 'error' : 'default');

      if (this.basic === true) {
        return h('div', {
          key: 'content',
          staticClass: 'q-img__content absolute-full'
        }, slotVm);
      }

      var content = this.isLoading === true ? h('div', {
        key: 'placeholder',
        staticClass: 'q-img__loading absolute-full flex flex-center'
      }, this.$scopedSlots.loading !== void 0 ? this.$scopedSlots.loading() : this.noDefaultSpinner === false ? [h(QSpinner, {
        props: {
          color: this.spinnerColor,
          size: this.spinnerSize
        }
      })] : null) : h('div', {
        key: 'content',
        staticClass: 'q-img__content absolute-full'
      }, slotVm);
      return h('transition', {
        props: {
          name: 'q-transition--fade'
        }
      }, [content]);
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-img overflow-hidden',
      attrs: this.attrs,
      on: this.$listeners
    }, [h('div', {
      style: this.ratioStyle
    }), this.__getImage(h), this.__getContent(h)]);
  },

  beforeMount() {
    if (this.placeholderSrc !== void 0 && this.ratio === void 0) {
      var img = new Image();
      img.src = this.placeholderSrc;

      this.__computeRatio(img);
    }

    this.isLoading === true && this.__load();
  },

  beforeDestroy() {
    this.destroyed = true;
    clearTimeout(this.ratioTimer);
    this.unwatch !== void 0 && this.unwatch();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/img/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/infinite-scroll/QInfiniteScroll.js








/* harmony default export */ var QInfiniteScroll = (vue_runtime_esm["a" /* default */].extend({
  name: 'QInfiniteScroll',
  props: {
    offset: {
      type: Number,
      default: 500
    },
    debounce: {
      type: [String, Number],
      default: 100
    },
    scrollTarget: {},
    disable: Boolean,
    reverse: Boolean
  },

  data() {
    return {
      index: 0,
      fetching: false,
      working: true
    };
  },

  watch: {
    disable(val) {
      if (val === true) {
        this.stop();
      } else {
        this.resume();
      }
    },

    scrollTarget() {
      this.updateScrollTarget();
    },

    debounce(val) {
      this.__setDebounce(val);
    }

  },
  methods: {
    poll() {
      if (this.disable === true || this.fetching === true || this.working === false) {
        return;
      }

      var scrollHeight = getScrollHeight(this.scrollContainer),
          scrollPosition = getScrollPosition(this.scrollContainer),
          containerHeight = dom_height(this.scrollContainer);

      if (this.reverse === false) {
        if (scrollPosition + containerHeight + this.offset >= scrollHeight) {
          this.trigger();
        }
      } else {
        if (scrollPosition < this.offset) {
          this.trigger();
        }
      }
    },

    trigger() {
      if (this.disable === true || this.fetching === true || this.working === false) {
        return;
      }

      this.index++;
      this.fetching = true;
      var heightBefore = getScrollHeight(this.scrollContainer);
      this.$emit('load', this.index, stop => {
        if (this.working === true) {
          this.fetching = false;
          this.$nextTick(() => {
            if (this.reverse === true) {
              var heightAfter = getScrollHeight(this.scrollContainer),
                  scrollPosition = getScrollPosition(this.scrollContainer),
                  heightDifference = heightAfter - heightBefore;
              setScrollPosition(this.scrollContainer, scrollPosition + heightDifference);
            }

            if (stop === true) {
              this.stop();
            } else {
              this.$el.closest('body') && this.poll();
            }
          });
        }
      });
    },

    reset() {
      this.index = 0;
    },

    resume() {
      if (this.working === false) {
        this.working = true;
        this.scrollContainer.addEventListener('scroll', this.poll, listenOpts.passive);
      }

      this.immediatePoll();
    },

    stop() {
      if (this.working === true) {
        this.working = false;
        this.fetching = false;
        this.scrollContainer.removeEventListener('scroll', this.poll, listenOpts.passive);
      }
    },

    updateScrollTarget() {
      if (this.scrollContainer && this.working === true) {
        this.scrollContainer.removeEventListener('scroll', this.poll, listenOpts.passive);
      }

      if (typeof this.scrollTarget === 'string') {
        this.scrollContainer = document.querySelector(this.scrollTarget);

        if (this.scrollContainer === null) {
          console.error("InfiniteScroll: scroll target container \"".concat(this.scrollTarget, "\" not found"), this);
          return;
        }
      } else {
        this.scrollContainer = this.scrollTarget === document.defaultView || this.scrollTarget instanceof Element ? this.scrollTarget : getScrollTarget(this.$el);
      }

      if (this.working === true) {
        this.scrollContainer.addEventListener('scroll', this.poll, listenOpts.passive);
      }
    },

    __setDebounce(val) {
      val = parseInt(val, 10);

      if (val <= 0) {
        this.poll = this.immediatePoll;
      } else {
        this.poll = debounce(this.immediatePoll, isNaN(val) === true ? 100 : val);
      }
    }

  },

  mounted() {
    this.immediatePoll = this.poll;

    this.__setDebounce(this.debounce);

    this.updateScrollTarget();
    this.immediatePoll();

    if (this.reverse === true) {
      var scrollHeight = getScrollHeight(this.scrollContainer),
          containerHeight = dom_height(this.scrollContainer);
      setScrollPosition(this.scrollContainer, scrollHeight - containerHeight);
    }
  },

  beforeDestroy() {
    if (this.working === true) {
      this.scrollContainer.removeEventListener('scroll', this.poll, listenOpts.passive);
    }
  },

  render(h) {
    var child = uniqueSlot(this, 'default', []);

    if (this.disable !== true && this.working === true) {
      child[this.reverse === false ? 'push' : 'unshift'](h('div', {
        staticClass: 'q-infinite-scroll__loading',
        class: this.fetching === true ? '' : 'invisible'
      }, slot_slot(this, 'loading')));
    }

    return h('div', {
      staticClass: 'q-infinite-scroll'
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/infinite-scroll/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/inner-loading/QInnerLoading.js





/* harmony default export */ var QInnerLoading = (vue_runtime_esm["a" /* default */].extend({
  name: 'QInnerLoading',
  mixins: [mixins_dark, transition],
  props: {
    showing: Boolean,
    color: String,
    size: {
      type: [String, Number],
      default: 42
    }
  },

  render(h) {
    var child = this.showing === true ? [h('div', {
      staticClass: 'q-inner-loading absolute-full column flex-center',
      class: this.isDark === true ? 'q-inner-loading--dark' : null,
      on: this.$listeners
    }, this.$scopedSlots.default !== void 0 ? this.$scopedSlots.default() : [h(QSpinner, {
      props: {
        size: this.size,
        color: this.color
      }
    })])] : void 0;
    return h('transition', {
      props: {
        name: this.transition
      }
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/inner-loading/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/input/index.js


// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
var es_symbol_description = __webpack_require__("e01a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
var es_symbol_iterator = __webpack_require__("d28b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
var es_string_iterator = __webpack_require__("3ca3");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js








function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js



function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/Intersection.js



var defaultCfg = {
  threshold: 0,
  root: null,
  rootMargin: '0px'
};

function Intersection_update(el, ctx, _ref) {
  var modifiers = _ref.modifiers,
      value = _ref.value;
  ctx.once = modifiers.once;
  var handler, cfg, changed;

  if (typeof value === 'function') {
    handler = value;
    cfg = defaultCfg;
    changed = ctx.cfg === void 0;
  } else {
    handler = value.handler;
    cfg = Object.assign({}, defaultCfg, value.cfg);
    changed = ctx.cfg === void 0 || isDeepEqual(ctx.cfg, cfg) === false;
  }

  if (ctx.handler !== handler) {
    ctx.handler = handler;
  }

  if (changed === true) {
    ctx.cfg = cfg;
    ctx.observer !== void 0 && ctx.observer.unobserve(el);
    ctx.observer = new IntersectionObserver((_ref2) => {
      var _ref3 = _slicedToArray(_ref2, 1),
          entry = _ref3[0];

      if (typeof ctx.handler === 'function') {
        var res = ctx.handler(entry, ctx.observer);

        if (res === false || ctx.once === true && entry.isIntersecting === true) {
          destroy(el);
        }
      }
    }, cfg);
    ctx.observer.observe(el);
  }
}

function destroy(el) {
  var ctx = el.__qvisible;

  if (ctx !== void 0) {
    ctx.observer !== void 0 && ctx.observer.unobserve(el);
    delete el.__qvisible;
  }
}

/* harmony default export */ var Intersection = ({
  name: 'intersection',

  inserted(el, binding) {
    var ctx = {};
    Intersection_update(el, ctx, binding);
    el.__qvisible = ctx;
  },

  update(el, binding) {
    var ctx = el.__qvisible;
    ctx !== void 0 && Intersection_update(el, ctx, binding);
  },

  unbind: destroy
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/intersection/QIntersection.js




/* harmony default export */ var QIntersection = (vue_runtime_esm["a" /* default */].extend({
  name: 'QIntersection',
  directives: {
    Intersection: Intersection
  },
  props: {
    once: Boolean,
    transition: String,
    margin: String,
    threshold: [Number, Array],
    disable: Boolean
  },

  data() {
    return {
      showing: false
    };
  },

  computed: {
    value() {
      return this.margin !== void 0 || this.threshold !== void 0 ? {
        handler: this.__trigger,
        cfg: {
          rootMargin: this.margin,
          threshold: this.threshold
        }
      } : this.__trigger;
    }

  },
  methods: {
    __trigger(entry) {
      if (this.showing !== entry.isIntersecting) {
        this.showing = entry.isIntersecting;

        if (this.$listeners.visibility !== void 0) {
          this.$emit('visibility', this.showing);
        }
      }
    }

  },

  render(h) {
    var content = this.showing === true ? [h('div', {
      key: 'content'
    }, slot_slot(this, 'default'))] : void 0;
    return h('div', {
      staticClass: 'q-intersection',
      directives: this.disable === true ? null : [{
        name: 'intersection',
        value: this.value,
        modifiers: {
          once: this.once
        }
      }]
    }, this.transition ? [h('transition', {
      props: {
        name: 'q-transition--' + this.transition
      }
    }, content)] : content);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/intersection/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/item/index.js





// CONCATENATED MODULE: ./node_modules/quasar/src/components/knob/QKnob.js












function QKnob_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QKnob_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QKnob_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QKnob_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







 // PGDOWN, LEFT, DOWN, PGUP, RIGHT, UP

var QKnob_keyCodes = [34, 37, 40, 33, 39, 38];
/* harmony default export */ var QKnob = (vue_runtime_esm["a" /* default */].extend({
  name: 'QKnob',
  mixins: [{
    props: QCircularProgress.options.props
  }],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    step: {
      type: Number,
      default: 1,
      validator: v => v >= 0
    },
    tabindex: {
      type: [Number, String],
      default: 0
    },
    disable: Boolean,
    readonly: Boolean
  },

  data() {
    return {
      model: this.value,
      dragging: false
    };
  },

  watch: {
    value(value) {
      if (value < this.min) {
        this.model = this.min;
      } else if (value > this.max) {
        this.model = this.max;
      } else {
        if (value !== this.model) {
          this.model = value;
        }

        return;
      }

      if (this.model !== this.value) {
        this.$emit('input', this.model);
        this.$emit('change', this.model);
      }
    }

  },
  computed: {
    classes() {
      return {
        disabled: this.disable,
        'q-knob--editable': this.editable
      };
    },

    editable() {
      return !this.disable && !this.readonly;
    },

    decimals() {
      return (String(this.step).trim('0').split('.')[1] || '').length;
    },

    computedStep() {
      return this.step === 0 ? 1 : this.step;
    },

    events() {
      return this.$q.platform.is.mobile === true ? {
        click: this.__click
      } : {
        mousedown: this.__activate,
        click: this.__click,
        keydown: this.__keydown,
        keyup: this.__keyup
      };
    }

  },
  methods: {
    __updateCenterPosition() {
      var _this$$el$getBounding = this.$el.getBoundingClientRect(),
          top = _this$$el$getBounding.top,
          left = _this$$el$getBounding.left,
          width = _this$$el$getBounding.width,
          height = _this$$el$getBounding.height;

      this.centerPosition = {
        top: top + height / 2,
        left: left + width / 2
      };
    },

    __pan(event) {
      if (event.isFinal) {
        this.__updatePosition(event.evt, true);

        this.dragging = false;
      } else if (event.isFirst) {
        this.__updateCenterPosition();

        this.dragging = true;

        this.__updatePosition(event.evt);
      } else {
        this.__updatePosition(event.evt);
      }
    },

    __click(evt) {
      this.__updateCenterPosition();

      this.__updatePosition(evt, true);
    },

    __keydown(evt) {
      if (!QKnob_keyCodes.includes(evt.keyCode)) {
        return;
      }

      stopAndPrevent(evt);
      var step = ([34, 33].includes(evt.keyCode) ? 10 : 1) * this.computedStep,
          offset = [34, 37, 40].includes(evt.keyCode) ? -step : step;
      this.model = between(parseFloat((this.model + offset).toFixed(this.decimals)), this.min, this.max);

      this.__updateValue();
    },

    __keyup(evt) {
      if (QKnob_keyCodes.includes(evt.keyCode)) {
        this.__updateValue(true);
      }
    },

    __activate(evt) {
      this.__updateCenterPosition();

      this.__updatePosition(evt);

      this.__updateValue();
    },

    __updatePosition(evt, change) {
      var center = this.centerPosition,
          pos = event_position(evt),
          height = Math.abs(pos.top - center.top),
          distance = Math.sqrt(Math.pow(height, 2) + Math.pow(Math.abs(pos.left - center.left), 2));
      var angle = Math.asin(height / distance) * (180 / Math.PI);

      if (pos.top < center.top) {
        angle = center.left < pos.left ? 90 - angle : 270 + angle;
      } else {
        angle = center.left < pos.left ? angle + 90 : 270 - angle;
      }

      if (this.angle) {
        angle = normalizeToInterval(angle - this.angle, 0, 360);
      }

      if (this.$q.lang.rtl === true) {
        angle = 360 - angle;
      }

      var model = this.min + angle / 360 * (this.max - this.min);

      if (this.step !== 0) {
        var step = this.computedStep,
            modulo = model % step;
        model = model - modulo + (Math.abs(modulo) >= step / 2 ? (modulo < 0 ? -1 : 1) * step : 0);
        model = parseFloat(model.toFixed(this.decimals));
      }

      model = between(model, this.min, this.max);
      this.$emit('drag-value', model);

      if (this.model !== model) {
        this.model = model;
      }

      this.__updateValue(change);
    },

    __updateValue(change) {
      this.value !== this.model && this.$emit('input', this.model);
      change === true && this.$emit('change', this.model);
    }

  },

  render(h) {
    var data = {
      staticClass: 'q-knob non-selectable',
      class: this.classes,
      props: QKnob_objectSpread({}, this.$props, {
        value: this.model,
        instantFeedback: this.dragging
      })
    };

    if (this.editable === true) {
      data.attrs = {
        tabindex: this.tabindex
      };
      data.on = this.events;
      data.directives = cache(this, 'dir', [{
        name: 'touch-pan',
        value: this.__pan,
        modifiers: {
          prevent: true,
          stop: true,
          mouse: true
        }
      }]);
    }

    return h(QCircularProgress, data, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/knob/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/scroll-observer/QScrollObserver.js




/* harmony default export */ var QScrollObserver = (vue_runtime_esm["a" /* default */].extend({
  name: 'QScrollObserver',
  props: {
    debounce: [String, Number],
    horizontal: Boolean
  },

  render() {},

  // eslint-disable-line
  data() {
    return {
      pos: 0,
      dir: this.horizontal === true ? 'right' : 'down',
      dirChanged: false,
      dirChangePos: 0
    };
  },

  methods: {
    getPosition() {
      return {
        position: this.pos,
        direction: this.dir,
        directionChanged: this.dirChanged,
        inflexionPosition: this.dirChangePos
      };
    },

    trigger(immediately) {
      if (immediately === true || this.debounce === 0 || this.debounce === '0') {
        this.__emit();
      } else if (!this.timer) {
        this.timer = this.debounce ? setTimeout(this.__emit, this.debounce) : requestAnimationFrame(this.__emit);
      }
    },

    __emit() {
      var pos = Math.max(0, this.horizontal === true ? getHorizontalScrollPosition(this.target) : getScrollPosition(this.target)),
          delta = pos - this.pos,
          dir = this.horizontal ? delta < 0 ? 'left' : 'right' : delta < 0 ? 'up' : 'down';
      this.dirChanged = this.dir !== dir;

      if (this.dirChanged) {
        this.dir = dir;
        this.dirChangePos = this.pos;
      }

      this.timer = null;
      this.pos = pos;
      this.$emit('scroll', this.getPosition());
    }

  },

  mounted() {
    this.target = getScrollTarget(this.$el.parentNode);
    this.target.addEventListener('scroll', this.trigger, listenOpts.passive);
    this.trigger(true);
  },

  beforeDestroy() {
    clearTimeout(this.timer);
    cancelAnimationFrame(this.timer);
    this.target !== void 0 && this.target.removeEventListener('scroll', this.trigger, listenOpts.passive);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/layout/QLayout.js








/* harmony default export */ var QLayout = (vue_runtime_esm["a" /* default */].extend({
  name: 'QLayout',

  provide() {
    return {
      layout: this
    };
  },

  props: {
    container: Boolean,
    view: {
      type: String,
      default: 'hhh lpr fff',
      validator: v => /^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(v.toLowerCase())
    }
  },

  data() {
    return {
      // page related
      height: this.$q.screen.height,
      width: this.container === true ? 0 : this.$q.screen.width,
      // container only prop
      containerHeight: 0,
      scrollbarWidth: onSSR === true ? 0 : getScrollbarWidth(),
      header: {
        size: 0,
        offset: 0,
        space: false
      },
      right: {
        size: 300,
        offset: 0,
        space: false
      },
      footer: {
        size: 0,
        offset: 0,
        space: false
      },
      left: {
        size: 300,
        offset: 0,
        space: false
      },
      scroll: {
        position: 0,
        direction: 'down'
      }
    };
  },

  computed: {
    rows() {
      var rows = this.view.toLowerCase().split(' ');
      return {
        top: rows[0].split(''),
        middle: rows[1].split(''),
        bottom: rows[2].split('')
      };
    },

    style() {
      return this.container === true ? null : {
        minHeight: this.$q.screen.height + 'px'
      };
    },

    // used by container only
    targetStyle() {
      if (this.scrollbarWidth !== 0) {
        return {
          [this.$q.lang.rtl === true ? 'left' : 'right']: "".concat(this.scrollbarWidth, "px")
        };
      }
    },

    targetChildStyle() {
      if (this.scrollbarWidth !== 0) {
        return {
          [this.$q.lang.rtl === true ? 'right' : 'left']: 0,
          [this.$q.lang.rtl === true ? 'left' : 'right']: "-".concat(this.scrollbarWidth, "px"),
          width: "calc(100% + ".concat(this.scrollbarWidth, "px)")
        };
      }
    },

    totalWidth() {
      return this.width + this.scrollbarWidth;
    }

  },

  created() {
    this.instances = {};
  },

  render(h) {
    var layout = h('div', {
      staticClass: 'q-layout q-layout--' + (this.container === true ? 'containerized' : 'standard'),
      style: this.style
    }, mergeSlot([h(QScrollObserver, {
      on: cache(this, 'scroll', {
        scroll: this.__onPageScroll
      })
    }), h(QResizeObserver, {
      on: cache(this, 'resizeOut', {
        resize: this.__onPageResize
      })
    })], this, 'default'));
    return this.container === true ? h('div', {
      staticClass: 'q-layout-container overflow-hidden'
    }, [h(QResizeObserver, {
      on: cache(this, 'resizeIn', {
        resize: this.__onContainerResize
      })
    }), h('div', {
      staticClass: 'absolute-full',
      style: this.targetStyle
    }, [h('div', {
      staticClass: 'scroll',
      style: this.targetChildStyle
    }, [layout])])]) : layout;
  },

  methods: {
    __animate() {
      if (this.timer !== void 0) {
        clearTimeout(this.timer);
      } else {
        document.body.classList.add('q-body--layout-animate');
      }

      this.timer = setTimeout(() => {
        document.body.classList.remove('q-body--layout-animate');
        this.timer = void 0;
      }, 150);
    },

    __onPageScroll(data) {
      this.scroll = data;
      this.$listeners.scroll !== void 0 && this.$emit('scroll', data);
    },

    __onPageResize(_ref) {
      var height = _ref.height,
          width = _ref.width;
      var resized = false;

      if (this.height !== height) {
        resized = true;
        this.height = height;

        if (this.$listeners['scroll-height'] !== void 0) {
          this.$emit('scroll-height', height);
        }

        this.__updateScrollbarWidth();
      }

      if (this.width !== width) {
        resized = true;
        this.width = width;
      }

      if (resized === true && this.$listeners.resize !== void 0) {
        this.$emit('resize', {
          height,
          width
        });
      }
    },

    __onContainerResize(_ref2) {
      var height = _ref2.height;

      if (this.containerHeight !== height) {
        this.containerHeight = height;

        this.__updateScrollbarWidth();
      }
    },

    __updateScrollbarWidth() {
      if (this.container === true) {
        var width = this.height > this.containerHeight ? getScrollbarWidth() : 0;

        if (this.scrollbarWidth !== width) {
          this.scrollbarWidth = width;
        }
      }
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/layout/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/markup-table/QMarkupTable.js






/* harmony default export */ var QMarkupTable = (vue_runtime_esm["a" /* default */].extend({
  name: 'QMarkupTable',
  mixins: [mixins_dark],
  props: {
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    separator: {
      type: String,
      default: 'horizontal',
      validator: v => ['horizontal', 'vertical', 'cell', 'none'].includes(v)
    },
    wrapCells: Boolean
  },
  computed: {
    classes() {
      return "q-table--".concat(this.separator, "-separator") + (this.isDark === true ? " q-table--dark q-table__card--dark q-dark" : '') + (this.dense === true ? " q-table--dense" : '') + (this.flat === true ? " q-table--flat" : '') + (this.bordered === true ? " q-table--bordered" : '') + (this.square === true ? " q-table--square" : '') + (this.wrapCells === false ? " q-table--no-wrap" : '');
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-markup-table q-table__container q-table__card',
      class: this.classes,
      on: this.$listeners
    }, [h('table', {
      staticClass: 'q-table'
    }, slot_slot(this, 'default'))]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/markup-table/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/menu/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/no-ssr/QNoSsr.js



/* harmony default export */ var QNoSsr = (vue_runtime_esm["a" /* default */].extend({
  name: 'QNoSsr',
  mixins: [can_render],
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    placeholder: String
  },

  render(h) {
    if (this.canRender === true) {
      var _node = slot_slot(this, 'default');

      return _node === void 0 ? _node : _node.length > 1 ? h(this.tag, _node) : _node[0];
    }

    var node = slot_slot(this, 'placeholder');

    if (node !== void 0) {
      return node.length > 1 ? h(this.tag, {
        staticClass: 'q-no-ssr-placeholder'
      }, node) : node[0];
    }

    if (this.placeholder !== void 0) {
      return h(this.tag, {
        staticClass: 'q-no-ssr-placeholder'
      }, [this.placeholder]);
    }
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/no-ssr/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/radio/QRadio.js






/* harmony default export */ var QRadio = (vue_runtime_esm["a" /* default */].extend({
  name: 'QRadio',
  mixins: [mixins_dark],
  props: {
    value: {
      required: true
    },
    val: {
      required: true
    },
    label: String,
    leftLabel: Boolean,
    color: String,
    keepColor: Boolean,
    dense: Boolean,
    disable: Boolean,
    tabindex: [String, Number]
  },
  computed: {
    isTrue() {
      return this.value === this.val;
    },

    classes() {
      return {
        'disabled': this.disable,
        'q-radio--dark': this.isDark,
        'q-radio--dense': this.dense,
        'reverse': this.leftLabel
      };
    },

    innerClass() {
      if (this.isTrue === true) {
        return 'q-radio__inner--active' + (this.color !== void 0 ? ' text-' + this.color : '');
      } else if (this.keepColor === true && this.color !== void 0) {
        return 'text-' + this.color;
      }
    },

    computedTabindex() {
      return this.disable === true ? -1 : this.tabindex || 0;
    }

  },
  methods: {
    set(e) {
      e !== void 0 && stopAndPrevent(e);

      if (this.disable !== true && this.isTrue !== true) {
        this.$emit('input', this.val);
      }
    }

  },

  render(h) {
    var content = [h('div', {
      staticClass: 'q-radio__bg absolute'
    }, [h('div', {
      staticClass: 'q-radio__outer-circle absolute-full'
    }), h('div', {
      staticClass: 'q-radio__inner-circle absolute-full'
    })])];
    this.disable !== true && content.unshift(h('input', {
      staticClass: 'q-radio__native q-ma-none q-pa-none invisible',
      attrs: {
        type: 'radio'
      }
    }));
    var child = [h('div', {
      staticClass: 'q-radio__inner relative-position no-pointer-events',
      class: this.innerClass
    }, content)];
    var label = this.label !== void 0 ? mergeSlot([this.label], this, 'default') : slot_slot(this, 'default');
    label !== void 0 && child.push(h('div', {
      staticClass: 'q-radio__label q-anchor--skip'
    }, label));
    return h('div', {
      staticClass: 'q-radio cursor-pointer no-outline row inline no-wrap items-center',
      class: this.classes,
      attrs: {
        tabindex: this.computedTabindex
      },
      on: cache(this, 'inpExt', {
        click: this.set,
        keydown: e => {
          if (e.keyCode === 13 || e.keyCode === 32) {
            stopAndPrevent(e);
          }
        },
        keyup: e => {
          if (e.keyCode === 13 || e.keyCode === 32) {
            this.set(e);
          }
        }
      })
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/toggle/QToggle.js





/* harmony default export */ var QToggle = (vue_runtime_esm["a" /* default */].extend({
  name: 'QToggle',
  mixins: [mixins_checkbox],
  props: {
    icon: String,
    checkedIcon: String,
    uncheckedIcon: String
  },
  computed: {
    classes() {
      return {
        'disabled': this.disable,
        'q-toggle--dark': this.isDark,
        'q-toggle--dense': this.dense,
        'reverse': this.leftLabel
      };
    },

    innerClass() {
      if (this.isTrue === true) {
        return 'q-toggle__inner--active' + (this.color !== void 0 ? ' text-' + this.color : '');
      } else if (this.keepColor === true && this.color !== void 0) {
        return 'text-' + this.color;
      }
    },

    computedIcon() {
      return (this.isTrue === true ? this.checkedIcon : this.uncheckedIcon) || this.icon;
    }

  },

  render(h) {
    var inner = [h('div', {
      staticClass: 'q-toggle__track'
    }), h('div', {
      staticClass: 'q-toggle__thumb-container absolute'
    }, [h('div', {
      staticClass: 'q-toggle__thumb row flex-center'
    }, this.computedIcon !== void 0 ? [h(QIcon, {
      props: {
        name: this.computedIcon
      }
    })] : void 0)])];
    this.disable !== true && inner.unshift(h('input', {
      staticClass: 'q-toggle__native absolute q-ma-none q-pa-none invisible',
      attrs: {
        type: 'checkbox'
      }
    }));
    var child = [h('div', {
      staticClass: 'q-toggle__inner relative-position no-pointer-events',
      class: this.innerClass
    }, inner)];
    var label = this.label !== void 0 ? mergeSlot([this.label], this, 'default') : slot_slot(this, 'default');
    label !== void 0 && child.push(h('div', {
      staticClass: 'q-toggle__label q-anchor--skip'
    }, label));
    return h('div', {
      staticClass: 'q-toggle cursor-pointer no-outline row inline no-wrap items-center',
      class: this.classes,
      attrs: {
        tabindex: this.computedTabindex
      },
      on: cache(this, 'inpExt', {
        click: this.toggle,
        keydown: this.__onKeydown,
        keyup: this.__onKeyup
      })
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/option-group/QOptionGroup.js










var QOptionGroup_components = {
  radio: QRadio,
  checkbox: QCheckbox,
  toggle: QToggle
};
/* harmony default export */ var QOptionGroup = (vue_runtime_esm["a" /* default */].extend({
  name: 'QOptionGroup',
  mixins: [mixins_dark],
  props: {
    value: {
      required: true
    },
    options: {
      type: Array,

      validator(opts) {
        return opts.every(opt => 'value' in opt && 'label' in opt);
      }

    },
    type: {
      default: 'radio',
      validator: v => ['radio', 'checkbox', 'toggle'].includes(v)
    },
    color: String,
    keepColor: Boolean,
    dense: Boolean,
    leftLabel: Boolean,
    inline: Boolean,
    disable: Boolean
  },
  computed: {
    component() {
      return QOptionGroup_components[this.type];
    },

    model() {
      return Array.isArray(this.value) ? this.value.slice() : this.value;
    }

  },
  methods: {
    __update(value) {
      this.$emit('input', value);
    }

  },

  created() {
    var isArray = Array.isArray(this.value);

    if (this.type === 'radio') {
      if (isArray) {
        console.error('q-option-group: model should not be array');
      }
    } else if (!isArray) {
      console.error('q-option-group: model should be array in your case');
    }
  },

  render(h) {
    return h('div', {
      staticClass: 'q-option-group q-gutter-x-sm',
      class: this.inline ? 'q-option-group--inline' : null
    }, this.options.map(opt => h('div', [h(this.component, {
      props: {
        value: this.value,
        val: opt.value,
        disable: this.disable || opt.disable,
        label: opt.label,
        leftLabel: this.leftLabel || opt.leftLabel,
        color: opt.color || this.color,
        checkedIcon: opt.checkedIcon,
        uncheckedIcon: opt.uncheckedIcon,
        dark: opt.dark || this.isDark,
        dense: this.dense,
        keepColor: opt.keepColor || this.keepColor
      },
      on: cache(this, 'inp', {
        input: this.__update
      })
    })])));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/option-group/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/page/QPage.js


/* harmony default export */ var QPage = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPage',
  inject: {
    pageContainer: {
      default() {
        console.error('QPage needs to be child of QPageContainer');
      }

    },
    layout: {}
  },
  props: {
    padding: Boolean,
    styleFn: Function
  },
  computed: {
    style() {
      var offset = (this.layout.header.space === true ? this.layout.header.size : 0) + (this.layout.footer.space === true ? this.layout.footer.size : 0);

      if (typeof this.styleFn === 'function') {
        var height = this.layout.container === true ? this.layout.containerHeight : this.$q.screen.height;
        return this.styleFn(offset, height);
      }

      return {
        minHeight: this.layout.container === true ? this.layout.containerHeight - offset + 'px' : this.$q.screen.height === 0 ? "calc(100vh - ".concat(offset, "px)") : this.$q.screen.height - offset + 'px'
      };
    },

    classes() {
      if (this.padding === true) {
        return 'q-layout-padding';
      }
    }

  },

  render(h) {
    return h('main', {
      staticClass: 'q-page',
      style: this.style,
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/page/QPageContainer.js


/* harmony default export */ var QPageContainer = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPageContainer',
  inject: {
    layout: {
      default() {
        console.error('QPageContainer needs to be child of QLayout');
      }

    }
  },
  provide: {
    pageContainer: true
  },
  computed: {
    style() {
      var css = {};

      if (this.layout.header.space === true) {
        css.paddingTop = "".concat(this.layout.header.size, "px");
      }

      if (this.layout.right.space === true) {
        css["padding".concat(this.$q.lang.rtl === true ? 'Left' : 'Right')] = "".concat(this.layout.right.size, "px");
      }

      if (this.layout.footer.space === true) {
        css.paddingBottom = "".concat(this.layout.footer.size, "px");
      }

      if (this.layout.left.space === true) {
        css["padding".concat(this.$q.lang.rtl === true ? 'Right' : 'Left')] = "".concat(this.layout.left.size, "px");
      }

      return css;
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-page-container',
      style: this.style,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/page/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-sticky/QPageSticky.js





/* harmony default export */ var QPageSticky = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPageSticky',
  inject: {
    layout: {
      default() {
        console.error('QPageSticky needs to be child of QLayout');
      }

    }
  },
  props: {
    position: {
      type: String,
      default: 'bottom-right',
      validator: v => ['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top', 'right', 'bottom', 'left'].includes(v)
    },
    offset: {
      type: Array,
      validator: v => v.length === 2
    },
    expand: Boolean
  },
  computed: {
    attach() {
      var pos = this.position;
      return {
        top: pos.indexOf('top') > -1,
        right: pos.indexOf('right') > -1,
        bottom: pos.indexOf('bottom') > -1,
        left: pos.indexOf('left') > -1,
        vertical: pos === 'top' || pos === 'bottom',
        horizontal: pos === 'left' || pos === 'right'
      };
    },

    top() {
      return this.layout.header.offset;
    },

    right() {
      return this.layout.right.offset;
    },

    bottom() {
      return this.layout.footer.offset;
    },

    left() {
      return this.layout.left.offset;
    },

    style() {
      var posX = 0,
          posY = 0;
      var attach = this.attach,
          dir = this.$q.lang.rtl === true ? -1 : 1;

      if (attach.top === true && this.top !== 0) {
        posY = "".concat(this.top, "px");
      } else if (attach.bottom === true && this.bottom !== 0) {
        posY = "".concat(-this.bottom, "px");
      }

      if (attach.left === true && this.left !== 0) {
        posX = "".concat(dir * this.left, "px");
      } else if (attach.right === true && this.right !== 0) {
        posX = "".concat(-dir * this.right, "px");
      }

      var css = {
        transform: "translate(".concat(posX, ", ").concat(posY, ")")
      };

      if (this.offset) {
        css.margin = "".concat(this.offset[1], "px ").concat(this.offset[0], "px");
      }

      if (attach.vertical === true) {
        if (this.left !== 0) {
          css[this.$q.lang.rtl === true ? 'right' : 'left'] = "".concat(this.left, "px");
        }

        if (this.right !== 0) {
          css[this.$q.lang.rtl === true ? 'left' : 'right'] = "".concat(this.right, "px");
        }
      } else if (attach.horizontal === true) {
        if (this.top !== 0) {
          css.top = "".concat(this.top, "px");
        }

        if (this.bottom !== 0) {
          css.bottom = "".concat(this.bottom, "px");
        }
      }

      return css;
    },

    classes() {
      return "fixed-".concat(this.position, " q-page-sticky--").concat(this.expand === true ? 'expand' : 'shrink');
    }

  },

  render(h) {
    var content = slot_slot(this, 'default');
    return h('div', {
      staticClass: 'q-page-sticky row flex-center',
      class: this.classes,
      style: this.style
    }, this.expand === true ? content : [h('div', content)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-scroller/QPageScroller.js








function QPageScroller_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QPageScroller_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QPageScroller_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QPageScroller_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ var QPageScroller = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPageScroller',
  mixins: [QPageSticky],
  props: {
    scrollOffset: {
      type: Number,
      default: 1000
    },
    duration: {
      type: Number,
      default: 300
    },
    offset: {
      default: () => [18, 18]
    }
  },
  inject: {
    layout: {
      default() {
        console.error('QPageScroller needs to be used within a QLayout');
      }

    }
  },

  data() {
    return {
      showing: this.__isVisible(this.layout.scroll.position)
    };
  },

  watch: {
    'layout.scroll.position'(val) {
      var newVal = this.__isVisible(val);

      if (this.showing !== newVal) {
        this.showing = newVal;
      }
    }

  },
  methods: {
    __isVisible(val) {
      return val > this.scrollOffset;
    },

    __onClick(e) {
      var target = this.layout.container === true ? getScrollTarget(this.$el) : getScrollTarget(this.layout.$el);
      setScrollPosition(target, 0, this.duration);
      this.$listeners.click !== void 0 && this.$emit('click', e);
    }

  },

  render(h) {
    return h('transition', {
      props: {
        name: 'q-transition--fade'
      }
    }, this.showing === true ? [h('div', {
      staticClass: 'q-page-scroller',
      on: QPageScroller_objectSpread({}, this.$listeners, {
        click: this.__onClick
      })
    }, [QPageSticky.options.render.call(this, h)])] : null);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-scroller/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-sticky/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/pagination/QPagination.js










function QPagination_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QPagination_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QPagination_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QPagination_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









/* harmony default export */ var QPagination = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPagination',
  mixins: [mixins_dark],
  props: {
    value: {
      type: Number,
      required: true
    },
    min: {
      type: Number,
      default: 1
    },
    max: {
      type: Number,
      required: true
    },
    color: {
      type: String,
      default: 'primary'
    },
    textColor: String,
    inputStyle: [Array, String, Object],
    inputClass: [Array, String, Object],
    size: String,
    disable: Boolean,
    input: Boolean,
    toFn: Function,
    boundaryLinks: {
      type: Boolean,
      default: null
    },
    boundaryNumbers: {
      type: Boolean,
      default: null
    },
    directionLinks: {
      type: Boolean,
      default: null
    },
    ellipses: {
      type: Boolean,
      default: null
    },
    maxPages: {
      type: Number,
      default: 0,
      validator: v => v >= 0
    }
  },

  data() {
    return {
      newPage: null
    };
  },

  watch: {
    min(value) {
      this.model = this.value;
    },

    max(value) {
      this.model = this.value;
    }

  },
  computed: {
    model: {
      get() {
        return this.value;
      },

      set(val) {
        val = parseInt(val, 10);

        if (this.disable || isNaN(val) || val === 0) {
          return;
        }

        var value = between(val, this.min, this.max);
        this.$emit('input', value);
      }

    },

    inputPlaceholder() {
      return this.model + ' / ' + this.max;
    },

    __boundaryLinks() {
      return this.__getBool(this.boundaryLinks, this.input);
    },

    __boundaryNumbers() {
      return this.__getBool(this.boundaryNumbers, !this.input);
    },

    __directionLinks() {
      return this.__getBool(this.directionLinks, this.input);
    },

    __ellipses() {
      return this.__getBool(this.ellipses, !this.input);
    },

    icons() {
      var ico = [this.$q.iconSet.pagination.first, this.$q.iconSet.pagination.prev, this.$q.iconSet.pagination.next, this.$q.iconSet.pagination.last];
      return this.$q.lang.rtl === true ? ico.reverse() : ico;
    }

  },
  methods: {
    set(value) {
      this.model = value;
    },

    setByOffset(offset) {
      this.model = this.model + offset;
    },

    __update() {
      this.model = this.newPage;
      this.newPage = null;
    },

    __getBool(val, otherwise) {
      return [true, false].includes(val) ? val : otherwise;
    },

    __getBtn(h, data, props, page) {
      data.props = QPagination_objectSpread({
        color: this.color,
        flat: true,
        size: this.size
      }, props);

      if (page !== void 0) {
        if (this.toFn !== void 0) {
          data.props.to = this.toFn(page);
        } else {
          data.on = {
            click: () => this.set(page)
          };
        }
      }

      return h(QBtn, data);
    }

  },

  render(h) {
    var contentStart = [],
        contentEnd = [],
        contentMiddle = [];

    if (this.__boundaryLinks) {
      contentStart.push(this.__getBtn(h, {
        key: 'bls'
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[0]
      }, this.min));
      contentEnd.unshift(this.__getBtn(h, {
        key: 'ble'
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[3]
      }, this.max));
    }

    if (this.__directionLinks) {
      contentStart.push(this.__getBtn(h, {
        key: 'bdp'
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[1]
      }, this.value - 1));
      contentEnd.unshift(this.__getBtn(h, {
        key: 'bdn'
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[2]
      }, this.value + 1));
    }

    if (this.input === true) {
      contentMiddle.push(h(QInput, {
        staticClass: 'inline',
        style: {
          width: "".concat(this.inputPlaceholder.length / 1.5, "em")
        },
        props: {
          type: 'number',
          dense: true,
          value: this.newPage,
          disable: this.disable,
          dark: this.isDark,
          borderless: true,
          inputClass: this.inputClass,
          inputStyle: this.inputStyle
        },
        attrs: {
          placeholder: this.inputPlaceholder,
          min: this.min,
          max: this.max
        },
        on: cache(this, 'inp', {
          input: value => {
            this.newPage = value;
          },
          keyup: e => {
            isKeyCode(e, 13) === true && this.__update();
          },
          blur: this.__update
        })
      }));
    } else {
      // is type select
      var maxPages = Math.max(this.maxPages, 1 + (this.__ellipses ? 2 : 0) + (this.__boundaryNumbers ? 2 : 0)),
          pgFrom = this.min,
          pgTo = this.max,
          ellipsesStart = false,
          ellipsesEnd = false,
          boundaryStart = false,
          boundaryEnd = false;

      if (this.maxPages && maxPages < this.max - this.min + 1) {
        maxPages = 1 + Math.floor(maxPages / 2) * 2;
        pgFrom = Math.max(this.min, Math.min(this.max - maxPages + 1, this.value - Math.floor(maxPages / 2)));
        pgTo = Math.min(this.max, pgFrom + maxPages - 1);

        if (this.__boundaryNumbers) {
          boundaryStart = true;
          pgFrom += 1;
        }

        if (this.__ellipses && pgFrom > this.min + (this.__boundaryNumbers ? 1 : 0)) {
          ellipsesStart = true;
          pgFrom += 1;
        }

        if (this.__boundaryNumbers) {
          boundaryEnd = true;
          pgTo -= 1;
        }

        if (this.__ellipses && pgTo < this.max - (this.__boundaryNumbers ? 1 : 0)) {
          ellipsesEnd = true;
          pgTo -= 1;
        }
      }

      var style = {
        minWidth: "".concat(Math.max(2, String(this.max).length), "em")
      };

      if (boundaryStart) {
        var active = this.min === this.value;
        contentStart.push(this.__getBtn(h, {
          key: 'bns',
          style
        }, {
          disable: this.disable,
          flat: !active,
          textColor: active ? this.textColor : null,
          label: this.min,
          ripple: false
        }, this.min));
      }

      if (boundaryEnd) {
        var _active = this.max === this.value;

        contentEnd.unshift(this.__getBtn(h, {
          key: 'bne',
          style
        }, {
          disable: this.disable,
          flat: !_active,
          textColor: _active ? this.textColor : null,
          label: this.max,
          ripple: false
        }, this.max));
      }

      if (ellipsesStart) {
        contentStart.push(this.__getBtn(h, {
          key: 'bes',
          style
        }, {
          disable: this.disable,
          label: '…'
        }, pgFrom - 1));
      }

      if (ellipsesEnd) {
        contentEnd.unshift(this.__getBtn(h, {
          key: 'bee',
          style
        }, {
          disable: this.disable,
          label: '…'
        }, pgTo + 1));
      }

      for (var i = pgFrom; i <= pgTo; i++) {
        var _active2 = i === this.value;

        contentMiddle.push(this.__getBtn(h, {
          key: "bpg".concat(i),
          style
        }, {
          disable: this.disable,
          flat: !_active2,
          textColor: _active2 ? this.textColor : null,
          label: i,
          ripple: false
        }, i));
      }
    }

    return h('div', {
      staticClass: 'q-pagination row no-wrap items-center',
      class: {
        disabled: this.disable
      },
      on: this.$listeners
    }, [contentStart, h('div', {
      staticClass: 'row justify-center',
      on: this.input === true ? cache(this, 'stop', {
        input: event_stop
      }) : null
    }, [contentMiddle]), contentEnd]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/pagination/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/utils/frame-debounce.js
/* harmony default export */ var frame_debounce = (function (fn) {
  var wait = false,
      frame,
      callArgs;

  function debounced()
  /* ...args */
  {
    callArgs = arguments;

    if (wait === true) {
      return;
    }

    wait = true;
    frame = requestAnimationFrame(() => {
      fn.apply(this, callArgs);
      callArgs = void 0;
      wait = false;
    });
  }

  debounced.cancel = () => {
    window.cancelAnimationFrame(frame);
    wait = false;
  };

  return debounced;
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/parallax/QParallax.js







/* harmony default export */ var QParallax = (vue_runtime_esm["a" /* default */].extend({
  name: 'QParallax',
  props: {
    src: String,
    height: {
      type: Number,
      default: 500
    },
    speed: {
      type: Number,
      default: 1,
      validator: v => v >= 0 && v <= 1
    }
  },

  data() {
    return {
      scrolling: false,
      percentScrolled: 0
    };
  },

  watch: {
    height() {
      this.__updatePos();
    }

  },
  methods: {
    __update(percentage) {
      this.percentScrolled = percentage;
      this.$listeners.scroll !== void 0 && this.$emit('scroll', percentage);
    },

    __onResize() {
      if (this.scrollTarget) {
        this.mediaHeight = this.media.naturalHeight || this.media.videoHeight || dom_height(this.media);

        this.__updatePos();
      }
    },

    __updatePos() {
      var containerTop, containerHeight, containerBottom, top, bottom;

      if (this.scrollTarget === window) {
        containerTop = 0;
        containerHeight = window.innerHeight;
        containerBottom = containerHeight;
      } else {
        containerTop = dom_offset(this.scrollTarget).top;
        containerHeight = dom_height(this.scrollTarget);
        containerBottom = containerTop + containerHeight;
      }

      top = dom_offset(this.$el).top;
      bottom = top + this.height;

      if (bottom > containerTop && top < containerBottom) {
        var percent = (containerBottom - top) / (this.height + containerHeight);

        this.__setPos((this.mediaHeight - this.height) * percent * this.speed);

        this.__update(percent);
      }
    },

    __setPos(offset) {
      // apply it immediately without any delay
      this.media.style.transform = "translate3D(-50%,".concat(Math.round(offset), "px, 0)");
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-parallax',
      style: {
        height: "".concat(this.height, "px")
      },
      on: this.$listeners
    }, [h('div', {
      ref: 'mediaParent',
      staticClass: 'q-parallax__media absolute-full'
    }, this.$scopedSlots.media !== void 0 ? this.$scopedSlots.media() : [h('img', {
      ref: 'media',
      attrs: {
        src: this.src
      }
    })]), h('div', {
      staticClass: 'q-parallax__content absolute-full column flex-center'
    }, this.$scopedSlots.content !== void 0 ? this.$scopedSlots.content({
      percentScrolled: this.percentScrolled
    }) : slot_slot(this, 'default'))]);
  },

  beforeMount() {
    this.__setPos = frame_debounce(this.__setPos);
  },

  mounted() {
    this.__update = frame_debounce(this.__update);
    this.resizeHandler = frame_debounce(this.__onResize);
    this.media = this.$scopedSlots.media !== void 0 ? this.$refs.mediaParent.children[0] : this.$refs.media;
    this.media.onload = this.media.onloadstart = this.media.loadedmetadata = this.__onResize;
    this.scrollTarget = getScrollTarget(this.$el);
    window.addEventListener('resize', this.resizeHandler, listenOpts.passive);
    this.scrollTarget.addEventListener('scroll', this.__updatePos, listenOpts.passive);

    this.__onResize();
  },

  beforeDestroy() {
    window.removeEventListener('resize', this.resizeHandler, listenOpts.passive);
    this.scrollTarget !== void 0 && this.scrollTarget.removeEventListener('scroll', this.__updatePos, listenOpts.passive);
    this.media.onload = this.media.onloadstart = this.media.loadedmetadata = null;
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/parallax/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/utils/clone.js
/* harmony default export */ var utils_clone = (function (data) {
  var s = JSON.stringify(data);

  if (s) {
    return JSON.parse(s);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/popup-edit/QPopupEdit.js








function QPopupEdit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QPopupEdit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QPopupEdit_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QPopupEdit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









/* harmony default export */ var QPopupEdit = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPopupEdit',
  props: {
    value: {
      required: true
    },
    title: String,
    buttons: Boolean,
    labelSet: String,
    labelCancel: String,
    color: {
      type: String,
      default: 'primary'
    },
    validate: {
      type: Function,
      default: () => true
    },

    /* menu props overrides */
    cover: {
      type: Boolean,
      default: true
    },
    contentClass: String,

    /* end of menu props */
    disable: Boolean
  },

  data() {
    return {
      initialValue: ''
    };
  },

  computed: {
    classes() {
      return 'q-popup-edit' + (this.contentClass ? ' ' + this.contentClass : '');
    },

    defaultSlotScope() {
      return {
        initialValue: this.initialValue,
        value: this.value,
        emitValue: this.__emitValue,
        validate: this.validate,
        set: this.set,
        cancel: this.cancel
      };
    }

  },
  methods: {
    set() {
      if (this.__hasChanged()) {
        if (this.validate(this.value) === false) {
          return;
        }

        this.$emit('save', this.value, this.initialValue);
      }

      this.__close();
    },

    cancel() {
      if (this.__hasChanged()) {
        this.$emit('cancel', this.value, this.initialValue);
        this.$emit('input', this.initialValue);
      }

      this.__close();
    },

    __hasChanged() {
      return !isDeepEqual(this.value, this.initialValue);
    },

    __emitValue(val) {
      if (this.disable === true) {
        return;
      }

      this.$emit('input', val);
    },

    __close() {
      this.validated = true;
      this.$refs.menu.hide();
    },

    __reposition() {
      this.$nextTick(() => {
        this.$refs.menu.updatePosition();
      });
    },

    __getContent(h) {
      var title = slot_slot(this, 'title', this.title),
          child = this.$scopedSlots.default === void 0 ? [] : this.$scopedSlots.default(this.defaultSlotScope).slice();
      title && child.unshift(h('div', {
        staticClass: 'q-dialog__title q-mt-sm q-mb-sm'
      }, [title]));
      this.buttons === true && child.push(h('div', {
        staticClass: 'q-popup-edit__buttons row justify-center no-wrap'
      }, [h(QBtn, {
        props: {
          flat: true,
          color: this.color,
          label: this.labelCancel || this.$q.lang.label.cancel
        },
        on: cache(this, 'cancel', {
          click: this.cancel
        })
      }), h(QBtn, {
        props: {
          flat: true,
          color: this.color,
          label: this.labelSet || this.$q.lang.label.set
        },
        on: cache(this, 'ok', {
          click: this.set
        })
      })]));
      return child;
    }

  },

  render(h) {
    if (this.disable === true) {
      return;
    }

    return h(QMenu, {
      ref: 'menu',
      props: QPopupEdit_objectSpread({}, this.$attrs, {
        cover: this.cover,
        contentClass: this.classes
      }),
      on: cache(this, 'menu', {
        'before-show': () => {
          this.validated = false;
          this.initialValue = utils_clone(this.value);
          this.watcher = this.$watch('value', this.__reposition);
          this.$emit('before-show');
        },
        show: () => {
          this.$emit('show');
        },
        'before-hide': () => {
          this.watcher();

          if (this.validated === false && this.__hasChanged()) {
            this.$emit('cancel', this.value, this.initialValue);
            this.$emit('input', this.initialValue);
          }

          this.$emit('before-hide');
        },
        hide: () => {
          this.$emit('hide');
        },
        keyup: e => {
          isKeyCode(e, 13) === true && this.set();
        }
      })
    }, this.__getContent(h));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/popup-edit/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/popup-proxy/QPopupProxy.js










function QPopupProxy_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QPopupProxy_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QPopupProxy_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QPopupProxy_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






/* harmony default export */ var QPopupProxy = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPopupProxy',
  mixins: [mixins_anchor],
  props: {
    breakpoint: {
      type: [String, Number],
      default: 450
    }
  },

  data() {
    var breakpoint = parseInt(this.breakpoint, 10);
    return {
      type: this.$q.screen.width < breakpoint || this.$q.screen.height < breakpoint ? 'dialog' : 'menu'
    };
  },

  computed: {
    parsedBreakpoint() {
      return parseInt(this.breakpoint, 10);
    }

  },
  watch: {
    '$q.screen.width'(width) {
      if (this.$refs.popup.showing !== true) {
        this.__updateType(width, this.$q.screen.height, this.parsedBreakpoint);
      }
    },

    '$q.screen.height'(height) {
      if (this.$refs.popup.showing !== true) {
        this.__updateType(this.$q.screen.width, height, this.parsedBreakpoint);
      }
    },

    breakpoint(breakpoint) {
      if (this.$refs.popup.showing !== true) {
        this.__updateType(this.$q.screen.width, this.$q.screen.height, parseInt(breakpoint, 10));
      }
    }

  },
  methods: {
    toggle(evt) {
      this.$refs.popup.toggle(evt);
    },

    show(evt) {
      this.$refs.popup.show(evt);
    },

    hide(evt) {
      this.$refs.popup.hide(evt);
    },

    __onHide(evt) {
      this.__updateType(this.$q.screen.width, this.$q.screen.height, this.parsedBreakpoint);

      this.$emit('hide', evt);
    },

    __updateType(width, height, breakpoint) {
      var type = width < breakpoint || height < breakpoint ? 'dialog' : 'menu';

      if (this.type !== type) {
        this.type = type;
      }
    }

  },

  render(h) {
    var def = slot_slot(this, 'default');
    var props = this.type === 'menu' && def !== void 0 && def[0] !== void 0 && def[0].componentOptions !== void 0 && def[0].componentOptions.Ctor !== void 0 && def[0].componentOptions.Ctor.sealedOptions !== void 0 && ['QDate', 'QTime', 'QCarousel', 'QColor'].includes(def[0].componentOptions.Ctor.sealedOptions.name) ? {
      cover: true,
      maxHeight: '99vh'
    } : {};
    var data = {
      ref: 'popup',
      props: Object.assign(props, this.$attrs),
      on: QPopupProxy_objectSpread({}, this.$listeners, {
        hide: this.__onHide
      })
    };
    var component;

    if (this.type === 'dialog') {
      component = QDialog;
    } else {
      component = QMenu;
      data.props.contextMenu = this.contextMenu;
      data.props.noParentEvent = true;
      data.props.separateClosePopup = true;
    }

    return h(component, data, def);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/popup-proxy/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/linear-progress/QLinearProgress.js






function QLinearProgress_width(val) {
  return {
    transform: "scale3d(".concat(val, ",1,1)")
  };
}

var QLinearProgress_sizes = {
  xs: 2,
  sm: 4,
  md: 6,
  lg: 10,
  xl: 14
};
/* harmony default export */ var QLinearProgress = (vue_runtime_esm["a" /* default */].extend({
  name: 'QLinearProgress',
  mixins: [mixins_dark],
  props: {
    value: {
      type: Number,
      default: 0
    },
    buffer: Number,
    size: String,
    color: String,
    trackColor: String,
    reverse: Boolean,
    stripe: Boolean,
    indeterminate: Boolean,
    query: Boolean,
    rounded: Boolean
  },
  computed: {
    sizeStyle() {
      if (this.size !== void 0) {
        return {
          height: this.size in QLinearProgress_sizes ? "".concat(QLinearProgress_sizes[this.size], "px") : this.size
        };
      }
    },

    motion() {
      return this.indeterminate || this.query;
    },

    classes() {
      return {
        ["text-".concat(this.color)]: this.color !== void 0,
        'q-linear-progress--reverse': this.reverse === true || this.query === true,
        'rounded-borders': this.rounded === true
      };
    },

    trackStyle() {
      return QLinearProgress_width(this.buffer !== void 0 ? this.buffer : 1);
    },

    trackClass() {
      return 'q-linear-progress__track--' + (this.isDark === true ? 'dark' : 'light') + (this.trackColor !== void 0 ? " bg-".concat(this.trackColor) : '');
    },

    modelStyle() {
      return QLinearProgress_width(this.motion ? 1 : this.value);
    },

    modelClasses() {
      return "q-linear-progress__model--".concat(this.motion ? 'in' : '', "determinate");
    },

    stripeStyle() {
      return {
        width: this.value * 100 + '%'
      };
    }

  },

  render(h) {
    var child = [h('div', {
      staticClass: 'q-linear-progress__track absolute-full',
      style: this.trackStyle,
      class: this.trackClass
    }), h('div', {
      staticClass: 'q-linear-progress__model absolute-full',
      style: this.modelStyle,
      class: this.modelClasses
    })];
    this.stripe === true && this.motion === false && child.push(h('div', {
      staticClass: 'q-linear-progress__stripe absolute-full',
      style: this.stripeStyle
    }));
    return h('div', {
      staticClass: 'q-linear-progress',
      style: this.sizeStyle,
      class: this.classes,
      on: this.$listeners
    }, mergeSlot(child, this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/linear-progress/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/pull-to-refresh/QPullToRefresh.js









var PULLER_HEIGHT = 40,
    OFFSET_TOP = 20;
/* harmony default export */ var QPullToRefresh = (vue_runtime_esm["a" /* default */].extend({
  name: 'QPullToRefresh',
  directives: {
    TouchPan: TouchPan
  },
  props: {
    color: String,
    icon: String,
    noMouse: Boolean,
    disable: Boolean
  },

  data() {
    return {
      state: 'pull',
      pullRatio: 0,
      pulling: false,
      pullPosition: -PULLER_HEIGHT,
      animating: false,
      positionCSS: {}
    };
  },

  computed: {
    style() {
      return {
        opacity: this.pullRatio,
        transform: "translateY(".concat(this.pullPosition, "px) rotate(").concat(this.pullRatio * 360, "deg)")
      };
    }

  },
  methods: {
    trigger() {
      this.$emit('refresh', () => {
        this.__animateTo({
          pos: -PULLER_HEIGHT,
          ratio: 0
        }, () => {
          this.state = 'pull';
        });
      });
    },

    updateScrollTarget() {
      this.scrollContainer = getScrollTarget(this.$el);
    },

    __pull(event) {
      if (event.isFinal) {
        if (this.pulling) {
          this.pulling = false;

          if (this.state === 'pulled') {
            this.state = 'refreshing';

            this.__animateTo({
              pos: OFFSET_TOP
            });

            this.trigger();
          } else if (this.state === 'pull') {
            this.__animateTo({
              pos: -PULLER_HEIGHT,
              ratio: 0
            });
          }
        }

        return;
      }

      if (this.animating || this.state === 'refreshing') {
        return false;
      }

      if (event.isFirst) {
        if (getScrollPosition(this.scrollContainer) !== 0) {
          if (this.pulling) {
            this.pulling = false;
            this.state = 'pull';

            this.__animateTo({
              pos: -PULLER_HEIGHT,
              ratio: 0
            });
          }

          return false;
        }

        this.pulling = true;

        var _this$$el$getBounding = this.$el.getBoundingClientRect(),
            top = _this$$el$getBounding.top,
            left = _this$$el$getBounding.left;

        this.positionCSS = {
          top: top + 'px',
          left: left + 'px',
          width: window.getComputedStyle(this.$el).getPropertyValue('width')
        };
      }

      prevent(event.evt);
      var distance = Math.min(140, Math.max(0, event.distance.y));
      this.pullPosition = distance - PULLER_HEIGHT;
      this.pullRatio = between(distance / (OFFSET_TOP + PULLER_HEIGHT), 0, 1);
      var state = this.pullPosition > OFFSET_TOP ? 'pulled' : 'pull';

      if (this.state !== state) {
        this.state = state;
      }
    },

    __animateTo(_ref, done) {
      var pos = _ref.pos,
          ratio = _ref.ratio;
      this.animating = true;
      this.pullPosition = pos;

      if (ratio !== void 0) {
        this.pullRatio = ratio;
      }

      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.animating = false;
        done && done();
      }, 300);
    }

  },

  mounted() {
    this.updateScrollTarget();
  },

  beforeDestroy() {
    clearTimeout(this.timer);
  },

  render(h) {
    return h('div', {
      staticClass: 'q-pull-to-refresh overflow-hidden',
      directives: this.disable === true ? null : [{
        name: 'touch-pan',
        modifiers: {
          down: true,
          mightPrevent: true,
          mouse: this.noMouse !== true
        },
        value: this.__pull
      }]
    }, [h('div', {
      staticClass: 'q-pull-to-refresh__content',
      class: this.pulling ? 'no-pointer-events' : null
    }, slot_slot(this, 'default')), h('div', {
      staticClass: 'q-pull-to-refresh__puller-container fixed row flex-center no-pointer-events z-top',
      style: this.positionCSS
    }, [h('div', {
      staticClass: 'q-pull-to-refresh__puller row flex-center',
      style: this.style,
      class: this.animating ? 'q-pull-to-refresh__puller--animating' : null
    }, [this.state !== 'refreshing' ? h(QIcon, {
      props: {
        name: this.icon || this.$q.iconSet.pullToRefresh.icon,
        color: this.color,
        size: '32px'
      }
    }) : h(QSpinner, {
      props: {
        size: '24px',
        color: this.color
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/pull-to-refresh/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/radio/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/range/QRange.js













function QRange_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QRange_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QRange_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QRange_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






var dragType = {
  MIN: 0,
  RANGE: 1,
  MAX: 2
};
/* harmony default export */ var QRange = (vue_runtime_esm["a" /* default */].extend({
  name: 'QRange',
  mixins: [SliderMixin],
  props: {
    value: {
      type: Object,
      default: () => ({
        min: null,
        max: null
      }),

      validator(val) {
        return 'min' in val && 'max' in val;
      }

    },
    dragRange: Boolean,
    dragOnlyRange: Boolean,
    leftLabelColor: String,
    leftLabelTextColor: String,
    rightLabelColor: String,
    rightLabelTextColor: String,
    leftLabelValue: [String, Number],
    rightLabelValue: [String, Number]
  },

  data() {
    return {
      model: {
        min: this.value.min === null ? this.min : this.value.min,
        max: this.value.max === null ? this.max : this.value.max
      },
      curMinRatio: 0,
      curMaxRatio: 0
    };
  },

  watch: {
    'value.min'(val) {
      this.model.min = val === null ? this.min : val;
    },

    'value.max'(val) {
      this.model.max = val === null ? this.max : val;
    },

    min(value) {
      if (this.model.min < value) {
        this.model.min = value;
      }

      if (this.model.max < value) {
        this.model.max = value;
      }
    },

    max(value) {
      if (this.model.min > value) {
        this.model.min = value;
      }

      if (this.model.max > value) {
        this.model.max = value;
      }
    }

  },
  computed: {
    ratioMin() {
      return this.active === true ? this.curMinRatio : this.modelMinRatio;
    },

    ratioMax() {
      return this.active === true ? this.curMaxRatio : this.modelMaxRatio;
    },

    modelMinRatio() {
      return (this.model.min - this.min) / (this.max - this.min);
    },

    modelMaxRatio() {
      return (this.model.max - this.min) / (this.max - this.min);
    },

    trackStyle() {
      return {
        [this.horizProp]: 100 * this.ratioMin + '%',
        width: 100 * (this.ratioMax - this.ratioMin) + '%'
      };
    },

    minThumbStyle() {
      return {
        [this.horizProp]: 100 * this.ratioMin + '%',
        'z-index': this.__nextFocus === 'min' ? 2 : void 0
      };
    },

    maxThumbStyle() {
      return {
        [this.horizProp]: 100 * this.ratioMax + '%'
      };
    },

    minThumbClass() {
      if (this.preventFocus === false && this.focus === 'min') {
        return 'q-slider--focus';
      }
    },

    maxThumbClass() {
      if (this.preventFocus === false && this.focus === 'max') {
        return 'q-slider--focus';
      }
    },

    events() {
      if (this.editable === true) {
        if (this.$q.platform.is.mobile === true) {
          return {
            click: this.__mobileClick
          };
        }

        var evt = {
          mousedown: this.__activate
        };
        this.dragOnlyRange === true && Object.assign(evt, {
          focus: () => {
            this.__focus('both');
          },
          blur: this.__blur,
          keydown: this.__keydown,
          keyup: this.__keyup
        });
        return evt;
      }
    },

    minEvents() {
      if (this.editable === true && this.$q.platform.is.mobile !== true && this.dragOnlyRange !== true) {
        return {
          focus: () => {
            this.__focus('min');
          },
          blur: this.__blur,
          keydown: this.__keydown,
          keyup: this.__keyup
        };
      }
    },

    maxEvents() {
      if (this.editable === true && this.$q.platform.is.mobile !== true && this.dragOnlyRange !== true) {
        return {
          focus: () => {
            this.__focus('max');
          },
          blur: this.__blur,
          keydown: this.__keydown,
          keyup: this.__keyup
        };
      }
    },

    minPinClass() {
      var color = this.leftLabelColor || this.labelColor;

      if (color) {
        return "text-".concat(color);
      }
    },

    minPinTextClass() {
      var color = this.leftLabelTextColor || this.labelTextColor;

      if (color) {
        return "text-".concat(color);
      }
    },

    maxPinClass() {
      var color = this.rightLabelColor || this.labelColor;

      if (color) {
        return "text-".concat(color);
      }
    },

    maxPinTextClass() {
      var color = this.rightLabelTextColor || this.labelTextColor;

      if (color) {
        return "text-".concat(color);
      }
    },

    minLabel() {
      return this.leftLabelValue !== void 0 ? this.leftLabelValue : this.model.min;
    },

    maxLabel() {
      return this.rightLabelValue !== void 0 ? this.rightLabelValue : this.model.max;
    },

    minPinStyle() {
      var percent = this.reverse === true ? -this.ratioMin : this.ratioMin - 1;
      return this.__getPinStyle(percent, this.ratioMin);
    },

    maxPinStyle() {
      var percent = this.reverse === true ? -this.ratioMax : this.ratioMax - 1;
      return this.__getPinStyle(percent, this.ratioMax);
    }

  },
  methods: {
    __updateValue(change) {
      if (this.model.min !== this.value.min || this.model.max !== this.value.max) {
        this.$emit('input', this.model);
      }

      change === true && this.$emit('change', this.model);
    },

    __getDragging(event) {
      var _this$$el$getBounding = this.$el.getBoundingClientRect(),
          left = _this$$el$getBounding.left,
          width = _this$$el$getBounding.width,
          sensitivity = this.dragOnlyRange ? 0 : this.$refs.minThumb.offsetWidth / (2 * width),
          diff = this.max - this.min;

      var dragging = {
        left,
        width,
        valueMin: this.model.min,
        valueMax: this.model.max,
        ratioMin: (this.model.min - this.min) / diff,
        ratioMax: (this.model.max - this.min) / diff
      };
      var ratio = getRatio(event, dragging, this.isReversed),
          type;

      if (this.dragOnlyRange !== true && ratio < dragging.ratioMin + sensitivity) {
        type = dragType.MIN;
      } else if (this.dragOnlyRange === true || ratio < dragging.ratioMax - sensitivity) {
        if (this.dragRange || this.dragOnlyRange) {
          type = dragType.RANGE;
          Object.assign(dragging, {
            offsetRatio: ratio,
            offsetModel: getModel(ratio, this.min, this.max, this.step, this.decimals),
            rangeValue: dragging.valueMax - dragging.valueMin,
            rangeRatio: dragging.ratioMax - dragging.ratioMin
          });
        } else {
          type = dragging.ratioMax - ratio < ratio - dragging.ratioMin ? dragType.MAX : dragType.MIN;
        }
      } else {
        type = dragType.MAX;
      }

      dragging.type = type;
      this.__nextFocus = void 0;
      return dragging;
    },

    __updatePosition(event) {
      var dragging = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dragging;
      var ratio = getRatio(event, dragging, this.isReversed),
          model = getModel(ratio, this.min, this.max, this.step, this.decimals),
          pos;

      switch (dragging.type) {
        case dragType.MIN:
          if (ratio <= dragging.ratioMax) {
            pos = {
              minR: ratio,
              maxR: dragging.ratioMax,
              min: model,
              max: dragging.valueMax
            };
            this.__nextFocus = 'min';
          } else {
            pos = {
              minR: dragging.ratioMax,
              maxR: ratio,
              min: dragging.valueMax,
              max: model
            };
            this.__nextFocus = 'max';
          }

          break;

        case dragType.MAX:
          if (ratio >= dragging.ratioMin) {
            pos = {
              minR: dragging.ratioMin,
              maxR: ratio,
              min: dragging.valueMin,
              max: model
            };
            this.__nextFocus = 'max';
          } else {
            pos = {
              minR: ratio,
              maxR: dragging.ratioMin,
              min: model,
              max: dragging.valueMin
            };
            this.__nextFocus = 'min';
          }

          break;

        case dragType.RANGE:
          var ratioDelta = ratio - dragging.offsetRatio,
              minR = between(dragging.ratioMin + ratioDelta, 0, 1 - dragging.rangeRatio),
              modelDelta = model - dragging.offsetModel,
              min = between(dragging.valueMin + modelDelta, this.min, this.max - dragging.rangeValue);
          pos = {
            minR,
            maxR: minR + dragging.rangeRatio,
            min: parseFloat(min.toFixed(this.decimals)),
            max: parseFloat((min + dragging.rangeValue).toFixed(this.decimals))
          };
          break;
      }

      this.model = {
        min: pos.min,
        max: pos.max
      }; // If either of the values to be emitted are null, set them to the defaults the user has entered.

      if (this.model.min === null || this.model.max === null) {
        this.model.min = pos.min || this.min;
        this.model.max = pos.max || this.max;
      }

      if (this.snap !== true || this.step === 0) {
        this.curMinRatio = pos.minR;
        this.curMaxRatio = pos.maxR;
      } else {
        var diff = this.max - this.min;
        this.curMinRatio = (this.model.min - this.min) / diff;
        this.curMaxRatio = (this.model.max - this.min) / diff;
      }
    },

    __focus(which) {
      this.focus = which;
    },

    __keydown(evt) {
      if (!keyCodes.includes(evt.keyCode)) {
        return;
      }

      stopAndPrevent(evt);
      var step = ([34, 33].includes(evt.keyCode) ? 10 : 1) * this.computedStep,
          offset = [34, 37, 40].includes(evt.keyCode) ? -step : step;

      if (this.dragOnlyRange) {
        var interval = this.dragOnlyRange ? this.model.max - this.model.min : 0;
        var min = between(parseFloat((this.model.min + offset).toFixed(this.decimals)), this.min, this.max - interval);
        this.model = {
          min,
          max: parseFloat((min + interval).toFixed(this.decimals))
        };
      } else if (this.focus === false) {
        return;
      } else {
        var which = this.focus;
        this.model = QRange_objectSpread({}, this.model, {
          [which]: between(parseFloat((this.model[which] + offset).toFixed(this.decimals)), which === 'min' ? this.min : this.model.min, which === 'max' ? this.max : this.model.max)
        });
      }

      this.__updateValue();
    },

    __getThumb(h, which) {
      var child = [this.__getThumbSvg(h), h('div', {
        staticClass: 'q-slider__focus-ring'
      })];

      if (this.label === true || this.labelAlways === true) {
        child.push(h('div', {
          staticClass: 'q-slider__pin absolute',
          style: this[which + 'PinStyle'].pin,
          class: this[which + 'PinClass']
        }, [h('div', {
          staticClass: 'q-slider__pin-text-container',
          style: this[which + 'PinStyle'].pinTextContainer
        }, [h('span', {
          staticClass: 'q-slider__pin-text',
          class: this[which + 'PinTextClass']
        }, [this[which + 'Label']])])]), h('div', {
          staticClass: 'q-slider__arrow',
          class: this[which + 'PinClass']
        }));
      }

      return h('div', {
        ref: which + 'Thumb',
        staticClass: 'q-slider__thumb-container absolute non-selectable',
        style: this[which + 'ThumbStyle'],
        class: this[which + 'ThumbClass'],
        on: this[which + 'Events'],
        attrs: {
          tabindex: this.dragOnlyRange !== true ? this.computedTabindex : null
        }
      }, child);
    }

  },

  render(h) {
    return h('div', {
      staticClass: this.value.min === null || this.value.max === null ? 'q-slider--no-value' : void 0,
      attrs: {
        role: 'slider',
        'aria-valuemin': this.min,
        'aria-valuemax': this.max,
        'data-step': this.step,
        'aria-disabled': this.disable,
        tabindex: this.dragOnlyRange && !this.$q.platform.is.mobile ? this.computedTabindex : null
      },
      class: this.classes,
      on: this.events,
      directives: this.editable === true ? cache(this, 'dir', [{
        name: 'touch-pan',
        value: this.__pan,
        modifiers: {
          horizontal: true,
          prevent: true,
          stop: true,
          mouse: true,
          mouseAllDir: true
        }
      }]) : null
    }, [h('div', {
      staticClass: 'q-slider__track-container absolute overflow-hidden'
    }, [h('div', {
      staticClass: 'q-slider__track absolute',
      style: this.trackStyle
    }), this.markers === true ? h('div', {
      staticClass: 'q-slider__track-markers absolute-full fit',
      style: this.markerStyle
    }) : null]), this.__getThumb(h, 'min'), this.__getThumb(h, 'max')]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/range/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/rating/QRating.js








/* harmony default export */ var QRating = (vue_runtime_esm["a" /* default */].extend({
  name: 'QRating',
  mixins: [size],
  props: {
    value: {
      type: Number,
      required: true
    },
    max: {
      type: [String, Number],
      default: 5
    },
    icon: [String, Array],
    iconHalf: [String, Array],
    iconSelected: [String, Array],
    color: [String, Array],
    colorHalf: [String, Array],
    colorSelected: [String, Array],
    noReset: Boolean,
    noDimming: Boolean,
    readonly: Boolean,
    disable: Boolean
  },

  data() {
    return {
      mouseModel: 0
    };
  },

  computed: {
    editable() {
      return this.readonly !== true && this.disable !== true;
    },

    classes() {
      return "q-rating--".concat(this.editable === true ? '' : 'non-', "editable") + (this.noDimming === true ? ' q-rating--no-dimming' : '') + (this.disable === true ? ' disabled' : '') + (this.color !== void 0 && Array.isArray(this.color) === false ? " text-".concat(this.color) : '');
    },

    iconData() {
      var iconLen = Array.isArray(this.icon) === true ? this.icon.length : 0,
          selIconLen = Array.isArray(this.iconSelected) === true ? this.iconSelected.length : 0,
          halfIconLen = Array.isArray(this.iconHalf) === true ? this.iconHalf.length : 0,
          colorLen = Array.isArray(this.color) === true ? this.color.length : 0,
          selColorLen = Array.isArray(this.colorSelected) === true ? this.colorSelected.length : 0,
          halfColorLen = Array.isArray(this.colorHalf) === true ? this.colorHalf.length : 0;
      return {
        iconLen,
        icon: iconLen > 0 ? this.icon[iconLen - 1] : this.icon,
        selIconLen,
        selIcon: selIconLen > 0 ? this.iconSelected[selIconLen - 1] : this.iconSelected,
        halfIconLen,
        halfIcon: halfIconLen > 0 ? this.iconHalf[selIconLen - 1] : this.iconHalf,
        colorLen,
        color: colorLen > 0 ? this.color[colorLen - 1] : this.color,
        selColorLen,
        selColor: selColorLen > 0 ? this.colorSelected[selColorLen - 1] : this.colorSelected,
        halfColorLen,
        halfColor: halfColorLen > 0 ? this.colorHalf[halfColorLen - 1] : this.colorHalf
      };
    }

  },
  methods: {
    __set(value) {
      if (this.editable === true) {
        var model = between(parseInt(value, 10), 1, parseInt(this.max, 10)),
            newVal = this.noReset !== true && this.value === model ? 0 : model;
        newVal !== this.value && this.$emit('input', newVal);
        this.mouseModel = 0;
      }
    },

    __setHoverValue(value) {
      if (this.editable === true) {
        this.mouseModel = value;
      }
    },

    __keyup(e, i) {
      switch (e.keyCode) {
        case 13:
        case 32:
          this.__set(i);

          return stopAndPrevent(e);

        case 37: // LEFT ARROW

        case 40:
          // DOWN ARROW
          if (this.$refs["rt".concat(i - 1)]) {
            this.$refs["rt".concat(i - 1)].focus();
          }

          return stopAndPrevent(e);

        case 39: // RIGHT ARROW

        case 38:
          // UP ARROW
          if (this.$refs["rt".concat(i + 1)]) {
            this.$refs["rt".concat(i + 1)].focus();
          }

          return stopAndPrevent(e);
      }
    }

  },

  render(h) {
    var _this = this;

    var child = [],
        tabindex = this.editable === true ? 0 : null,
        icons = this.iconData,
        ceil = Math.ceil(this.value);
    var halfIndex = this.iconHalf === void 0 || ceil === this.value ? -1 : ceil;

    var _loop = function _loop(i) {
      var active = _this.mouseModel === 0 && _this.value >= i || _this.mouseModel > 0 && _this.mouseModel >= i,
          half = halfIndex === i && _this.mouseModel < i,
          exSelected = _this.mouseModel > 0 && (half === true ? ceil : _this.value) >= i && _this.mouseModel < i,
          name = half === true ? i <= icons.halfIconLen ? _this.iconHalf[i - 1] : icons.halfIcon : icons.selIcon !== void 0 && (active === true || exSelected === true) ? i <= icons.selIconLen ? _this.iconSelected[i - 1] : icons.selIcon : i <= icons.iconLen ? _this.icon[i - 1] : icons.icon,
          color = half === true ? i <= icons.halfColorLen ? _this.colorHalf[i - 1] : icons.halfColor : icons.selColor !== void 0 && active === true ? i <= icons.selColorLen ? _this.colorSelected[i - 1] : icons.selColor : i <= icons.colorLen ? _this.color[i - 1] : icons.color;
      child.push(h(QIcon, {
        key: i,
        ref: "rt".concat(i),
        staticClass: 'q-rating__icon',
        class: {
          'q-rating__icon--active': active === true || half === true,
          'q-rating__icon--exselected': exSelected,
          'q-rating__icon--hovered': _this.mouseModel === i,
          ["text-".concat(color)]: color !== void 0
        },
        props: {
          name: name || _this.$q.iconSet.rating.icon
        },
        attrs: {
          tabindex
        },
        on: cache(_this, 'i#' + i, {
          click: () => {
            _this.__set(i);
          },
          mouseover: () => {
            _this.__setHoverValue(i);
          },
          mouseout: () => {
            _this.mouseModel = 0;
          },
          focus: () => {
            _this.__setHoverValue(i);
          },
          blur: () => {
            _this.mouseModel = 0;
          },
          keyup: e => {
            _this.__keyup(e, i);
          }
        })
      }, slot_slot(_this, "tip-".concat(i))));
    };

    for (var i = 1; i <= this.max; i++) {
      _loop(i);
    }

    return h('div', {
      staticClass: 'q-rating row inline items-center',
      class: this.classes,
      style: this.sizeStyle,
      on: this.$listeners
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/rating/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/resize-observer/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/scroll-area/QScrollArea.js











/* harmony default export */ var QScrollArea = (vue_runtime_esm["a" /* default */].extend({
  name: 'QScrollArea',
  directives: {
    TouchPan: TouchPan
  },
  props: {
    forceOnMobile: Boolean,
    barStyle: [Array, String, Object],
    thumbStyle: Object,
    contentStyle: [Array, String, Object],
    contentActiveStyle: [Array, String, Object],
    delay: {
      type: [String, Number],
      default: 1000
    },
    visible: {
      type: Boolean,
      default: null
    },
    horizontal: Boolean
  },

  data() {
    return {
      active: false,
      hover: this.visible === true,
      containerWidth: 0,
      containerHeight: 0,
      scrollPosition: 0,
      scrollSize: 0
    };
  },

  watch: {
    visible(val) {
      this.hover = val === true;
    }

  },
  computed: {
    thumbHidden() {
      return this.scrollSize <= this.containerSize || this.active === false && this.hover === false;
    },

    thumbSize() {
      return Math.round(between(this.containerSize * this.containerSize / this.scrollSize, 50, this.containerSize));
    },

    style() {
      var pos = this.scrollPercentage * (this.containerSize - this.thumbSize);
      return Object.assign({}, this.thumbStyle, this.horizontal === true ? {
        left: "".concat(pos, "px"),
        width: "".concat(this.thumbSize, "px")
      } : {
        top: "".concat(pos, "px"),
        height: "".concat(this.thumbSize, "px")
      });
    },

    mainStyle() {
      return this.thumbHidden === true ? this.contentStyle : this.contentActiveStyle;
    },

    scrollPercentage() {
      var p = between(this.scrollPosition / (this.scrollSize - this.containerSize), 0, 1);
      return Math.round(p * 10000) / 10000;
    },

    direction() {
      return this.horizontal === true ? 'right' : 'down';
    },

    containerSize() {
      return this.horizontal === true ? this.containerWidth : this.containerHeight;
    },

    dirProps() {
      return this.horizontal === true ? {
        el: 'scrollLeft',
        wheel: 'x'
      } : {
        el: 'scrollTop',
        wheel: 'y'
      };
    },

    thumbClass() {
      return "q-scrollarea__thumb--".concat(this.horizontal === true ? 'h absolute-bottom' : 'v absolute-right') + (this.thumbHidden === true ? ' q-scrollarea__thumb--invisible' : '');
    },

    barClass() {
      return "q-scrollarea__bar--".concat(this.horizontal === true ? 'h absolute-bottom' : 'v absolute-right') + (this.thumbHidden === true ? ' q-scrollarea__bar--invisible' : '');
    }

  },
  methods: {
    getScrollTarget() {
      return this.$refs.target;
    },

    getScrollPosition() {
      return this.$q.platform.is.desktop === true ? this.scrollPosition : this.$refs.target[this.dirProps.el];
    },

    setScrollPosition(offset, duration) {
      var fn = this.horizontal === true ? setHorizontalScrollPosition : setScrollPosition;
      fn(this.$refs.target, offset, duration);
    },

    __updateContainer(_ref) {
      var height = _ref.height,
          width = _ref.width;

      if (this.containerWidth !== width) {
        this.containerWidth = width;

        this.__setActive(true, true);
      }

      if (this.containerHeight !== height) {
        this.containerHeight = height;

        this.__setActive(true, true);
      }
    },

    __updateScroll(_ref2) {
      var position = _ref2.position;

      if (this.scrollPosition !== position) {
        this.scrollPosition = position;

        this.__setActive(true, true);
      }
    },

    __updateScrollSize(_ref3) {
      var height = _ref3.height,
          width = _ref3.width;

      if (this.horizontal) {
        if (this.scrollSize !== width) {
          this.scrollSize = width;

          this.__setActive(true, true);
        }
      } else {
        if (this.scrollSize !== height) {
          this.scrollSize = height;

          this.__setActive(true, true);
        }
      }
    },

    __panThumb(e) {
      if (e.isFirst === true) {
        this.refPos = this.scrollPosition;

        this.__setActive(true, true);
      }

      if (e.isFinal === true) {
        this.__setActive(false);
      }

      var multiplier = (this.scrollSize - this.containerSize) / (this.containerSize - this.thumbSize);
      var distance = this.horizontal ? e.distance.x : e.distance.y;
      var pos = this.refPos + (e.direction === this.direction ? 1 : -1) * distance * multiplier;

      this.__setScroll(pos);
    },

    __panContainer(e) {
      if (e.isFirst === true) {
        this.refPos = this.scrollPosition;

        this.__setActive(true, true);
      }

      if (e.isFinal === true) {
        this.__setActive(false);
      }

      var distance = e.distance[this.horizontal === true ? 'x' : 'y'];
      var pos = this.refPos + (e.direction === this.direction ? -1 : 1) * distance;

      this.__setScroll(pos);

      if (pos > 0 && pos + this.containerSize < this.scrollSize) {
        prevent(e.evt);
      }
    },

    __mouseWheel(e) {
      var el = this.$refs.target;
      el[this.dirProps.el] += getMouseWheelDistance(e)[this.dirProps.wheel];

      if (el[this.dirProps.el] > 0 && el[this.dirProps.el] + this.containerSize < this.scrollSize) {
        prevent(e);
      }
    },

    __setActive(active, timer) {
      clearTimeout(this.timer);

      if (active === this.active) {
        if (active && this.timer) {
          this.__startTimer();
        }

        return;
      }

      if (active) {
        this.active = true;

        if (timer) {
          this.__startTimer();
        }
      } else {
        this.active = false;
      }
    },

    __startTimer() {
      this.timer = setTimeout(() => {
        this.active = false;
        this.timer = null;
      }, this.delay);
    },

    __setScroll(offset) {
      this.$refs.target[this.dirProps.el] = offset;
    }

  },

  render(h) {
    if (this.forceOnMobile !== true && this.$q.platform.is.desktop !== true) {
      return h('div', {
        staticClass: 'q-scrollarea',
        style: this.contentStyle
      }, [h('div', {
        ref: 'target',
        staticClass: 'scroll relative-position fit'
      }, slot_slot(this, 'default'))]);
    }

    return h('div', {
      staticClass: 'q-scrollarea',
      on: this.visible === null ? cache(this, 'desk', {
        mouseenter: () => {
          this.hover = true;
        },
        mouseleave: () => {
          this.hover = false;
        }
      }) : null
    }, [h('div', {
      ref: 'target',
      staticClass: 'scroll relative-position fit hide-scrollbar',
      on: cache(this, 'wheel', {
        wheel: this.__mouseWheel
      }),
      directives: cache(this, 'touch#' + this.horizontal, [{
        name: 'touch-pan',
        modifiers: {
          vertical: this.horizontal !== true,
          horizontal: this.horizontal,
          mightPrevent: true
        },
        value: this.__panContainer
      }])
    }, [h('div', {
      staticClass: 'absolute',
      style: this.mainStyle,
      class: "full-".concat(this.horizontal === true ? 'height' : 'width')
    }, mergeSlot([h(QResizeObserver, {
      on: cache(this, 'resizeIn', {
        resize: this.__updateScrollSize
      })
    })], this, 'default')), h(QScrollObserver, {
      props: {
        horizontal: this.horizontal
      },
      on: cache(this, 'scroll', {
        scroll: this.__updateScroll
      })
    })]), h(QResizeObserver, {
      on: cache(this, 'resizeOut', {
        resize: this.__updateContainer
      })
    }), h('div', {
      staticClass: 'q-scrollarea__bar',
      style: this.barStyle,
      class: this.barClass,
      on: cache(this, 'bar', {
        click: e => {
          var pos = e["offset".concat(this.horizontal === true ? 'X' : 'Y')] - this.thumbSize / 2;

          this.__setScroll(pos / this.containerSize * this.scrollSize);
        }
      })
    }), h('div', {
      staticClass: 'q-scrollarea__thumb',
      style: this.style,
      class: this.thumbClass,
      directives: this.thumbHidden === true ? null : cache(this, 'thumb#' + this.horizontal, [{
        name: 'touch-pan',
        modifiers: {
          vertical: !this.horizontal,
          horizontal: this.horizontal,
          prevent: true,
          mouse: true,
          mouseAllDir: true
        },
        value: this.__panThumb
      }])
    })]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/scroll-area/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/scroll-observer/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js
var es_array_reduce = __webpack_require__("13d5");

// CONCATENATED MODULE: ./node_modules/quasar/src/mixins/virtual-scroll.js











function virtual_scroll_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function virtual_scroll_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { virtual_scroll_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { virtual_scroll_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var aggBucketSize = 1000;

function sumFn(acc, h) {
  return acc + h;
}

function getScrollDetails(parent, child, beforeRef, afterRef, horizontal, stickyStart, stickyEnd) {
  var parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent,
      propElSize = horizontal === true ? 'offsetWidth' : 'offsetHeight',
      details = {
    scrollStart: 0,
    scrollViewSize: -stickyStart - stickyEnd,
    scrollMaxSize: 0,
    offsetStart: -stickyStart,
    offsetEnd: -stickyEnd
  };

  if (horizontal === true) {
    if (parent === window) {
      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
      details.scrollViewSize += window.innerWidth;
    } else {
      details.scrollStart = parentCalc.scrollLeft;
      details.scrollViewSize += parentCalc.clientWidth;
    }

    details.scrollMaxSize = parentCalc.scrollWidth;
  } else {
    if (parent === window) {
      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
      details.scrollViewSize += window.innerHeight;
    } else {
      details.scrollStart = parentCalc.scrollTop;
      details.scrollViewSize += parentCalc.clientHeight;
    }

    details.scrollMaxSize = parentCalc.scrollHeight;
  }

  if (beforeRef !== void 0) {
    for (var el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {
      details.offsetStart += el[propElSize];
    }
  }

  if (afterRef !== void 0) {
    for (var _el = afterRef.nextElementSibling; _el !== null; _el = _el.nextElementSibling) {
      details.offsetEnd += _el[propElSize];
    }
  }

  if (child !== parent) {
    var parentRect = parentCalc.getBoundingClientRect(),
        childRect = child.getBoundingClientRect();

    if (horizontal === true) {
      details.offsetStart += childRect.left - parentRect.left;
      details.offsetEnd -= childRect.width;
    } else {
      details.offsetStart += childRect.top - parentRect.top;
      details.offsetEnd -= childRect.height;
    }

    if (parent !== window) {
      details.offsetStart += details.scrollStart;
    }

    details.offsetEnd += details.scrollMaxSize - details.offsetStart;
  }

  return details;
}

function virtual_scroll_setScroll(parent, scroll, horizontal) {
  if (parent === window) {
    if (horizontal === true) {
      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    } else {
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll);
    }
  } else {
    parent[horizontal === true ? 'scrollLeft' : 'scrollTop'] = scroll;
  }
}

function sumSize(sizeAgg, size, from, to) {
  if (from >= to) {
    return 0;
  }

  var lastTo = size.length,
      fromAgg = Math.floor(from / aggBucketSize),
      toAgg = Math.floor((to - 1) / aggBucketSize) + 1;
  var total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0);

  if (from % aggBucketSize !== 0) {
    total -= size.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0);
  }

  if (to % aggBucketSize !== 0 && to !== lastTo) {
    total -= size.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0);
  }

  return total;
}

var commonVirtScrollProps = {
  virtualScrollSliceSize: {
    type: Number,
    default: 30
  },
  virtualScrollItemSize: {
    type: Number,
    default: 24
  },
  virtualScrollStickySizeStart: {
    type: Number,
    default: 0
  },
  virtualScrollStickySizeEnd: {
    type: Number,
    default: 0
  }
};
var commonVirtPropsList = Object.keys(commonVirtScrollProps);
/* harmony default export */ var virtual_scroll = ({
  props: virtual_scroll_objectSpread({
    virtualScrollHorizontal: Boolean
  }, commonVirtScrollProps),

  data() {
    return {
      virtualScrollSliceRange: {
        from: 0,
        to: 0
      }
    };
  },

  watch: {
    virtualScrollHorizontal() {
      this.__setVirtualScrollSize();
    },

    needsReset() {
      this.reset();
    }

  },
  computed: {
    needsReset() {
      return ['virtualScrollItemSize', 'virtualScrollHorizontal'].map(p => this[p]).join(';');
    }

  },
  methods: {
    reset() {
      this.__resetVirtualScroll(this.prevToIndex, true);
    },

    scrollTo(toIndex) {
      var scrollEl = this.__getVirtualScrollTarget();

      if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
        return;
      }

      this.__setVirtualScrollSliceRange(scrollEl, getScrollDetails(scrollEl, this.__getVirtualScrollEl(), this.$refs.before, this.$refs.after, this.virtualScrollHorizontal, this.virtualScrollStickySizeStart, this.virtualScrollStickySizeEnd), Math.min(this.virtualScrollLength - 1, Math.max(0, parseInt(toIndex, 10) || 0)), 0, this.prevToIndex > -1 && toIndex > this.prevToIndex ? 'end' : 'start');
    },

    __onVirtualScrollEvt() {
      var scrollEl = this.__getVirtualScrollTarget();

      if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
        return;
      }

      var scrollDetails = getScrollDetails(scrollEl, this.__getVirtualScrollEl(), this.$refs.before, this.$refs.after, this.virtualScrollHorizontal, this.virtualScrollStickySizeStart, this.virtualScrollStickySizeEnd),
          scrollMaxStart = scrollDetails.scrollMaxSize - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd),
          listLastIndex = this.virtualScrollLength - 1;

      if (this.prevScrollStart === scrollDetails.scrollStart) {
        return;
      }

      this.prevScrollStart = void 0;

      this.__updateVirtualScrollSizes(this.virtualScrollSliceRange.from);

      if (scrollMaxStart > 0 && scrollDetails.scrollStart >= scrollMaxStart) {
        this.__setVirtualScrollSliceRange(scrollEl, scrollDetails, this.virtualScrollLength - 1, scrollMaxStart - this.virtualScrollSizesAgg.reduce(sumFn, 0));

        return;
      }

      var toIndex = 0,
          listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart,
          offset = listOffset;

      for (var j = 0; listOffset >= this.virtualScrollSizesAgg[j] && toIndex < listLastIndex; j++) {
        listOffset -= this.virtualScrollSizesAgg[j];
        toIndex += aggBucketSize;
      }

      while (listOffset > 0 && toIndex < listLastIndex) {
        listOffset -= this.virtualScrollSizes[toIndex];

        if (listOffset > -scrollDetails.scrollViewSize) {
          toIndex++;
          offset = listOffset;
        } else {
          offset = this.virtualScrollSizes[toIndex] + listOffset;
        }
      }

      this.__setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset);
    },

    __setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset, align) {
      var from = Math.max(0, Math.ceil(toIndex - (align === void 0 ? 3 : 2) * this.virtualScrollSliceSizeComputed / 6)),
          to = from + this.virtualScrollSliceSizeComputed;

      if (to > this.virtualScrollLength) {
        to = this.virtualScrollLength;
        from = Math.max(0, to - this.virtualScrollSliceSizeComputed);
      }

      this.__emitScroll(toIndex);

      var rangeChanged = from !== this.virtualScrollSliceRange.from || to !== this.virtualScrollSliceRange.to;

      if (rangeChanged === false && align === void 0) {
        return;
      }

      if (rangeChanged === true) {
        this.virtualScrollSliceRange = {
          from,
          to
        };
        this.virtualScrollPaddingBefore = sumSize(this.virtualScrollSizesAgg, this.virtualScrollSizes, 0, from);
        this.virtualScrollPaddingAfter = sumSize(this.virtualScrollSizesAgg, this.virtualScrollSizes, to, this.virtualScrollLength);
      }

      this.$nextTick(() => {
        if (rangeChanged === true) {
          this.__updateVirtualScrollSizes(from);
        }

        var posStart = this.virtualScrollSizes.slice(from, toIndex).reduce(sumFn, scrollDetails.offsetStart + this.virtualScrollPaddingBefore),
            posEnd = posStart + this.virtualScrollSizes[toIndex];
        var scrollPosition = posStart + offset;

        if (align !== void 0) {
          scrollPosition = scrollDetails.scrollStart < posStart && posEnd < scrollDetails.scrollStart + scrollDetails.scrollViewSize ? scrollDetails.scrollStart : align === 'end' ? posEnd - scrollDetails.scrollViewSize : posStart;
        }

        this.prevScrollStart = scrollPosition;

        this.__setScroll(scrollEl, scrollPosition, this.virtualScrollHorizontal);
      });
    },

    __updateVirtualScrollSizes(from) {
      var contentEl = this.$refs.content;

      if (contentEl !== void 0) {
        var children = contentEl.children,
            sizeProp = this.virtualScrollHorizontal === true ? 'offsetWidth' : 'offsetHeight';

        for (var i = children.length - 1; i >= 0; i--) {
          var index = from + i,
              diff = children[i][sizeProp] - this.virtualScrollSizes[index];

          if (diff !== 0) {
            this.virtualScrollSizes[index] += diff;
            this.virtualScrollSizesAgg[Math.floor(index / aggBucketSize)] += diff;
          }
        }
      }
    },

    __resetVirtualScroll(toIndex, fullReset) {
      var defaultSize = this.virtualScrollItemSize;

      if (fullReset === true || Array.isArray(this.virtualScrollSizes) === false) {
        this.virtualScrollSizes = [];
      }

      var oldVirtualScrollSizesLength = this.virtualScrollSizes.length;
      this.virtualScrollSizes.length = this.virtualScrollLength;

      for (var i = this.virtualScrollLength - 1; i >= oldVirtualScrollSizesLength; i--) {
        this.virtualScrollSizes[i] = defaultSize;
      }

      var jMax = Math.floor((this.virtualScrollLength - 1) / aggBucketSize);
      this.virtualScrollSizesAgg = [];

      for (var j = 0; j <= jMax; j++) {
        var size = 0;
        var iMax = Math.min((j + 1) * aggBucketSize, this.virtualScrollLength);

        for (var _i = j * aggBucketSize; _i < iMax; _i++) {
          size += this.virtualScrollSizes[_i];
        }

        this.virtualScrollSizesAgg.push(size);
      }

      this.prevToIndex = -1;
      this.prevScrollStart = void 0;

      if (toIndex >= 0) {
        this.$nextTick(() => {
          this.scrollTo(toIndex);
        });
      } else {
        this.virtualScrollPaddingBefore = sumSize(this.virtualScrollSizesAgg, this.virtualScrollSizes, 0, this.virtualScrollSliceRange.from);
        this.virtualScrollPaddingAfter = sumSize(this.virtualScrollSizesAgg, this.virtualScrollSizes, this.virtualScrollSliceRange.to, this.virtualScrollLength);

        this.__onVirtualScrollEvt();
      }
    },

    __setVirtualScrollSize() {
      if (this.virtualScrollHorizontal === true) {
        this.virtualScrollSliceSizeComputed = typeof window === 'undefined' ? this.virtualScrollSliceSize : Math.max(this.virtualScrollSliceSize, Math.ceil(window.innerWidth / this.virtualScrollItemSize * 2));
      } else {
        this.virtualScrollSliceSizeComputed = typeof window === 'undefined' ? this.virtualScrollSliceSize : Math.max(this.virtualScrollSliceSize, Math.ceil(window.innerHeight / this.virtualScrollItemSize * 2));
      }
    },

    __padVirtualScroll(h, tag, content) {
      var paddingSize = this.virtualScrollHorizontal === true ? 'width' : 'height';
      return [tag === 'tbody' ? h(tag, {
        staticClass: 'q-virtual-scroll__padding',
        key: 'before',
        ref: 'before'
      }, [h('tr', [h('td', {
        style: {
          [paddingSize]: "".concat(this.virtualScrollPaddingBefore, "px")
        },
        attrs: {
          colspan: '100%'
        }
      })])]) : h(tag, {
        staticClass: 'q-virtual-scroll__padding',
        key: 'before',
        ref: 'before',
        style: {
          [paddingSize]: "".concat(this.virtualScrollPaddingBefore, "px")
        }
      }), h(tag, {
        staticClass: 'q-virtual-scroll__content',
        key: 'content',
        ref: 'content'
      }, content), tag === 'tbody' ? h(tag, {
        staticClass: 'q-virtual-scroll__padding',
        key: 'after',
        ref: 'after'
      }, [h('tr', [h('td', {
        style: {
          [paddingSize]: "".concat(this.virtualScrollPaddingAfter, "px")
        },
        attrs: {
          colspan: '100%'
        }
      })])]) : h(tag, {
        staticClass: 'q-virtual-scroll__padding',
        key: 'after',
        ref: 'after',
        style: {
          [paddingSize]: "".concat(this.virtualScrollPaddingAfter, "px")
        }
      })];
    },

    __emitScroll(index) {
      if (this.prevToIndex !== index) {
        this.$listeners['virtual-scroll'] !== void 0 && this.$emit('virtual-scroll', {
          index,
          from: this.virtualScrollSliceRange.from,
          to: this.virtualScrollSliceRange.to - 1,
          direction: index < this.prevToIndex ? 'decrease' : 'increase'
        });
        this.prevToIndex = index;
      }
    }

  },

  created() {
    this.__setVirtualScrollSize();
  },

  beforeMount() {
    this.__onVirtualScrollEvt = debounce(this.__onVirtualScrollEvt, 70);
    this.__setScroll = frame_debounce(virtual_scroll_setScroll);

    this.__setVirtualScrollSize();
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/select/QSelect.js



















function QSelect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QSelect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QSelect_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QSelect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



















var validateNewValueMode = v => ['add', 'add-unique', 'toggle'].includes(v);

/* harmony default export */ var QSelect = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSelect',
  mixins: [QField, virtual_scroll, composition],
  props: {
    value: {
      required: true
    },
    multiple: Boolean,
    displayValue: [String, Number],
    displayValueSanitize: Boolean,
    dropdownIcon: String,
    options: {
      type: Array,
      default: () => []
    },
    optionValue: [Function, String],
    optionLabel: [Function, String],
    optionDisable: [Function, String],
    hideSelected: Boolean,
    hideDropdownIcon: Boolean,
    fillInput: Boolean,
    maxValues: [Number, String],
    optionsDense: Boolean,
    optionsDark: {
      type: Boolean,
      default: null
    },
    optionsSelectedClass: String,
    optionsCover: Boolean,
    optionsSanitize: Boolean,
    popupContentClass: String,
    popupContentStyle: [String, Array, Object],
    useInput: Boolean,
    useChips: Boolean,
    newValueMode: {
      type: String,
      validator: validateNewValueMode
    },
    mapOptions: Boolean,
    emitValue: Boolean,
    inputDebounce: {
      type: [Number, String],
      default: 500
    },
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object],
    tabindex: {
      type: [String, Number],
      default: 0
    },
    transitionShow: String,
    transitionHide: String,
    behavior: {
      type: String,
      validator: v => ['default', 'menu', 'dialog'].includes(v),
      default: 'default'
    }
  },

  data() {
    return {
      menu: false,
      dialog: false,
      optionIndex: -1,
      inputValue: '',
      dialogFieldFocused: false
    };
  },

  watch: {
    innerValue: {
      handler(val) {
        this.innerValueCache = val;

        if (this.useInput === true && this.fillInput === true && this.multiple !== true && // Prevent re-entering in filter while filtering
        // Also prevent clearing inputValue while filtering
        this.innerLoading !== true && (this.dialog !== true && this.menu !== true || this.hasValue !== true)) {
          this.__resetInputValue();

          if (this.dialog === true || this.menu === true) {
            this.filter('');
          }
        }
      },

      immediate: true
    },

    menu(show) {
      this.__updateMenu(show);
    }

  },
  computed: {
    isOptionsDark() {
      return this.optionsDark === null ? this.isDark : this.optionsDark;
    },

    virtualScrollLength() {
      return Array.isArray(this.options) ? this.options.length : 0;
    },

    fieldClass() {
      return "q-select q-field--auto-height q-select--with".concat(this.useInput !== true ? 'out' : '', "-input");
    },

    computedInputClass() {
      if (this.hideSelected === true || this.innerValue.length === 0) {
        return this.inputClass;
      }

      return this.inputClass === void 0 ? 'q-field__input--padding' : [this.inputClass, 'q-field__input--padding'];
    },

    menuContentClass() {
      return (this.virtualScrollHorizontal === true ? 'q-virtual-scroll--horizontal' : '') + (this.popupContentClass ? ' ' + this.popupContentClass : '');
    },

    innerValue() {
      var mapNull = this.mapOptions === true && this.multiple !== true,
          val = this.value !== void 0 && (this.value !== null || mapNull === true) ? this.multiple === true && Array.isArray(this.value) ? this.value : [this.value] : [];

      if (this.mapOptions === true && Array.isArray(this.options) === true) {
        var _cache = this.mapOptions === true && this.innerValueCache !== void 0 ? this.innerValueCache : [];

        var values = val.map(v => this.__getOption(v, _cache));
        return this.value === null && mapNull === true ? values.filter(v => v !== null) : values;
      }

      return val;
    },

    noOptions() {
      return this.virtualScrollLength === 0;
    },

    selectedString() {
      return this.innerValue.map(opt => this.__getOptionLabel(opt)).join(', ');
    },

    displayAsText() {
      return this.displayValueSanitize === true || this.displayValue === void 0 && (this.optionsSanitize === true || this.innerValue.some(opt => opt !== null && opt.sanitize === true));
    },

    computedTabindex() {
      return this.focused === true ? this.tabindex : -1;
    },

    selectedScope() {
      return this.innerValue.map((opt, i) => ({
        index: i,
        opt,
        sanitize: this.optionsSanitize === true || opt.sanitize === true,
        selected: true,
        removeAtIndex: this.__removeAtIndexAndFocus,
        toggleOption: this.toggleOption,
        tabindex: this.computedTabindex
      }));
    },

    optionScope() {
      if (this.virtualScrollLength === 0) {
        return [];
      }

      var _this$virtualScrollSl = this.virtualScrollSliceRange,
          from = _this$virtualScrollSl.from,
          to = _this$virtualScrollSl.to;
      return this.options.slice(from, to).map((opt, i) => {
        var disable = this.__isDisabled(opt);

        var index = from + i;
        var itemProps = {
          clickable: true,
          active: false,
          activeClass: this.computedOptionsSelectedClass,
          manualFocus: true,
          focused: false,
          disable,
          tabindex: -1,
          dense: this.optionsDense,
          dark: this.isOptionsDark
        };

        if (disable !== true) {
          this.__isSelected(opt) === true && (itemProps.active = true);
          this.optionIndex === index && (itemProps.focused = true);
        }

        var itemEvents = {
          click: () => {
            this.toggleOption(opt);
          }
        };

        if (this.$q.platform.is.desktop === true) {
          itemEvents.mousemove = () => {
            this.setOptionIndex(index);
          };
        }

        return {
          index,
          opt,
          sanitize: this.optionsSanitize === true || opt.sanitize === true,
          selected: itemProps.active,
          focused: itemProps.focused,
          toggleOption: this.toggleOption,
          setOptionIndex: this.setOptionIndex,
          itemProps,
          itemEvents
        };
      });
    },

    dropdownArrowIcon() {
      return this.dropdownIcon !== void 0 ? this.dropdownIcon : this.$q.iconSet.arrow.dropdown;
    },

    squaredMenu() {
      return this.optionsCover === false && this.outlined !== true && this.standout !== true && this.borderless !== true && this.rounded !== true;
    },

    computedOptionsSelectedClass() {
      return this.optionsSelectedClass !== void 0 ? this.optionsSelectedClass : this.color !== void 0 ? "text-".concat(this.color) : '';
    }

  },
  methods: {
    removeAtIndex(index) {
      if (index > -1 && index < this.innerValue.length) {
        if (this.multiple === true) {
          var model = this.value.slice();
          this.$emit('remove', {
            index,
            value: model.splice(index, 1)
          });
          this.$emit('input', model);
        } else {
          this.$emit('input', null);
        }
      }
    },

    __removeAtIndexAndFocus(index) {
      this.removeAtIndex(index);

      this.__focus();
    },

    add(opt, unique) {
      var val = this.emitValue === true ? this.__getOptionValue(opt) : opt;

      if (this.multiple !== true) {
        this.$emit('input', val);
        return;
      }

      if (this.innerValue.length === 0) {
        this.$emit('add', {
          index: 0,
          value: val
        });
        this.$emit('input', this.multiple === true ? [val] : val);
        return;
      }

      if (unique === true && this.__isSelected(opt) === true) {
        return;
      }

      if (this.maxValues !== void 0 && this.value.length >= this.maxValues) {
        return;
      }

      var model = this.value.slice();
      this.$emit('add', {
        index: model.length,
        value: val
      });
      model.push(val);
      this.$emit('input', model);
    },

    toggleOption(opt, keepOpen) {
      if (this.editable !== true || opt === void 0 || this.__isDisabled(opt) === true) {
        return;
      }

      var optValue = this.__getOptionValue(opt);

      if (this.multiple !== true) {
        this.$refs.target !== void 0 && this.$refs.target.focus();

        if (keepOpen !== true) {
          this.updateInputValue(this.fillInput === true ? this.__getOptionLabel(opt) : '', true, true);
          this.hidePopup();
        }

        if (isDeepEqual(this.__getOptionValue(this.value), optValue) !== true) {
          this.$emit('input', this.emitValue === true ? optValue : opt);
        }

        return;
      }

      (this.hasDialog !== true || this.dialogFieldFocused === true) && this.__focus();

      if (this.innerValue.length === 0) {
        var val = this.emitValue === true ? optValue : opt;
        this.$emit('add', {
          index: 0,
          value: val
        });
        this.$emit('input', this.multiple === true ? [val] : val);
        return;
      }

      var model = this.value.slice(),
          index = this.value.findIndex(v => isDeepEqual(this.__getOptionValue(v), optValue));

      if (index > -1) {
        this.$emit('remove', {
          index,
          value: model.splice(index, 1)
        });
      } else {
        if (this.maxValues !== void 0 && model.length >= this.maxValues) {
          return;
        }

        var _val = this.emitValue === true ? optValue : opt;

        this.$emit('add', {
          index: model.length,
          value: _val
        });
        model.push(_val);
      }

      this.$emit('input', model);
    },

    setOptionIndex(index) {
      if (this.$q.platform.is.desktop !== true) {
        return;
      }

      var val = index > -1 && index < this.virtualScrollLength ? index : -1;

      if (this.optionIndex !== val) {
        this.optionIndex = val;
      }
    },

    moveOptionSelection() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      if (this.menu === true) {
        var index = this.optionIndex;

        do {
          index = normalizeToInterval(index + offset, -1, this.virtualScrollLength - 1);
        } while (index !== -1 && index !== this.optionIndex && this.__isDisabled(this.options[index]) === true);

        if (this.optionIndex !== index) {
          this.setOptionIndex(index);
          this.scrollTo(index);

          if (index >= 0 && this.useInput === true && this.fillInput === true) {
            var inputValue = this.__getOptionLabel(this.options[index]);

            if (this.inputValue !== inputValue) {
              this.inputValue = inputValue;
            }
          }
        }
      }
    },

    __getOption(value, innerValueCache) {
      var fn = opt => isDeepEqual(this.__getOptionValue(opt), value);

      return this.options.find(fn) || innerValueCache.find(fn) || value;
    },

    __getOptionValue(opt) {
      if (typeof this.optionValue === 'function') {
        return this.optionValue(opt);
      }

      if (Object(opt) === opt) {
        return typeof this.optionValue === 'string' ? opt[this.optionValue] : opt.value;
      }

      return opt;
    },

    __getOptionLabel(opt) {
      if (typeof this.optionLabel === 'function') {
        return this.optionLabel(opt);
      }

      if (Object(opt) === opt) {
        return typeof this.optionLabel === 'string' ? opt[this.optionLabel] : opt.label;
      }

      return opt;
    },

    __isDisabled(opt) {
      if (typeof this.optionDisable === 'function') {
        return this.optionDisable(opt) === true;
      }

      if (Object(opt) === opt) {
        return typeof this.optionDisable === 'string' ? opt[this.optionDisable] === true : opt.disable === true;
      }

      return false;
    },

    __isSelected(opt) {
      var val = this.__getOptionValue(opt);

      return this.innerValue.find(v => isDeepEqual(this.__getOptionValue(v), val)) !== void 0;
    },

    __onTargetKeyup(e) {
      // if ESC and we have an opened menu
      // then stop propagation (might be caught by a QDialog
      // and so it will also close the QDialog, which is wrong)
      if (isKeyCode(e, 27) === true && this.menu === true) {
        event_stop(e); // on ESC we need to close the dialog also

        this.hidePopup();
      }

      this.$emit('keyup', e);
    },

    __onTargetKeypress(e) {
      this.$emit('keypress', e);
    },

    __onTargetKeydown(e) {
      this.$emit('keydown', e);

      if (shouldIgnoreKey(e) === true) {
        return;
      }

      var tabShouldSelect = e.shiftKey !== true && this.multiple !== true && this.optionIndex > -1; // escape

      if (e.keyCode === 27) {
        return;
      } // tab


      if (e.keyCode === 9 && tabShouldSelect === false) {
        this.__closeMenu();

        return;
      }

      if (e.target === void 0 || e.target.id !== this.targetUid) {
        return;
      } // down


      if (e.keyCode === 40 && this.innerLoading !== true && this.menu === false) {
        stopAndPrevent(e);
        this.showPopup();
        return;
      } // backspace


      if (e.keyCode === 8 && this.multiple === true && this.inputValue.length === 0 && Array.isArray(this.value)) {
        this.removeAtIndex(this.value.length - 1);
        return;
      } // up, down


      if (e.keyCode === 38 || e.keyCode === 40) {
        stopAndPrevent(e);
        this.moveOptionSelection(e.keyCode === 38 ? -1 : 1);
      }

      var optionsLength = this.virtualScrollLength; // keyboard search when not having use-input

      if (optionsLength > 0 && this.useInput !== true && e.keyCode >= 48 && e.keyCode <= 90) {
        this.menu !== true && this.showPopup(e); // clear search buffer if expired

        if (this.searchBuffer === void 0 || this.searchBufferExp < Date.now()) {
          this.searchBuffer = '';
        }

        var char = String.fromCharCode(e.keyCode).toLocaleLowerCase(),
            keyRepeat = this.searchBuffer.length === 1 && this.searchBuffer[0] === char;
        this.searchBufferExp = Date.now() + 1500;

        if (keyRepeat === false) {
          this.searchBuffer += char;
        }

        var searchRe = new RegExp('^' + this.searchBuffer.split('').join('.*'), 'i');
        var index = this.optionIndex;

        if (keyRepeat === true || searchRe.test(this.__getOptionLabel(this.options[index])) !== true) {
          do {
            index = normalizeToInterval(index + 1, -1, optionsLength - 1);
          } while (index !== this.optionIndex && (this.__isDisabled(this.options[index]) === true || searchRe.test(this.__getOptionLabel(this.options[index])) !== true));
        }

        if (this.optionIndex !== index) {
          this.$nextTick(() => {
            this.setOptionIndex(index);
            this.scrollTo(index);

            if (index >= 0 && this.useInput === true && this.fillInput === true) {
              var inputValue = this.__getOptionLabel(this.options[index]);

              if (this.inputValue !== inputValue) {
                this.inputValue = inputValue;
              }
            }
          });
        }

        return;
      } // enter, space (when not using use-input), or tab (when not using multiple and option selected)
      // same target is checked above


      if (e.keyCode !== 13 && (this.useInput === true || e.keyCode !== 32) && (tabShouldSelect === false || e.keyCode !== 9)) {
        return;
      }

      e.keyCode !== 9 && stopAndPrevent(e);

      if (this.optionIndex > -1 && this.optionIndex < optionsLength) {
        this.toggleOption(this.options[this.optionIndex]);
        return;
      }

      if (this.inputValue.length > 0 && (this.newValueMode !== void 0 || this.$listeners['new-value'] !== void 0)) {
        var done = (val, mode) => {
          if (mode) {
            if (validateNewValueMode(mode) !== true) {
              console.error('QSelect: invalid new value mode - ' + mode);
              return;
            }
          } else {
            mode = this.newValueMode;
          }

          if (val !== void 0 && val !== null) {
            this[mode === 'toggle' ? 'toggleOption' : 'add'](val, mode === 'add-unique');
          }

          this.updateInputValue('', this.multiple !== true, true);

          if (this.multiple !== true) {
            this.$refs.target !== void 0 && this.$refs.target.focus();
            this.hidePopup();
          }
        };

        if (this.$listeners['new-value'] !== void 0) {
          this.$emit('new-value', this.inputValue, done);

          if (this.multiple !== true) {
            return;
          }
        } else {
          done(this.inputValue);
        }
      }

      if (this.menu === true) {
        this.__closeMenu();
      } else if (this.innerLoading !== true) {
        this.showPopup();
      }
    },

    __getVirtualScrollEl() {
      return this.hasDialog === true ? this.$refs.menuContent : this.$refs.menu !== void 0 && this.$refs.menu.__portal !== void 0 ? this.$refs.menu.__portal.$el : void 0;
    },

    __getVirtualScrollTarget() {
      return this.__getVirtualScrollEl();
    },

    __getSelection(h, fromDialog) {
      if (this.hideSelected === true) {
        return fromDialog !== true && this.hasDialog === true ? [h('span', {
          domProps: {
            'textContent': this.inputValue
          }
        })] : [];
      }

      if (this.$scopedSlots['selected-item'] !== void 0) {
        return this.selectedScope.map(scope => this.$scopedSlots['selected-item'](scope)).slice();
      }

      if (this.$scopedSlots.selected !== void 0) {
        return this.$scopedSlots.selected().slice();
      }

      if (this.useChips === true) {
        return this.selectedScope.map((scope, i) => h(QChip, {
          key: 'option-' + i,
          props: {
            removable: this.__isDisabled(scope.opt) !== true,
            dense: true,
            textColor: this.color,
            tabindex: this.computedTabindex
          },
          on: cache(this, 'rem#' + i, {
            remove() {
              scope.removeAtIndex(i);
            }

          })
        }, [h('span', {
          domProps: {
            [scope.sanitize === true ? 'textContent' : 'innerHTML']: this.__getOptionLabel(scope.opt)
          }
        })]));
      }

      return [h('span', {
        domProps: {
          [this.displayAsText ? 'textContent' : 'innerHTML']: this.displayValue !== void 0 ? this.displayValue : this.selectedString
        }
      })];
    },

    __getControl(h, fromDialog) {
      var child = this.__getSelection(h, fromDialog);

      if (this.useInput === true && (fromDialog === true || this.hasDialog === false)) {
        child.push(this.__getInput(h, fromDialog));
      } else if (this.editable === true) {
        var isShadowField = this.hasDialog === true && fromDialog !== true && this.menu === true;
        child.push(h('div', {
          // there can be only one (when dialog is opened the control in dialog should be target)
          ref: isShadowField === true ? void 0 : 'target',
          staticClass: 'no-outline',
          attrs: {
            tabindex: this.tabindex,
            id: isShadowField === true ? void 0 : this.targetUid
          },
          on: cache(this, 'ctrl', {
            keydown: this.__onTargetKeydown,
            keyup: this.__onTargetKeyup,
            keypress: this.__onTargetKeypress
          })
        }));
      }

      return h('div', {
        staticClass: 'q-field__native row items-center',
        attrs: this.$attrs
      }, child);
    },

    __getOptions(h) {
      if (this.menu !== true) {
        return void 0;
      }

      var fn = this.$scopedSlots.option !== void 0 ? this.$scopedSlots.option : scope => h(QItem, {
        key: scope.index,
        props: scope.itemProps,
        on: scope.itemEvents
      }, [h(QItemSection, [h(QItemLabel, {
        domProps: {
          [scope.sanitize === true ? 'textContent' : 'innerHTML']: this.__getOptionLabel(scope.opt)
        }
      })])]);

      var options = this.__padVirtualScroll(h, 'div', this.optionScope.map(fn));

      if (this.$scopedSlots['before-options'] !== void 0) {
        options = this.$scopedSlots['before-options']().concat(options);
      }

      return mergeSlot(options, this, 'after-options');
    },

    __getInnerAppend(h) {
      return this.loading !== true && this.innerLoading !== true && this.hideDropdownIcon !== true ? [h(QIcon, {
        staticClass: 'q-select__dropdown-icon',
        props: {
          name: this.dropdownArrowIcon
        }
      })] : null;
    },

    __getInput(h, fromDialog) {
      var on = {
        input: this.__onInput,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        change: this.__onChange,
        keydown: this.__onTargetKeydown,
        keyup: this.__onTargetKeyup,
        keypress: this.__onTargetKeypress
      };
      on.compositionstart = on.compositionupdate = on.compositionend = this.__onComposition;

      if (this.hasDialog === true) {
        on.click = event_stop;
      }

      return h('input', {
        ref: 'target',
        staticClass: 'q-field__input q-placeholder col',
        style: this.inputStyle,
        class: this.computedInputClass,
        domProps: {
          value: this.inputValue !== void 0 ? this.inputValue : ''
        },
        attrs: QSelect_objectSpread({
          // required for Android in order to show ENTER key when in form
          type: 'search'
        }, this.$attrs, {
          tabindex: this.tabindex,
          'data-autofocus': fromDialog === true ? false : this.autofocus,
          id: this.targetUid,
          disabled: this.disable === true,
          readonly: this.readonly === true
        }),
        on: cache(this, 'inp#' + this.hasDialog, on)
      });
    },

    __onChange(e) {
      this.__onComposition(e);
    },

    __onInput(e) {
      clearTimeout(this.inputTimer);

      if (e && e.target && e.target.composing === true) {
        return;
      }

      this.inputValue = e.target.value || ''; // mark it here as user input so that if updateInputValue is called
      // before filter is called the indicator is reset

      this.userInputValue = true;

      if (this.$listeners.filter !== void 0) {
        this.inputTimer = setTimeout(() => {
          this.filter(this.inputValue);
        }, this.inputDebounce);
      }
    },

    updateInputValue(val, noFiltering, internal) {
      this.userInputValue = internal !== true;

      if (this.useInput === true) {
        if (this.inputValue !== val) {
          this.inputValue = val;
        }

        noFiltering !== true && this.filter(val);
      }
    },

    filter(val) {
      if (this.$listeners.filter === void 0 || this.focused !== true) {
        return;
      }

      if (this.innerLoading === true) {
        this.$emit('filter-abort');
      } else {
        this.innerLoading = true;
      }

      if (val !== '' && this.multiple !== true && this.innerValue.length > 0 && this.userInputValue !== true && val === this.__getOptionLabel(this.innerValue[0])) {
        val = '';
      }

      var filterId = setTimeout(() => {
        this.menu === true && (this.menu = false);
      }, 10);
      clearTimeout(this.filterId);
      this.filterId = filterId;
      this.$emit('filter', val, (fn, afterFn) => {
        if (this.focused === true && this.filterId === filterId) {
          clearTimeout(this.filterId);
          typeof fn === 'function' && fn();
          this.$nextTick(() => {
            this.innerLoading = false;

            if (this.menu === true) {
              this.__updateMenu(true);
            } else {
              this.menu = true;
            }

            typeof afterFn === 'function' && this.$nextTick(() => {
              afterFn(this);
            });
          });
        }
      }, () => {
        if (this.focused === true && this.filterId === filterId) {
          clearTimeout(this.filterId);
          this.innerLoading = false;
        }

        this.menu === true && (this.menu = false);
      });
    },

    __getControlEvents() {
      var focusout = e => {
        this.__onControlFocusout(e, () => {
          this.__resetInputValue();

          this.__closeMenu();
        });
      };

      return {
        focusin: this.__onControlFocusin,
        focusout,
        'popup-show': this.__onControlPopupShow,
        'popup-hide': e => {
          e !== void 0 && event_stop(e);
          this.$emit('popup-hide', e);
          this.hasPopupOpen = false;
          focusout(e);
        },
        click: e => {
          if (this.hasDialog !== true) {
            // label from QField will propagate click on the input (except IE)
            if (this.useInput === true && e.target.classList.contains('q-field__input') !== true || this.useInput !== true && e.target.classList.contains('no-outline') === true) {
              return;
            }

            if (this.menu === true) {
              this.__closeMenu();

              this.$refs.target !== void 0 && this.$refs.target.focus();
              return;
            }
          }

          this.showPopup(e);
        }
      };
    },

    __getPopup(h) {
      if (this.editable !== false && (this.dialog === true || // dialog always has menu displayed, so need to render it
      this.noOptions !== true || this.$scopedSlots['no-option'] !== void 0)) {
        return this["__get".concat(this.hasDialog === true ? 'Dialog' : 'Menu')](h);
      }
    },

    __getMenu(h) {
      var child = this.noOptions === true ? this.$scopedSlots['no-option'] !== void 0 ? this.$scopedSlots['no-option']({
        inputValue: this.inputValue
      }) : null : this.__getOptions(h);
      return h(QMenu, {
        ref: 'menu',
        props: {
          value: this.menu,
          fit: true,
          cover: this.optionsCover === true && this.noOptions !== true && this.useInput !== true,
          contentClass: this.menuContentClass,
          contentStyle: this.popupContentStyle,
          dark: this.isOptionsDark,
          noParentEvent: true,
          noRefocus: true,
          noFocus: true,
          square: this.squaredMenu,
          transitionShow: this.transitionShow,
          transitionHide: this.transitionHide,
          separateClosePopup: true
        },
        on: cache(this, 'menu', {
          '&scroll': this.__onVirtualScrollEvt,
          'before-hide': this.__closeMenu
        })
      }, child);
    },

    __onDialogFieldFocus(e) {
      event_stop(e);
      this.$refs.target !== void 0 && this.$refs.target.focus();
      this.dialogFieldFocused = true;
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0);
    },

    __onDialogFieldBlur(e) {
      event_stop(e);
      this.$nextTick(() => {
        this.dialogFieldFocused = false;
      });
    },

    __getDialog(h) {
      var content = [h(QField, {
        staticClass: "col-auto ".concat(this.fieldClass),
        props: QSelect_objectSpread({}, this.$props, {
          for: this.targetUid,
          dark: this.isOptionsDark,
          square: true,
          loading: this.innerLoading,
          filled: true,
          stackLabel: this.inputValue.length > 0
        }),
        on: QSelect_objectSpread({}, this.$listeners, {
          focus: this.__onDialogFieldFocus,
          blur: this.__onDialogFieldBlur
        }),
        scopedSlots: QSelect_objectSpread({}, this.$scopedSlots, {
          rawControl: () => this.__getControl(h, true),
          before: void 0,
          after: void 0
        })
      })];
      this.menu === true && content.push(h('div', {
        ref: 'menuContent',
        staticClass: 'scroll',
        class: this.menuContentClass,
        style: this.popupContentStyle,
        on: cache(this, 'virtMenu', {
          click: prevent,
          '&scroll': this.__onVirtualScrollEvt
        })
      }, this.noOptions === true ? this.$scopedSlots['no-option'] !== void 0 ? this.$scopedSlots['no-option']({
        inputValue: this.inputValue
      }) : null : this.__getOptions(h)));
      return h(QDialog, {
        ref: 'dialog',
        props: {
          value: this.dialog,
          dark: this.isOptionsDark,
          position: this.useInput === true ? 'top' : void 0,
          transitionShow: this.transitionShowComputed,
          transitionHide: this.transitionHide
        },
        on: cache(this, 'dialog', {
          'before-hide': this.__onDialogBeforeHide,
          hide: this.__onDialogHide,
          show: this.__onDialogShow
        })
      }, [h('div', {
        staticClass: 'q-select__dialog' + (this.isOptionsDark === true ? ' q-select__dialog--dark q-dark' : '') + (this.dialogFieldFocused === true ? ' q-select__dialog--focused' : '')
      }, content)]);
    },

    __onDialogBeforeHide() {
      this.$refs.dialog.__refocusTarget = this.$el.querySelector('.q-field__native > [tabindex]:last-child');
      this.focused = false;
    },

    __onDialogHide(e) {
      this.hidePopup();
      this.$emit('blur', e);

      this.__resetInputValue();
    },

    __onDialogShow() {
      var el = document.activeElement; // IE can have null document.activeElement

      if ((el === null || el.id !== this.targetUid) && this.$refs.target !== el && this.$refs.target !== void 0) {
        this.$refs.target.focus();
      }
    },

    __closeMenu() {
      if (this.dialog === true) {
        return;
      }

      if (this.menu === true) {
        this.menu = false;
      }

      if (this.focused === false) {
        clearTimeout(this.filterId);
        this.filterId = void 0;

        if (this.innerLoading === true) {
          this.$emit('filter-abort');
          this.innerLoading = false;
        }
      }
    },

    showPopup(e) {
      if (this.hasDialog === true) {
        this.__onControlFocusin(e);

        this.dialog = true;
      } else {
        this.__focus();
      }

      if (this.$listeners.filter !== void 0) {
        this.filter(this.inputValue);
      } else if (this.noOptions !== true || this.$scopedSlots['no-option'] !== void 0) {
        this.menu = true;
      }
    },

    hidePopup() {
      this.dialog = false;

      this.__closeMenu();
    },

    __resetInputValue() {
      this.useInput === true && this.updateInputValue(this.multiple !== true && this.fillInput === true && this.innerValue.length > 0 ? this.__getOptionLabel(this.innerValue[0]) || '' : '', true, true);
    },

    __updateMenu(show) {
      var optionIndex = -1;

      if (show === true) {
        if (this.innerValue.length > 0) {
          var val = this.__getOptionValue(this.innerValue[0]);

          optionIndex = this.options.findIndex(v => isDeepEqual(this.__getOptionValue(v), val));
        }

        this.__resetVirtualScroll(optionIndex);
      }

      this.setOptionIndex(optionIndex);
    },

    __onPreRender() {
      this.hasDialog = this.$q.platform.is.mobile !== true && this.behavior !== 'dialog' ? false : this.behavior !== 'menu' && (this.useInput === true ? this.$scopedSlots['no-option'] !== void 0 || this.$listeners.filter !== void 0 || this.noOptions === false : true);
      this.transitionShowComputed = this.hasDialog === true && this.useInput === true && this.$q.platform.is.ios === true ? 'fade' : this.transitionShow;
    },

    __onPostRender() {
      if (this.dialog === false && this.$refs.menu !== void 0) {
        this.$refs.menu.updatePosition();
      }
    },

    updateMenuPosition() {
      this.__onPostRender();
    }

  },

  beforeDestroy() {
    clearTimeout(this.inputTimer);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/select/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/separator/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/skeleton/QSkeleton.js





var skeletonTypes = ['text', 'rect', 'circle', 'QBtn', 'QBadge', 'QChip', 'QToolbar', 'QCheckbox', 'QRadio', 'QToggle', 'QSlider', 'QRange', 'QInput', 'QAvatar'];
var skeletonAnimations = ['wave', 'pulse', 'pulse-x', 'pulse-y', 'fade', 'blink', 'none'];
/* harmony default export */ var QSkeleton = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSkeleton',
  mixins: [mixins_dark],
  props: {
    type: {
      type: String,
      validator: v => skeletonTypes.includes(v),
      default: 'rect'
    },
    animation: {
      type: String,
      validator: v => skeletonAnimations.includes(v),
      default: 'wave'
    },
    square: Boolean,
    bordered: Boolean,
    size: String,
    width: String,
    height: String,
    tag: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    style() {
      return this.size !== void 0 ? {
        width: this.size,
        height: this.size
      } : {
        width: this.width,
        height: this.height
      };
    },

    classes() {
      return "q-skeleton--".concat(this.isDark === true ? 'dark' : 'light', " q-skeleton--type-").concat(this.type) + (this.animation !== 'none' ? " q-skeleton--anim-".concat(this.animation) : '') + (this.square === true ? ' q-skeleton--square' : '') + (this.bordered === true ? ' q-skeleton--bordered' : '');
    }

  },

  render(h) {
    return h(this.tag, {
      staticClass: 'q-skeleton',
      class: this.classes,
      style: this.style
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/skeleton/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/slide-item/QSlideItem.js






var slotsDef = [['left', 'center', 'start', 'width'], ['right', 'center', 'end', 'width'], ['top', 'start', 'center', 'height'], ['bottom', 'end', 'center', 'height']];
/* harmony default export */ var QSlideItem = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSlideItem',
  mixins: [mixins_dark],
  props: {
    leftColor: String,
    rightColor: String,
    topColor: String,
    bottomColor: String
  },
  directives: {
    TouchPan: TouchPan
  },
  methods: {
    reset() {
      this.$refs.content.style.transform = "translate(0,0)";
    },

    __pan(evt) {
      var node = this.$refs.content;

      if (evt.isFirst) {
        this.__dir = null;
        this.__size = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this.__scale = 0;
        node.classList.add('no-transition');
        slotsDef.forEach(slot => {
          if (this.$scopedSlots[slot[0]] !== void 0) {
            var _node = this.$refs[slot[0] + 'Content'];
            _node.style.transform = "scale(1)";
            this.__size[slot[0]] = _node.getBoundingClientRect()[slot[3]];
          }
        });
        this.__axis = evt.direction === 'up' || evt.direction === 'down' ? 'Y' : 'X';
      } else if (evt.isFinal) {
        node.classList.remove('no-transition');

        if (this.__scale === 1) {
          node.style.transform = "translate".concat(this.__axis, "(").concat(this.__dir * 100, "%)");
          this.timer = setTimeout(() => {
            this.$emit(this.__showing, {
              reset: this.reset
            });
            this.$emit('action', {
              side: this.__showing,
              reset: this.reset
            });
          }, 230);
        } else {
          node.style.transform = "translate(0,0)";
        }

        return;
      } else {
        evt.direction = this.__axis === 'X' ? evt.offset.x < 0 ? 'left' : 'right' : evt.offset.y < 0 ? 'up' : 'down';
      }

      if (this.$scopedSlots.left === void 0 && evt.direction === 'right' || this.$scopedSlots.right === void 0 && evt.direction === 'left' || this.$scopedSlots.top === void 0 && evt.direction === 'down' || this.$scopedSlots.bottom === void 0 && evt.direction === 'up') {
        node.style.transform = "translate(0,0)";
        return;
      }

      var showing, dir, dist;

      if (this.__axis === 'X') {
        dir = evt.direction === 'left' ? -1 : 1;
        showing = dir * (this.$q.lang.rtl === true ? -1 : 1) === 1 ? 'left' : 'right';
        dist = evt.distance.x;
      } else {
        dir = evt.direction === 'up' ? -2 : 2;
        showing = dir === 2 ? 'top' : 'bottom';
        dist = evt.distance.y;
      }

      if (this.__dir !== null && Math.abs(dir) !== Math.abs(this.__dir)) {
        return;
      }

      if (this.__dir !== dir) {
        ['left', 'right', 'top', 'bottom'].forEach(d => {
          if (this.$refs[d] !== void 0) {
            this.$refs[d].style.visibility = showing === d ? 'visible' : 'hidden';
          }
        });
        this.__showing = showing;
        this.__dir = dir;
      }

      this.__scale = Math.max(0, Math.min(1, (dist - 40) / this.__size[showing]));
      node.style.transform = "translate".concat(this.__axis, "(").concat(dist * dir / Math.abs(dir), "px)");
      this.$refs["".concat(showing, "Content")].style.transform = "scale(".concat(this.__scale, ")");
    }

  },

  render(h) {
    var content = [],
        left = this.$scopedSlots.right !== void 0,
        right = this.$scopedSlots.left !== void 0,
        up = this.$scopedSlots.bottom !== void 0,
        down = this.$scopedSlots.top !== void 0;
    slotsDef.forEach(slot => {
      var dir = slot[0];

      if (this.$scopedSlots[dir] !== void 0) {
        content.push(h('div', {
          ref: dir,
          class: "q-slide-item__".concat(dir, " absolute-full row no-wrap items-").concat(slot[1], " justify-").concat(slot[2]) + (this[dir + 'Color'] !== void 0 ? " bg-".concat(this[dir + 'Color']) : '')
        }, [h('div', {
          ref: dir + 'Content'
        }, this.$scopedSlots[dir]())]));
      }
    });
    content.push(h('div', {
      ref: 'content',
      staticClass: 'q-slide-item__content',
      directives: left === true || right === true || up === true || down === true ? [{
        name: 'touch-pan',
        value: this.__pan,
        modifiers: {
          left,
          right,
          up,
          down,
          prevent: true,
          stop: true,
          mouse: true
        }
      }] : null
    }, slot_slot(this, 'default')));
    return h('div', {
      staticClass: 'q-slide-item q-item-type overflow-hidden',
      class: this.isDark === true ? "q-slide-item--dark q-dark" : ''
    }, content);
  },

  beforeDestroy() {
    clearTimeout(this.timer);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/slide-item/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/slide-transition/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/slider/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/space/QSpace.js

/* harmony default export */ var QSpace = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpace',

  render(h) {
    return h('div', {
      staticClass: 'q-space'
    });
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/space/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerAudio.js


/* harmony default export */ var QSpinnerAudio = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerAudio',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'fill': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 55 80',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'matrix(1 0 0 -1 0 80)'
      }
    }, [h('rect', {
      attrs: {
        'width': '10',
        'height': '20',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '4.3s',
        'values': '20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '15',
        'width': '10',
        'height': '80',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '2s',
        'values': '80;55;33;5;75;23;73;33;12;14;60;80',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '30',
        'width': '10',
        'height': '50',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '1.4s',
        'values': '50;34;78;23;56;23;34;76;80;54;21;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '45',
        'width': '10',
        'height': '30',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '2s',
        'values': '30;45;13;80;56;72;45;76;34;23;67;30',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerBall.js


/* harmony default export */ var QSpinnerBall = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerBall',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'stroke': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 57 57',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'stroke-width': '2',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('circle', {
      attrs: {
        'cx': '5',
        'cy': '50',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'values': '50;5;50;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'begin': '0s',
        'dur': '2.2s',
        'values': '5;27;49;5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '27',
        'cy': '5',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'from': '5',
        'to': '5',
        'values': '5;50;50;5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'begin': '0s',
        'dur': '2.2s',
        'from': '27',
        'to': '27',
        'values': '27;49;5;27',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '49',
        'cy': '50',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'values': '50;50;5;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'from': '49',
        'to': '49',
        'begin': '0s',
        'dur': '2.2s',
        'values': '49;5;27;49',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerBars.js


/* harmony default export */ var QSpinnerBars = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerBars',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'fill': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 135 140',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('rect', {
      attrs: {
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.5s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.5s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '30',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.25s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.25s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '60',
        'width': '15',
        'height': '140',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '90',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.25s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.25s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '120',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.5s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.5s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerComment.js


/* harmony default export */ var QSpinnerComment = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerComment',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('rect', {
      attrs: {
        'x': '0',
        'y': '0',
        'width': '100',
        'height': '100',
        'fill': 'none'
      }
    }), h('path', {
      attrs: {
        'd': 'M78,19H22c-6.6,0-12,5.4-12,12v31c0,6.6,5.4,12,12,12h37.2c0.4,3,1.8,5.6,3.7,7.6c2.4,2.5,5.1,4.1,9.1,4 c-1.4-2.1-2-7.2-2-10.3c0-0.4,0-0.8,0-1.3h8c6.6,0,12-5.4,12-12V31C90,24.4,84.6,19,78,19z',
        'fill': 'currentColor'
      }
    }), h('circle', {
      attrs: {
        'cx': '30',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;1;1',
        'keyTimes': '0;0.2;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '50',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;0;1;1',
        'keyTimes': '0;0.2;0.4;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '70',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;0;1;1',
        'keyTimes': '0;0.4;0.6;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerCube.js


/* harmony default export */ var QSpinnerCube = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerCube',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('rect', {
      attrs: {
        'x': '0',
        'y': '0',
        'width': '100',
        'height': '100',
        'fill': 'none'
      }
    }), h('g', {
      attrs: {
        'transform': 'translate(25 25)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.9'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(75 25)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.8'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.1s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(25 75)'
      }
    }, [h('rect', {
      staticClass: 'cube',
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.7'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.3s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(75 75)'
      }
    }, [h('rect', {
      staticClass: 'cube',
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.6'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.2s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerDots.js


/* harmony default export */ var QSpinnerDots = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerDots',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'fill': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 120 30',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('circle', {
      attrs: {
        'cx': '15',
        'cy': '15',
        'r': '15'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '15',
        'to': '15',
        'begin': '0s',
        'dur': '0.8s',
        'values': '15;9;15',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '1',
        'to': '1',
        'begin': '0s',
        'dur': '0.8s',
        'values': '1;.5;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '60',
        'cy': '15',
        'r': '9',
        'fill-opacity': '.3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '9',
        'to': '9',
        'begin': '0s',
        'dur': '0.8s',
        'values': '9;15;9',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '.5',
        'to': '.5',
        'begin': '0s',
        'dur': '0.8s',
        'values': '.5;1;.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '105',
        'cy': '15',
        'r': '15'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '15',
        'to': '15',
        'begin': '0s',
        'dur': '0.8s',
        'values': '15;9;15',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '1',
        'to': '1',
        'begin': '0s',
        'dur': '0.8s',
        'values': '1;.5;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerFacebook.js


/* harmony default export */ var QSpinnerFacebook = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerFacebook',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'xmlns': 'http://www.w3.org/2000/svg',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(20 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.6'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(50 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.8'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0.1s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(80 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.9'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0.2s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerGears.js


/* harmony default export */ var QSpinnerGears = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerGears',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(-20,-20)'
      }
    }, [h('path', {
      attrs: {
        'd': 'M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z',
        'fill': 'currentColor'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '90 50 50',
        'to': '0 50 50',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(20,20) rotate(15 50 50)'
      }
    }, [h('path', {
      attrs: {
        'd': 'M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z',
        'fill': 'currentColor'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '90 50 50',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerGrid.js


/* harmony default export */ var QSpinnerGrid = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerGrid',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'fill': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 105 105',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0s',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '52.5',
        'r': '12.5',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '100ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '300ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '52.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '600ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '800ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '52.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '400ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '700ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '500ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '200ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerHearts.js


/* harmony default export */ var QSpinnerHearts = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerHearts',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'fill': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 140 64',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('path', {
      attrs: {
        'd': 'M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.716-6.002 11.47-7.65 17.304-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0s',
        'dur': '1.4s',
        'values': '0.5;1;0.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.593-2.32 17.308 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0.7s',
        'dur': '1.4s',
        'values': '0.5;1;0.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z'
      }
    })]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerHourglass.js


/* harmony default export */ var QSpinnerHourglass = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerHourglass',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', [h('path', {
      staticClass: 'glass',
      attrs: {
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': '5',
        'stroke-miterlimit': '10',
        'd': 'M58.4,51.7c-0.9-0.9-1.4-2-1.4-2.3s0.5-0.4,1.4-1.4 C70.8,43.8,79.8,30.5,80,15.5H70H30H20c0.2,15,9.2,28.1,21.6,32.3c0.9,0.9,1.4,1.2,1.4,1.5s-0.5,1.6-1.4,2.5 C29.2,56.1,20.2,69.5,20,85.5h10h40h10C79.8,69.5,70.8,55.9,58.4,51.7z'
      }
    }), h('clipPath', {
      attrs: {
        'id': 'uil-hourglass-clip1'
      }
    }, [h('rect', {
      staticClass: 'clip',
      attrs: {
        'x': '15',
        'y': '20',
        'width': '70',
        'height': '25'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'from': '25',
        'to': '0',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'values': '25;0;0',
        'keyTimes': '0;0.5;1'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'from': '20',
        'to': '45',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'values': '20;45;45',
        'keyTimes': '0;0.5;1'
      }
    })])]), h('clipPath', {
      attrs: {
        'id': 'uil-hourglass-clip2'
      }
    }, [h('rect', {
      staticClass: 'clip',
      attrs: {
        'x': '15',
        'y': '55',
        'width': '70',
        'height': '25'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'from': '0',
        'to': '25',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'values': '0;25;25',
        'keyTimes': '0;0.5;1'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'from': '80',
        'to': '55',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'values': '80;55;55',
        'keyTimes': '0;0.5;1'
      }
    })])]), h('path', {
      staticClass: 'sand',
      attrs: {
        'd': 'M29,23c3.1,11.4,11.3,19.5,21,19.5S67.9,34.4,71,23H29z',
        'clip-path': 'url(#uil-hourglass-clip1)',
        'fill': 'currentColor'
      }
    }), h('path', {
      staticClass: 'sand',
      attrs: {
        'd': 'M71.6,78c-3-11.6-11.5-20-21.5-20s-18.5,8.4-21.5,20H71.6z',
        'clip-path': 'url(#uil-hourglass-clip2)',
        'fill': 'currentColor'
      }
    }), h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '180 50 50',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'values': '0 50 50;0 50 50;180 50 50',
        'keyTimes': '0;0.7;1'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerInfinity.js


/* harmony default export */ var QSpinnerInfinity = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerInfinity',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('path', {
      attrs: {
        'd': 'M24.3,30C11.4,30,5,43.3,5,50s6.4,20,19.3,20c19.3,0,32.1-40,51.4-40C88.6,30,95,43.3,95,50s-6.4,20-19.3,20C56.4,70,43.6,30,24.3,30z',
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': '8',
        'stroke-dasharray': '10.691205342610678 10.691205342610678',
        'stroke-dashoffset': '0'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-dashoffset',
        'from': '0',
        'to': '21.382410685221355',
        'begin': '0',
        'dur': '2s',
        'repeatCount': 'indefinite',
        'fill': 'freeze'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerIos.js


/* harmony default export */ var QSpinnerIos = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerIos',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'stroke': 'currentColor',
        'fill': 'currentColor',
        'viewBox': '0 0 64 64'
      }
    }, [h('g', {
      attrs: {
        'stroke-width': '4',
        'stroke-linecap': 'round'
      }
    }, [h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(180)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(210)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(240)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(270)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(300)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(330)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(0)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(30)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(60)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(90)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(120)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(150)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerOval.js


/* harmony default export */ var QSpinnerOval = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerOval',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'stroke': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 38 38',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'stroke-width': '2',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('circle', {
      attrs: {
        'stroke-opacity': '.5',
        'cx': '18',
        'cy': '18',
        'r': '18'
      }
    }), h('path', {
      attrs: {
        'd': 'M36 18c0-9.94-8.06-18-18-18'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerPie.js


/* harmony default export */ var QSpinnerPie = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerPie',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('path', {
      attrs: {
        'd': 'M0 50A50 50 0 0 1 50 0L50 50L0 50',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '0.8s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M50 0A50 50 0 0 1 100 50L50 50L50 0',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '1.6s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M100 50A50 50 0 0 1 50 100L50 50L100 50',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '2.4s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M50 100A50 50 0 0 1 0 50L50 50L50 100',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '3.2s',
        'repeatCount': 'indefinite'
      }
    })])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerPuff.js


/* harmony default export */ var QSpinnerPuff = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerPuff',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'stroke': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 44 44',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'fill': 'none',
        'fill-rule': 'evenodd',
        'stroke-width': '2'
      }
    }, [h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '1'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '0s',
        'dur': '1.8s',
        'values': '1; 20',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.165, 0.84, 0.44, 1',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '0s',
        'dur': '1.8s',
        'values': '1; 0',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.3, 0.61, 0.355, 1',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '1'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '-0.9s',
        'dur': '1.8s',
        'values': '1; 20',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.165, 0.84, 0.44, 1',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '-0.9s',
        'dur': '1.8s',
        'values': '1; 0',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.3, 0.61, 0.355, 1',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerRadio.js


/* harmony default export */ var QSpinnerRadio = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerRadio',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'scale(0.55)'
      }
    }, [h('circle', {
      attrs: {
        'cx': '30',
        'cy': '150',
        'r': '30',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })]), h('path', {
      attrs: {
        'd': 'M90,150h30c0-49.7-40.3-90-90-90v30C63.1,90,90,116.9,90,150z',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0.1',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })]), h('path', {
      attrs: {
        'd': 'M150,150h30C180,67.2,112.8,0,30,0v30C96.3,30,150,83.7,150,150z',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0.2',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerRings.js


/* harmony default export */ var QSpinnerRings = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerRings',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'stroke': 'currentColor',
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 45 45',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'fill': 'none',
        'fill-rule': 'evenodd',
        'transform': 'translate(1 1)',
        'stroke-width': '2'
      }
    }, [h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '1.5s',
        'dur': '3s',
        'values': '6;22',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '1.5s',
        'dur': '3s',
        'values': '1;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-width',
        'begin': '1.5s',
        'dur': '3s',
        'values': '2;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '3s',
        'dur': '3s',
        'values': '6;22',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '3s',
        'dur': '3s',
        'values': '1;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-width',
        'begin': '3s',
        'dur': '3s',
        'values': '2;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '8'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '0s',
        'dur': '1.5s',
        'values': '6;1;2;3;4;5;6',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/QSpinnerTail.js


/* harmony default export */ var QSpinnerTail = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSpinnerTail',
  mixins: [spinner_mixin],

  render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        focusable: 'false'
        /* needed for IE11 */
        ,
        'width': this.cSize,
        'height': this.cSize,
        'viewBox': '0 0 38 38',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('defs', [h('linearGradient', {
      attrs: {
        'x1': '8.042%',
        'y1': '0%',
        'x2': '65.682%',
        'y2': '23.865%',
        'id': 'a'
      }
    }, [h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'stop-opacity': '0',
        'offset': '0%'
      }
    }), h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'stop-opacity': '.631',
        'offset': '63.146%'
      }
    }), h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'offset': '100%'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('path', {
      attrs: {
        'd': 'M36 18c0-9.94-8.06-18-18-18',
        'stroke': 'url(#a)',
        'stroke-width': '2'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '0.9s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'fill': 'currentColor',
        'cx': '36',
        'cy': '18',
        'r': '1'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '0.9s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/spinner/index.js





















// CONCATENATED MODULE: ./node_modules/quasar/src/components/splitter/QSplitter.js









/* harmony default export */ var QSplitter = (vue_runtime_esm["a" /* default */].extend({
  name: 'QSplitter',
  mixins: [mixins_dark],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    value: {
      type: Number,
      required: true
    },
    reverse: Boolean,
    unit: {
      type: String,
      default: '%',
      validator: v => ['%', 'px'].includes(v)
    },
    limits: {
      type: Array,
      validator: v => {
        if (v.length !== 2) return false;
        if (typeof v[0] !== 'number' || typeof v[1] !== 'number') return false;
        return v[0] >= 0 && v[0] <= v[1];
      }
    },
    emitImmediately: Boolean,
    horizontal: Boolean,
    disable: Boolean,
    beforeClass: [Array, String, Object],
    afterClass: [Array, String, Object],
    separatorClass: [Array, String, Object],
    separatorStyle: [Array, String, Object]
  },
  watch: {
    value: {
      immediate: true,

      handler(v) {
        this.__normalize(v, this.computedLimits);
      }

    },
    limits: {
      deep: true,

      handler() {
        this.$nextTick(() => {
          this.__normalize(this.value, this.computedLimits);
        });
      }

    }
  },
  computed: {
    classes() {
      return (this.horizontal === true ? 'column' : 'row') + " q-splitter--".concat(this.horizontal === true ? 'horizontal' : 'vertical') + " q-splitter--".concat(this.disable === true ? 'disabled' : 'workable') + (this.isDark === true ? ' q-splitter--dark' : '');
    },

    prop() {
      return this.horizontal === true ? 'height' : 'width';
    },

    side() {
      return this.reverse !== true ? 'before' : 'after';
    },

    computedLimits() {
      return this.limits !== void 0 ? this.limits : this.unit === '%' ? [10, 90] : [50, Infinity];
    },

    styles() {
      return {
        [this.side]: {
          [this.prop]: this.__getCSSValue(this.value)
        }
      };
    }

  },
  methods: {
    __pan(evt) {
      if (evt.isFirst === true) {
        var size = this.$el.getBoundingClientRect()[this.prop];
        this.__dir = this.horizontal === true ? 'up' : 'left';
        this.__maxValue = this.unit === '%' ? 100 : size;
        this.__value = Math.min(this.__maxValue, this.computedLimits[1], Math.max(this.computedLimits[0], this.value));
        this.__multiplier = (this.reverse !== true ? 1 : -1) * (this.horizontal === true ? 1 : this.$q.lang.rtl === true ? -1 : 1) * (this.unit === '%' ? size === 0 ? 0 : 100 / size : 1);
        this.$el.classList.add('q-splitter--active');
        return;
      }

      if (evt.isFinal === true) {
        if (this.__normalized !== this.value) {
          this.$emit('input', this.__normalized);
        }

        this.$el.classList.remove('q-splitter--active');
        return;
      }

      var val = this.__value + this.__multiplier * (evt.direction === this.__dir ? -1 : 1) * evt.distance[this.horizontal === true ? 'y' : 'x'];
      this.__normalized = Math.min(this.__maxValue, this.computedLimits[1], Math.max(this.computedLimits[0], val));
      this.$refs[this.side].style[this.prop] = this.__getCSSValue(this.__normalized);

      if (this.emitImmediately === true && this.value !== this.__normalized) {
        this.$emit('input', this.__normalized);
      }
    },

    __normalize(val, limits) {
      if (val < limits[0]) {
        this.$emit('input', limits[0]);
      } else if (val > limits[1]) {
        this.$emit('input', limits[1]);
      }
    },

    __getCSSValue(value) {
      return (this.unit === '%' ? value : Math.round(value)) + this.unit;
    }

  },

  render(h) {
    var child = [h('div', {
      ref: 'before',
      staticClass: 'q-splitter__panel q-splitter__before' + (this.reverse === true ? ' col' : ''),
      style: this.styles.before,
      class: this.beforeClass,
      on: cache(this, 'stop', {
        input: event_stop
      })
    }, slot_slot(this, 'before')), h('div', {
      staticClass: 'q-splitter__separator',
      style: this.separatorStyle,
      class: this.separatorClass
    }, [h('div', {
      staticClass: 'absolute-full q-splitter__separator-area',
      directives: this.disable === true ? void 0 : cache(this, 'dir#' + this.horizontal, [{
        name: 'touch-pan',
        value: this.__pan,
        modifiers: {
          horizontal: this.horizontal !== true,
          vertical: this.horizontal,
          prevent: true,
          stop: true,
          mouse: true,
          mouseAllDir: true
        }
      }])
    }, slot_slot(this, 'separator'))]), h('div', {
      ref: 'after',
      staticClass: 'q-splitter__panel q-splitter__after' + (this.reverse === true ? '' : ' col'),
      style: this.styles.after,
      class: this.afterClass,
      on: cache(this, 'stop', {
        input: event_stop
      })
    }, slot_slot(this, 'after'))];
    return h('div', {
      staticClass: 'q-splitter no-wrap',
      class: this.classes,
      on: this.$listeners
    }, mergeSlot(child, this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/splitter/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/stepper/StepHeader.js



/* harmony default export */ var StepHeader = (vue_runtime_esm["a" /* default */].extend({
  name: 'StepHeader',
  directives: {
    Ripple: Ripple
  },
  props: {
    stepper: {},
    step: {}
  },
  computed: {
    isActive() {
      return this.stepper.value === this.step.name;
    },

    isDisable() {
      var opt = this.step.disable;
      return opt === true || opt === '';
    },

    isError() {
      var opt = this.step.error;
      return opt === true || opt === '';
    },

    isDone() {
      var opt = this.step.done;
      return !this.isDisable && (opt === true || opt === '');
    },

    headerNav() {
      var opt = this.step.headerNav,
          nav = opt === true || opt === '' || opt === void 0;
      return !this.isDisable && this.stepper.headerNav && (this.isActive || nav);
    },

    hasPrefix() {
      return this.step.prefix && !this.isActive && !this.isError && !this.isDone;
    },

    icon() {
      if (this.isActive) {
        return this.step.activeIcon || this.stepper.activeIcon || this.$q.iconSet.stepper.active;
      }

      if (this.isError) {
        return this.step.errorIcon || this.stepper.errorIcon || this.$q.iconSet.stepper.error;
      }

      if (!this.isDisable && this.isDone) {
        return this.step.doneIcon || this.stepper.doneIcon || this.$q.iconSet.stepper.done;
      }

      return this.step.icon || this.stepper.inactiveIcon;
    },

    color() {
      if (this.isActive) {
        return this.step.activeColor || this.stepper.activeColor || this.step.color;
      }

      if (this.isError) {
        return this.step.errorColor || this.stepper.errorColor;
      }

      if (!this.disable && this.isDone) {
        return this.step.doneColor || this.stepper.doneColor || this.step.color || this.stepper.inactiveColor;
      }

      return this.step.color || this.stepper.inactiveColor;
    },

    classes() {
      return {
        ["text-".concat(this.color)]: this.color,
        'q-stepper__tab--error': this.isError,
        'q-stepper__tab--active': this.isActive,
        'q-stepper__tab--done': this.isDone,
        'q-stepper__tab--navigation q-focusable q-hoverable': this.headerNav,
        'q-stepper__tab--disabled': this.isDisable
      };
    }

  },
  methods: {
    activate() {
      this.$refs.blurTarget !== void 0 && this.$refs.blurTarget.focus();
      !this.isActive && this.stepper.goTo(this.step.name);
    },

    keyup(e) {
      e.keyCode === 13 && !this.isActive && this.stepper.goTo(this.step.name);
    }

  },

  render(h) {
    var data = {
      staticClass: 'q-stepper__tab col-grow flex items-center no-wrap relative-position',
      class: this.classes,
      directives: this.stepper.headerNav ? [{
        name: 'ripple',
        value: this.headerNav
      }] : null
    };

    if (this.headerNav) {
      data.on = {
        click: this.activate,
        keyup: this.keyup
      };
      data.attrs = {
        tabindex: this.isDisable === true ? -1 : this.$attrs.tabindex || 0
      };
    }

    return h('div', data, [h('div', {
      staticClass: 'q-focus-helper',
      attrs: {
        tabindex: -1
      },
      ref: 'blurTarget'
    }), h('div', {
      staticClass: 'q-stepper__dot row flex-center q-stepper__line relative-position'
    }, [h('span', {
      staticClass: 'row flex-center'
    }, [this.hasPrefix === true ? this.step.prefix : h(QIcon, {
      props: {
        name: this.icon
      }
    })])]), this.step.title ? h('div', {
      staticClass: 'q-stepper__label q-stepper__line relative-position'
    }, [h('div', {
      staticClass: 'q-stepper__title'
    }, [this.step.title]), this.step.caption ? h('div', {
      staticClass: 'q-stepper__caption'
    }, [this.step.caption]) : null]) : null]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/stepper/QStep.js






var StepWrapper = vue_runtime_esm["a" /* default */].extend({
  name: 'QStepWrapper',

  render(h) {
    return h('div', {
      staticClass: 'q-stepper__step-content'
    }, [h('div', {
      staticClass: 'q-stepper__step-inner'
    }, slot_slot(this, 'default'))]);
  }

});
/* harmony default export */ var QStep = (vue_runtime_esm["a" /* default */].extend({
  name: 'QStep',
  inject: {
    stepper: {
      default() {
        console.error('QStep needs to be child of QStepper');
      }

    }
  },
  mixins: [PanelChildMixin],
  props: {
    icon: String,
    color: String,
    title: {
      type: String,
      required: true
    },
    caption: String,
    prefix: [String, Number],
    doneIcon: String,
    doneColor: String,
    activeIcon: String,
    activeColor: String,
    errorIcon: String,
    errorColor: String,
    headerNav: {
      type: Boolean,
      default: true
    },
    done: Boolean,
    error: Boolean
  },
  computed: {
    isActive() {
      return this.stepper.value === this.name;
    }

  },
  watch: {
    isActive(active) {
      if (active === true && this.stepper.vertical === true) {
        this.$nextTick(() => {
          if (this.$el !== void 0) {
            this.$el.scrollTop = 0;
          }
        });
      }
    }

  },

  render(h) {
    var vertical = this.stepper.vertical;
    var content = vertical === true && this.stepper.keepAlive === true ? h('keep-alive', this.isActive === true ? [h(StepWrapper, {
      key: this.name
    }, slot_slot(this, 'default'))] : void 0) : vertical !== true || this.isActive === true ? StepWrapper.options.render.call(this, h) : void 0;
    return h('div', {
      staticClass: 'q-stepper__step',
      on: this.$listeners
    }, vertical === true ? [h(StepHeader, {
      props: {
        stepper: this.stepper,
        step: this
      }
    }), this.stepper.animated === true ? h(QSlideTransition, [content]) : content] : [content]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/stepper/QStepper.js











/* harmony default export */ var QStepper = (vue_runtime_esm["a" /* default */].extend({
  name: 'QStepper',

  provide() {
    return {
      stepper: this
    };
  },

  mixins: [mixins_dark, PanelParentMixin],
  props: {
    flat: Boolean,
    bordered: Boolean,
    vertical: Boolean,
    alternativeLabels: Boolean,
    headerNav: Boolean,
    contracted: Boolean,
    inactiveColor: String,
    inactiveIcon: String,
    doneIcon: String,
    doneColor: String,
    activeIcon: String,
    activeColor: String,
    errorIcon: String,
    errorColor: String
  },
  computed: {
    classes() {
      return "q-stepper--".concat(this.vertical === true ? 'vertical' : 'horizontal') + (this.flat === true || this.isDark === true ? ' q-stepper--flat no-shadow' : '') + (this.bordered === true || this.isDark === true && this.flat === false ? ' q-stepper--bordered' : '') + (this.contracted === true ? ' q-stepper--contracted' : '') + (this.isDark === true ? ' q-stepper--dark q-dark' : '');
    }

  },
  methods: {
    __getContent(h) {
      var top = slot_slot(this, 'message', []);

      if (this.vertical === true) {
        this.__isValidPanelName(this.value) && this.__updatePanelIndex();
        return top.concat(h('div', {
          staticClass: 'q-stepper__content',
          // stop propagation of content emitted @input
          // which would tamper with Panel's model
          on: cache(this, 'stop', {
            input: event_stop
          })
        }, slot_slot(this, 'default')));
      }

      return [h('div', {
        staticClass: 'q-stepper__header row items-stretch justify-between',
        class: {
          ["q-stepper__header--".concat(this.alternativeLabels ? 'alternative' : 'standard', "-labels")]: true,
          'q-stepper__header--border': !this.flat || this.bordered
        }
      }, this.__getAllPanels().map(panel => {
        var step = panel.componentOptions.propsData;
        return h(StepHeader, {
          key: step.name,
          props: {
            stepper: this,
            step
          }
        });
      }))].concat(top, h('div', {
        staticClass: 'q-stepper__content q-panel-parent',
        directives: this.panelDirectives
      }, this.__getPanelContent(h)));
    },

    __renderPanels(h) {
      return h('div', {
        staticClass: 'q-stepper',
        class: this.classes,
        on: this.$listeners
      }, mergeSlot(this.__getContent(h), this, 'navigation'));
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/stepper/QStepperNavigation.js


/* harmony default export */ var QStepperNavigation = (vue_runtime_esm["a" /* default */].extend({
  name: 'QStepperNavigation',

  render(h) {
    return h('div', {
      staticClass: 'q-stepper__nav',
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/stepper/index.js




// CONCATENATED MODULE: ./node_modules/quasar/src/components/tab-panels/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-top.js

/* harmony default export */ var table_top = ({
  computed: {
    marginalsProps() {
      return {
        pagination: this.computedPagination,
        pagesNumber: this.pagesNumber,
        isFirstPage: this.isFirstPage,
        isLastPage: this.isLastPage,
        prevPage: this.prevPage,
        nextPage: this.nextPage,
        inFullscreen: this.inFullscreen,
        toggleFullscreen: this.toggleFullscreen
      };
    }

  },
  methods: {
    getTop(h) {
      var top = this.$scopedSlots.top,
          topLeft = this.$scopedSlots['top-left'],
          topRight = this.$scopedSlots['top-right'],
          topSelection = this.$scopedSlots['top-selection'],
          hasSelection = this.hasSelectionMode === true && topSelection !== void 0 && this.rowsSelectedNumber > 0,
          staticClass = 'q-table__top relative-position row items-center';

      if (top !== void 0) {
        return h('div', {
          staticClass
        }, [top(this.marginalsProps)]);
      }

      var child;

      if (hasSelection === true) {
        child = topSelection(this.marginalsProps).slice();
      } else {
        child = [];

        if (topLeft !== void 0) {
          child.push(h('div', {
            staticClass: 'q-table-control'
          }, [topLeft(this.marginalsProps)]));
        } else if (this.title) {
          child.push(h('div', {
            staticClass: 'q-table__control'
          }, [h('div', {
            staticClass: 'q-table__title'
          }, this.title)]));
        }
      }

      if (topRight !== void 0) {
        child.push(h('div', {
          staticClass: 'q-table__separator col'
        }));
        child.push(h('div', {
          staticClass: 'q-table__control'
        }, [topRight(this.marginalsProps)]));
      }

      if (child.length === 0) {
        return;
      }

      return h('div', {
        staticClass
      }, child);
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTh.js








function QTh_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QTh_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QTh_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QTh_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ var QTh = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTh',
  props: {
    props: Object,
    autoWidth: Boolean
  },

  render(h) {
    var on = this.$listeners;

    if (this.props === void 0) {
      return h('th', {
        on,
        class: this.autoWidth === true ? 'q-table--col-auto-width' : null
      }, slot_slot(this, 'default'));
    }

    var col, child;
    var name = this.$vnode.key;

    if (name) {
      col = this.props.colsMap[name];

      if (col === void 0) {
        return;
      }
    } else {
      col = this.props.col;
    }

    if (col.sortable === true) {
      var action = col.align === 'right' ? 'unshift' : 'push';
      child = uniqueSlot(this, 'default', []);
      child[action](h(QIcon, {
        props: {
          name: this.$q.iconSet.table.arrowUp
        },
        staticClass: col.__iconClass
      }));
    } else {
      child = slot_slot(this, 'default');
    }

    var evt = col.sortable === true ? {
      click: evt => {
        this.props.sort(col);
        this.$emit('click', evt);
      }
    } : {};
    return h('th', {
      on: QTh_objectSpread({}, on, {}, evt),
      style: col.__thStyle,
      class: col.__thClass + (this.autoWidth === true ? ' q-table--col-auto-width' : '')
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-header.js






/* harmony default export */ var table_header = ({
  methods: {
    getTableHeader(h) {
      var child = this.getTableHeaderRow(h);
      this.loading === true && child.push(h('tr', {
        staticClass: 'q-table__progress'
      }, [h('th', {
        staticClass: 'relative-position',
        attrs: {
          colspan: '100%'
        }
      }, this.__getProgress(h))]));
      return h('thead', child);
    },

    getTableHeaderRow(h) {
      var header = this.$scopedSlots.header,
          headerCell = this.$scopedSlots['header-cell'];

      if (header !== void 0) {
        return header(this.addTableHeaderRowMeta({
          header: true,
          cols: this.computedCols,
          sort: this.sort,
          colsMap: this.computedColsMap
        })).slice();
      }

      var mapFn;

      if (headerCell !== void 0) {
        mapFn = col => headerCell({
          col,
          cols: this.computedCols,
          sort: this.sort,
          colsMap: this.computedColsMap
        });
      } else {
        mapFn = col => {
          var props = {
            col,
            cols: this.computedCols,
            sort: this.sort,
            colsMap: this.computedColsMap
          };
          var slot = this.$scopedSlots["header-cell-".concat(col.name)];
          return slot !== void 0 ? slot(props) : h(QTh, {
            key: col.name,
            props: {
              props
            },
            style: col.headerStyle,
            class: col.headerClasses
          }, col.label);
        };
      }

      var child = this.computedCols.map(mapFn);

      if (this.singleSelection === true && this.grid !== true) {
        child.unshift(h('th', {
          staticClass: 'q-table--col-auto-width'
        }, [' ']));
      } else if (this.multipleSelection === true) {
        child.unshift(h('th', {
          staticClass: 'q-table--col-auto-width'
        }, [h(QCheckbox, {
          props: {
            color: this.color,
            value: this.someRowsSelected === true ? null : this.allRowsSelected,
            dark: this.isDark,
            dense: this.dense
          },
          on: cache(this, 'inp', {
            input: val => {
              if (this.someRowsSelected === true) {
                val = false;
              }

              this.__updateSelection(this.computedRows.map(this.getRowKey), this.computedRows, val);
            }
          })
        })]));
      }

      return [h('tr', {
        style: this.tableHeaderStyle,
        class: this.tableHeaderClass
      }, child)];
    },

    addTableHeaderRowMeta(data) {
      if (this.multipleSelection === true) {
        Object.defineProperty(data, 'selected', {
          get: () => this.someRowsSelected === true ? 'some' : this.allRowsSelected,
          set: val => {
            if (this.someRowsSelected === true) {
              val = false;
            }

            this.__updateSelection(this.computedRows.map(this.getRowKey), this.computedRows, val);
          },
          configurable: true,
          enumerable: true
        });
        data.partialSelected = this.someRowsSelected;
        data.multipleSelect = true;
      }

      return data;
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-body.js









function table_body_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function table_body_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { table_body_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { table_body_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ var table_body = ({
  methods: {
    getTableRowBody(row, body) {
      var key = this.getRowKey(row),
          selected = this.isRowSelected(key);
      return body(this.addBodyRowMeta({
        key,
        row,
        cols: this.computedCols,
        colsMap: this.computedColsMap,
        __trClass: selected ? 'selected' : ''
      }));
    },

    getTableRow(h, row) {
      var bodyCell = this.$scopedSlots['body-cell'],
          key = this.getRowKey(row),
          selected = this.isRowSelected(key),
          child = bodyCell ? this.computedCols.map(col => bodyCell(this.addBodyCellMetaData({
        row,
        col
      }))) : this.computedCols.map(col => {
        var slot = this.$scopedSlots["body-cell-".concat(col.name)];
        return slot !== void 0 ? slot(this.addBodyCellMetaData({
          row,
          col
        })) : h('td', {
          class: col.__tdClass,
          style: col.__tdStyle
        }, this.getCellValue(col, row));
      });
      this.hasSelectionMode === true && child.unshift(h('td', {
        staticClass: 'q-table--col-auto-width'
      }, [h(QCheckbox, {
        props: {
          value: selected,
          color: this.color,
          dark: this.isDark,
          dense: this.dense
        },
        on: {
          input: adding => {
            this.__updateSelection([key], [row], adding);
          }
        }
      })]));
      var data = {
        key,
        class: {
          selected
        },
        on: {}
      };

      if (this.$listeners['row-click'] !== void 0) {
        data.class['cursor-pointer'] = true;

        data.on.click = evt => {
          this.$emit('row-click', evt, row);
        };
      }

      if (this.$listeners['row-dblclick'] !== void 0) {
        data.class['cursor-pointer'] = true;

        data.on.dblclick = evt => {
          this.$emit('row-dblclick', evt, row);
        };
      }

      return h('tr', data, child);
    },

    getTableBody(h) {
      var body = this.$scopedSlots.body,
          topRow = this.$scopedSlots['top-row'],
          bottomRow = this.$scopedSlots['bottom-row'],
          mapFn = body !== void 0 ? row => this.getTableRowBody(row, body) : row => this.getTableRow(h, row);
      var child = this.computedRows.map(mapFn);

      if (topRow !== void 0) {
        child = topRow({
          cols: this.computedCols
        }).concat(child);
      }

      if (bottomRow !== void 0) {
        child = child.concat(bottomRow({
          cols: this.computedCols
        }));
      }

      return h('tbody', child);
    },

    getTableRowVirtual(h) {
      var body = this.$scopedSlots.body;
      return body !== void 0 ? props => this.getTableRowBody(props.item, body) : props => this.getTableRow(h, props.item);
    },

    addBodyRowMeta(data) {
      this.hasSelectionMode === true && Object.defineProperty(data, 'selected', {
        get: () => this.isRowSelected(data.key),
        set: adding => {
          this.__updateSelection([data.key], [data.row], adding);
        },
        configurable: true,
        enumerable: true
      });
      Object.defineProperty(data, 'expand', {
        get: () => this.rowsExpanded[data.key] === true,
        set: val => {
          this.$set(this.rowsExpanded, data.key, val);
        },
        configurable: true,
        enumerable: true
      });
      data.cols = data.cols.map(col => {
        var c = table_body_objectSpread({}, col);

        Object.defineProperty(c, 'value', {
          get: () => this.getCellValue(col, data.row),
          configurable: true,
          enumerable: true
        });
        return c;
      });
      return data;
    },

    addBodyCellMetaData(data) {
      Object.defineProperty(data, 'value', {
        get: () => this.getCellValue(data.col, data.row),
        configurable: true,
        enumerable: true
      });
      return data;
    },

    getCellValue(col, row) {
      var val = typeof col.field === 'function' ? col.field(row) : row[col.field];
      return col.format !== void 0 ? col.format(val, row) : val;
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-bottom.js






/* harmony default export */ var table_bottom = ({
  computed: {
    navIcon() {
      var ico = [this.$q.iconSet.table.prevPage, this.$q.iconSet.table.nextPage];
      return this.$q.lang.rtl === true ? ico.reverse() : ico;
    }

  },
  methods: {
    getBottom(h) {
      if (this.hideBottom === true) {
        return;
      }

      if (this.nothingToDisplay === true) {
        var message = this.filter ? this.noResultsLabel || this.$q.lang.table.noResults : this.loading === true ? this.loadingLabel || this.$q.lang.table.loading : this.noDataLabel || this.$q.lang.table.noData;
        var noData = this.$scopedSlots['no-data'];
        var children = noData !== void 0 ? [noData({
          message,
          icon: this.$q.iconSet.table.warning,
          filter: this.filter
        })] : [h(QIcon, {
          staticClass: 'q-table__bottom-nodata-icon',
          props: {
            name: this.$q.iconSet.table.warning
          }
        }), message];
        return h('div', {
          staticClass: 'q-table__bottom row items-center q-table__bottom--nodata'
        }, children);
      }

      var bottom = this.$scopedSlots.bottom;
      return h('div', {
        staticClass: 'q-table__bottom row items-center',
        class: bottom !== void 0 ? null : 'justify-end'
      }, bottom !== void 0 ? [bottom(this.marginalsProps)] : this.getPaginationRow(h));
    },

    getPaginationRow(h) {
      var control;
      var rowsPerPage = this.computedPagination.rowsPerPage,
          paginationLabel = this.paginationLabel || this.$q.lang.table.pagination,
          paginationSlot = this.$scopedSlots.pagination,
          hasOpts = this.rowsPerPageOptions.length > 1;
      var child = [h('div', {
        staticClass: 'q-table__control'
      }, [h('div', [this.hasSelectionMode === true && this.rowsSelectedNumber > 0 ? (this.selectedRowsLabel || this.$q.lang.table.selectedRecords)(this.rowsSelectedNumber) : ''])]), h('div', {
        staticClass: 'q-table__separator col'
      })];

      if (hasOpts === true) {
        child.push(h('div', {
          staticClass: 'q-table__control'
        }, [h('span', {
          staticClass: 'q-table__bottom-item'
        }, [this.rowsPerPageLabel || this.$q.lang.table.recordsPerPage]), h(QSelect, {
          staticClass: 'inline q-table__bottom-item',
          props: {
            color: this.color,
            value: rowsPerPage,
            options: this.computedRowsPerPageOptions,
            displayValue: rowsPerPage === 0 ? this.$q.lang.table.allRows : rowsPerPage,
            dark: this.isDark,
            borderless: true,
            dense: true,
            optionsDense: true,
            optionsCover: true
          },
          on: cache(this, 'pgSize', {
            input: pag => {
              this.setPagination({
                page: 1,
                rowsPerPage: pag.value
              });
            }
          })
        })]));
      }

      if (paginationSlot !== void 0) {
        control = paginationSlot(this.marginalsProps);
      } else {
        control = [h('span', rowsPerPage !== 0 ? {
          staticClass: 'q-table__bottom-item'
        } : {}, [rowsPerPage ? paginationLabel(this.firstRowIndex + 1, Math.min(this.lastRowIndex, this.computedRowsNumber), this.computedRowsNumber) : paginationLabel(1, this.computedRowsNumber, this.computedRowsNumber)])];

        if (rowsPerPage !== 0) {
          control.push(h(QBtn, {
            props: {
              color: this.color,
              round: true,
              icon: this.navIcon[0],
              dense: true,
              flat: true,
              disable: this.isFirstPage
            },
            on: cache(this, 'pgPrev', {
              click: this.prevPage
            })
          }), h(QBtn, {
            props: {
              color: this.color,
              round: true,
              icon: this.navIcon[1],
              dense: true,
              flat: true,
              disable: this.isLastPage
            },
            on: cache(this, 'pgNext', {
              click: this.nextPage
            })
          }));
        }
      }

      child.push(h('div', {
        staticClass: 'q-table__control'
      }, control));
      return child;
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-grid.js



/* harmony default export */ var table_grid = ({
  methods: {
    getGridBody(h) {
      var item = this.$scopedSlots.item !== void 0 ? this.$scopedSlots.item : scope => {
        var child = scope.cols.map(col => h('div', {
          staticClass: 'q-table__grid-item-row'
        }, [h('div', {
          staticClass: 'q-table__grid-item-title'
        }, [col.label]), h('div', {
          staticClass: 'q-table__grid-item-value'
        }, [col.value])]));
        this.hasSelectionMode === true && child.unshift(h('div', {
          staticClass: 'q-table__grid-item-row'
        }, [h(QCheckbox, {
          props: {
            value: scope.selected,
            color: this.color,
            dark: this.isDark,
            dense: true
          },
          on: {
            input: val => {
              scope.selected = val;
            }
          }
        })]), h(QSeparator, {
          props: {
            dark: this.isDark
          }
        }));
        var data = {
          staticClass: 'q-table__grid-item-card' + this.cardDefaultClass,
          class: this.cardClass,
          style: this.cardStyle,
          on: {}
        };

        if (this.$listeners['row-click'] !== void 0 || this.$listeners['row-dblclick'] !== void 0) {
          data.staticClass += ' cursor-pointer';
        }

        if (this.$listeners['row-click'] !== void 0) {
          data.on.click = evt => {
            this.$emit('row-click', evt, scope.row);
          };
        }

        if (this.$listeners['row-dblclick'] !== void 0) {
          data.on.dblclick = evt => {
            this.$emit('row-dblclick', evt, scope.row);
          };
        }

        return h('div', {
          staticClass: 'q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3',
          class: scope.selected === true ? 'q-table__grid-item--selected' : ''
        }, [h('div', data, child)]);
      };
      return h('div', {
        staticClass: 'row',
        class: this.cardContainerClass,
        style: this.cardContainerStyle
      }, this.computedRows.map(row => {
        var key = this.getRowKey(row),
            selected = this.isRowSelected(key);
        return item(this.addBodyRowMeta({
          key,
          row,
          cols: this.computedCols,
          colsMap: this.computedColsMap,
          __trClass: selected ? 'selected' : ''
        }));
      }));
    },

    getGridHeader(h) {
      var child = this.gridHeader === true ? [h('table', {
        staticClass: 'q-table'
      }, [this.getTableHeader(h)])] : this.loading === true ? this.__getProgress(h) : void 0;
      return h('div', {
        staticClass: 'q-table__middle'
      }, child);
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/get-table-middle.js







function get_table_middle_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function get_table_middle_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { get_table_middle_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { get_table_middle_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* harmony default export */ var get_table_middle = (function (h, conf, content) {
  return h('div', get_table_middle_objectSpread({}, conf, {
    staticClass: 'q-table__middle' + (conf.staticClass !== void 0 ? ' ' + conf.staticClass : '')
  }), [h('table', {
    staticClass: 'q-table'
  }, content)]);
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/virtual-scroll/QVirtualScroll.js












var comps = {
  list: QList,
  table: QMarkupTable
};
/* harmony default export */ var QVirtualScroll = (vue_runtime_esm["a" /* default */].extend({
  name: 'QVirtualScroll',
  mixins: [virtual_scroll],
  props: {
    type: {
      type: String,
      default: 'list',
      validator: v => ['list', 'table', '__qtable'].includes(v)
    },
    items: {
      type: Array,
      default: () => []
    },
    itemsFn: Function,
    itemsSize: Number,
    scrollTarget: {
      default: void 0
    }
  },
  computed: {
    virtualScrollLength() {
      return this.itemsSize >= 0 && this.itemsFn !== void 0 ? parseInt(this.itemsSize, 10) : Array.isArray(this.items) ? this.items.length : 0;
    },

    virtualScrollScope() {
      if (this.virtualScrollLength === 0) {
        return [];
      }

      var mapFn = (item, i) => ({
        index: this.virtualScrollSliceRange.from + i,
        item
      });

      if (this.itemsFn === void 0) {
        return this.items.slice(this.virtualScrollSliceRange.from, this.virtualScrollSliceRange.to).map(mapFn);
      }

      return this.itemsFn(this.virtualScrollSliceRange.from, this.virtualScrollSliceRange.to - this.virtualScrollSliceRange.from).map(mapFn);
    },

    classes() {
      return 'q-virtual-scroll q-virtual-scroll' + (this.virtualScrollHorizontal === true ? '--horizontal' : '--vertical') + (this.scrollTarget !== void 0 ? '' : ' scroll');
    },

    attrs() {
      return this.scrollTarget !== void 0 ? void 0 : {
        tabindex: 0
      };
    }

  },
  watch: {
    virtualScrollLength() {
      this.__resetVirtualScroll();
    },

    scrollTarget() {
      this.__unconfigureScrollTarget();

      this.__configureScrollTarget();
    }

  },
  methods: {
    __getVirtualScrollEl() {
      return this.$el;
    },

    __getVirtualScrollTarget() {
      return this.__scrollTarget;
    },

    __configureScrollTarget() {
      var __scrollTarget = typeof this.scrollTarget === 'string' ? document.querySelector(this.scrollTarget) : this.scrollTarget;

      if (__scrollTarget === void 0) {
        __scrollTarget = this.$el;
      } else if (__scrollTarget === document || __scrollTarget === document.body || __scrollTarget === document.scrollingElement || __scrollTarget === document.documentElement) {
        __scrollTarget = window;
      }

      this.__scrollTarget = __scrollTarget;

      __scrollTarget.addEventListener('scroll', this.__onVirtualScrollEvt, listenOpts.passive);
    },

    __unconfigureScrollTarget() {
      if (this.__scrollTarget !== void 0) {
        this.__scrollTarget.removeEventListener('scroll', this.__onVirtualScrollEvt, listenOpts.passive);

        this.__scrollTarget = void 0;
      }
    }

  },

  beforeMount() {
    this.__resetVirtualScroll();
  },

  mounted() {
    this.__configureScrollTarget();
  },

  beforeDestroy() {
    this.__unconfigureScrollTarget();
  },

  render(h) {
    if (this.$scopedSlots.default === void 0) {
      console.error("QVirtualScroll: default scoped slot is required for rendering", this);
      return;
    }

    var child = this.__padVirtualScroll(h, this.type === 'list' ? 'div' : 'tbody', this.virtualScrollScope.map(this.$scopedSlots.default));

    if (this.$scopedSlots.before !== void 0) {
      child = this.$scopedSlots.before().concat(child);
    }

    child = mergeSlot(child, this, 'after');
    return this.type === '__qtable' ? get_table_middle(h, {
      staticClass: this.classes
    }, child) : h(comps[this.type], {
      class: this.classes,
      attrs: this.attrs,
      props: this.$attrs,
      on: this.$listeners
    }, child);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/sort.js
function sortString(a, b) {
  if (typeof a !== 'string') {
    throw new TypeError('The value for sorting must be a String');
  }

  return a.localeCompare(b);
}
function sortNumber(a, b) {
  return a - b;
}
function sortDate(a, b) {
  return new Date(a) - new Date(b);
}
function sortBoolean(a, b) {
  return a && !b ? -1 : !a && b ? 1 : 0;
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-sort.js






/* harmony default export */ var table_sort = ({
  props: {
    sortMethod: {
      type: Function,

      default(data, sortBy, descending) {
        var col = this.columns.find(def => def.name === sortBy);

        if (col === void 0 || col.field === void 0) {
          return data;
        }

        var dir = descending === true ? -1 : 1,
            val = typeof col.field === 'function' ? v => col.field(v) : v => v[col.field];
        return data.sort((a, b) => {
          var A = val(a),
              B = val(b);

          if (A === null || A === void 0) {
            return -1 * dir;
          }

          if (B === null || B === void 0) {
            return 1 * dir;
          }

          if (col.sort !== void 0) {
            return col.sort(A, B, a, b) * dir;
          }

          if (isNumber(A) === true && isNumber(B) === true) {
            return (A - B) * dir;
          }

          if (isDate(A) === true && isDate(B) === true) {
            return sortDate(A, B) * dir;
          }

          if (typeof A === 'boolean' && typeof B === 'boolean') {
            return (A - B) * dir;
          }

          var _map = [A, B].map(s => (s + '').toLocaleString().toLowerCase());

          var _map2 = _slicedToArray(_map, 2);

          A = _map2[0];
          B = _map2[1];
          return A < B ? -1 * dir : A === B ? 0 : dir;
        });
      }

    }
  },
  computed: {
    columnToSort() {
      var sortBy = this.computedPagination.sortBy;

      if (sortBy) {
        return this.columns.find(def => def.name === sortBy) || null;
      }
    }

  },
  methods: {
    sort(col
    /* String(col name) or Object(col definition) */
    ) {
      if (col === Object(col)) {
        col = col.name;
      }

      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending;

      if (sortBy !== col) {
        sortBy = col;
        descending = false;
      } else if (this.binaryStateSort === true) {
        descending = !descending;
      } else if (descending === true) {
        sortBy = null;
      } else {
        descending = true;
      }

      this.setPagination({
        sortBy,
        descending,
        page: 1
      });
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-filter.js



/* harmony default export */ var table_filter = ({
  props: {
    filter: [String, Object],
    filterMethod: {
      type: Function,

      default(rows, terms) {
        var cols = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.computedCols;
        var cellValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.getCellValue;
        var lowerTerms = terms ? terms.toLowerCase() : '';
        return rows.filter(row => cols.some(col => (cellValue(col, row) + '').toLowerCase().indexOf(lowerTerms) !== -1));
      }

    }
  },
  watch: {
    filter: {
      handler() {
        this.$nextTick(() => {
          this.setPagination({
            page: 1
          }, true);
        });
      },

      deep: true
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-pagination.js








function table_pagination_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function table_pagination_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { table_pagination_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { table_pagination_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function samePagination(oldPag, newPag) {
  for (var prop in newPag) {
    if (newPag[prop] !== oldPag[prop]) {
      return false;
    }
  }

  return true;
}

function fixPagination(p) {
  if (p.page < 1) {
    p.page = 1;
  }

  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {
    p.rowsPerPage = 0;
  }

  return p;
}

/* harmony default export */ var table_pagination = ({
  props: {
    pagination: Object,
    rowsPerPageOptions: {
      type: Array,
      default: () => [3, 5, 7, 10, 15, 20, 25, 50, 0]
    }
  },
  computed: {
    computedPagination() {
      return fixPagination(table_pagination_objectSpread({}, this.innerPagination, {}, this.pagination));
    },

    firstRowIndex() {
      var _this$computedPaginat = this.computedPagination,
          page = _this$computedPaginat.page,
          rowsPerPage = _this$computedPaginat.rowsPerPage;
      return (page - 1) * rowsPerPage;
    },

    lastRowIndex() {
      var _this$computedPaginat2 = this.computedPagination,
          page = _this$computedPaginat2.page,
          rowsPerPage = _this$computedPaginat2.rowsPerPage;
      return page * rowsPerPage;
    },

    isFirstPage() {
      return this.computedPagination.page === 1;
    },

    pagesNumber() {
      return this.computedPagination.rowsPerPage === 0 ? 1 : Math.max(1, Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage));
    },

    isLastPage() {
      return this.lastRowIndex === 0 ? true : this.computedPagination.page >= this.pagesNumber;
    },

    computedRowsPerPageOptions() {
      return this.rowsPerPageOptions.map(count => ({
        label: count === 0 ? this.$q.lang.table.allRows : '' + count,
        value: count
      }));
    }

  },
  watch: {
    pagesNumber(lastPage, oldLastPage) {
      if (lastPage === oldLastPage) {
        return;
      }

      var currentPage = this.computedPagination.page;

      if (lastPage && !currentPage) {
        this.setPagination({
          page: 1
        });
      } else if (lastPage < currentPage) {
        this.setPagination({
          page: lastPage
        });
      }
    }

  },
  methods: {
    __sendServerRequest(pagination) {
      this.requestServerInteraction({
        pagination,
        filter: this.filter
      });
    },

    setPagination(val, forceServerRequest) {
      var newPagination = fixPagination(table_pagination_objectSpread({}, this.computedPagination, {}, val));

      if (samePagination(this.computedPagination, newPagination)) {
        if (this.isServerSide && forceServerRequest) {
          this.__sendServerRequest(newPagination);
        }

        return;
      }

      if (this.isServerSide) {
        this.__sendServerRequest(newPagination);

        return;
      }

      if (this.pagination) {
        this.$emit('update:pagination', newPagination);
      } else {
        this.innerPagination = newPagination;
      }
    },

    prevPage() {
      var page = this.computedPagination.page;

      if (page > 1) {
        this.setPagination({
          page: page - 1
        });
      }
    },

    nextPage() {
      var _this$computedPaginat3 = this.computedPagination,
          page = _this$computedPaginat3.page,
          rowsPerPage = _this$computedPaginat3.rowsPerPage;

      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {
        this.setPagination({
          page: page + 1
        });
      }
    }

  },

  created() {
    this.$emit('update:pagination', table_pagination_objectSpread({}, this.computedPagination));
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-row-selection.js









/* harmony default export */ var table_row_selection = ({
  props: {
    selection: {
      type: String,
      default: 'none',
      validator: v => ['single', 'multiple', 'none'].includes(v)
    },
    selected: {
      type: Array,
      default: () => []
    }
  },
  computed: {
    selectedKeys() {
      var keys = {};
      this.selected.map(this.getRowKey).forEach(key => {
        keys[key] = true;
      });
      return keys;
    },

    hasSelectionMode() {
      return this.selection !== 'none';
    },

    singleSelection() {
      return this.selection === 'single';
    },

    multipleSelection() {
      return this.selection === 'multiple';
    },

    allRowsSelected() {
      return this.computedRows.length > 0 && this.computedRows.every(row => this.selectedKeys[this.getRowKey(row)] === true);
    },

    someRowsSelected() {
      return this.allRowsSelected !== true && this.computedRows.some(row => this.selectedKeys[this.getRowKey(row)] === true);
    },

    rowsSelectedNumber() {
      return this.selected.length;
    }

  },
  methods: {
    isRowSelected(key) {
      return this.selectedKeys[key] === true;
    },

    clearSelection() {
      this.$emit('update:selected', []);
    },

    __updateSelection(keys, rows, added) {
      this.$emit('selection', {
        rows,
        added,
        keys
      });
      var payload = this.singleSelection === true ? added === true ? rows : [] : added === true ? this.selected.concat(rows) : this.selected.filter(row => keys.includes(this.getRowKey(row)) === false);
      this.$emit('update:selected', payload);
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-column-selection.js







/* harmony default export */ var table_column_selection = ({
  props: {
    visibleColumns: Array
  },
  computed: {
    computedCols() {
      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending;
      var cols = this.visibleColumns !== void 0 ? this.columns.filter(col => col.required === true || this.visibleColumns.includes(col.name) === true) : this.columns;
      return cols.map(col => {
        col.align = col.align || 'right';
        col.__iconClass = "q-table__sort-icon q-table__sort-icon--".concat(col.align);
        col.__thClass = "text-".concat(col.align).concat(col.headerClasses !== void 0 ? ' ' + col.headerClasses : '').concat(col.sortable === true ? ' sortable' : '').concat(col.name === sortBy ? " sorted ".concat(descending === true ? 'sort-desc' : '') : '');
        col.__tdClass = "text-".concat(col.align).concat(col.classes !== void 0 ? ' ' + col.classes : '');
        col.__thStyle = col.headerStyle !== void 0 ? col.headerStyle : null;
        col.__tdStyle = col.style !== void 0 ? col.style : null;
        return col;
      });
    },

    computedColsMap() {
      var names = {};
      this.computedCols.forEach(col => {
        names[col.name] = col;
      });
      return names;
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTable.js












function QTable_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QTable_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QTable_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QTable_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



















var commonVirtPropsObj = {};
commonVirtPropsList.forEach(p => {
  commonVirtPropsObj[p] = {};
});
/* harmony default export */ var QTable = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTable',
  mixins: [mixins_dark, fullscreen, table_top, table_header, table_body, table_bottom, table_grid, table_sort, table_filter, table_pagination, table_row_selection, table_column_selection],
  props: QTable_objectSpread({
    data: {
      type: Array,
      default: () => []
    },
    rowKey: {
      type: [String, Function],
      default: 'id'
    },
    columns: Array,
    loading: Boolean,
    binaryStateSort: Boolean,
    title: String,
    hideHeader: Boolean,
    hideBottom: Boolean,
    grid: Boolean,
    gridHeader: Boolean,
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    separator: {
      type: String,
      default: 'horizontal',
      validator: v => ['horizontal', 'vertical', 'cell', 'none'].includes(v)
    },
    wrapCells: Boolean,
    virtualScroll: Boolean
  }, commonVirtPropsObj, {
    noDataLabel: String,
    noResultsLabel: String,
    loadingLabel: String,
    selectedRowsLabel: Function,
    rowsPerPageLabel: String,
    paginationLabel: Function,
    color: {
      type: String,
      default: 'grey-8'
    },
    tableStyle: [String, Array, Object],
    tableClass: [String, Array, Object],
    tableHeaderStyle: [String, Array, Object],
    tableHeaderClass: [String, Array, Object],
    cardContainerClass: [String, Array, Object],
    cardContainerStyle: [String, Array, Object],
    cardStyle: [String, Array, Object],
    cardClass: [String, Array, Object]
  }),

  data() {
    return {
      rowsExpanded: {},
      innerPagination: {
        sortBy: null,
        descending: false,
        page: 1,
        rowsPerPage: 5
      }
    };
  },

  watch: {
    needsReset() {
      this.hasVirtScroll === true && this.$refs.virtScroll !== void 0 && this.$refs.virtScroll.reset();
    }

  },
  computed: {
    getRowKey() {
      return typeof this.rowKey === 'function' ? this.rowKey : row => row[this.rowKey];
    },

    hasVirtScroll() {
      return this.grid !== true && this.virtualScroll === true;
    },

    needsReset() {
      return ['tableStyle', 'tableClass', 'tableHeaderStyle', 'tableHeaderClass', 'containerClass'].map(p => this[p]).join(';');
    },

    computedData() {
      var rows = this.data;

      if (rows.length === 0) {
        return {
          rowsNumber: 0,
          rows
        };
      }

      if (this.isServerSide === true) {
        return {
          rows
        };
      }

      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending,
          rowsPerPage = _this$computedPaginat.rowsPerPage;

      if (this.filter) {
        rows = this.filterMethod(rows, this.filter, this.computedCols, this.getCellValue);
      }

      if (this.columnToSort !== void 0) {
        rows = this.sortMethod(this.data === rows ? rows.slice() : rows, sortBy, descending);
      }

      var rowsNumber = rows.length;

      if (rowsPerPage !== 0) {
        if (this.firstRowIndex === 0 && this.data !== rows) {
          if (rows.length > this.lastRowIndex) {
            rows.length = this.lastRowIndex;
          }
        } else {
          rows = rows.slice(this.firstRowIndex, this.lastRowIndex);
        }
      }

      return {
        rowsNumber,
        rows
      };
    },

    computedRows() {
      return this.computedData.rows;
    },

    computedRowsNumber() {
      return this.isServerSide === true ? this.computedPagination.rowsNumber || 0 : this.computedData.rowsNumber;
    },

    nothingToDisplay() {
      return this.computedRows.length === 0;
    },

    isServerSide() {
      return this.computedPagination.rowsNumber !== void 0;
    },

    cardDefaultClass() {
      return " q-table__card" + (this.isDark === true ? ' q-table__card--dark q-dark' : '') + (this.square === true ? " q-table--square" : '') + (this.flat === true ? " q-table--flat" : '') + (this.bordered === true ? " q-table--bordered" : '');
    },

    containerClass() {
      return "q-table__container q-table--".concat(this.separator, "-separator") + (this.loading === true ? ' q-table--loading' : '') + (this.grid === true ? ' q-table--grid' : this.cardDefaultClass) + (this.isDark === true ? " q-table--dark" : '') + (this.dense === true ? " q-table--dense" : '') + (this.wrapCells === false ? " q-table--no-wrap" : '') + (this.inFullscreen === true ? " fullscreen scroll" : '');
    },

    virtProps() {
      var props = {};
      commonVirtPropsList.forEach(p => {
        props[p] = this[p];
      });

      if (props.virtualScrollItemSize === void 0) {
        props.virtualScrollItemSize = this.dense === true ? 28 : 48;
      }

      return props;
    }

  },

  render(h) {
    var data = {
      staticClass: this.containerClass
    };

    if (this.grid === false) {
      data.class = this.cardClass;
      data.style = this.cardStyle;
    }

    return h('div', data, [this.getTop(h), this.grid === true ? this.getGridHeader(h) : null, this.getBody(h), this.getBottom(h)]);
  },

  methods: {
    requestServerInteraction() {
      var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.$nextTick(() => {
        this.$emit('request', {
          pagination: prop.pagination || this.computedPagination,
          filter: prop.filter || this.filter,
          getCellValue: this.getCellValue
        });
      });
    },

    resetVirtualScroll() {
      this.hasVirtScroll === true && this.$refs.virtScroll.reset();
    },

    getBody(h) {
      if (this.grid === true) {
        return this.getGridBody(h);
      }

      var header = this.hideHeader !== true ? this.getTableHeader(h) : null;
      return this.hasVirtScroll === true ? h(QVirtualScroll, {
        ref: 'virtScroll',
        props: QTable_objectSpread({}, this.virtProps, {
          items: this.computedRows,
          type: '__qtable'
        }),
        on: cache(this, 'vs', {
          'virtual-scroll': this.__onVScroll
        }),
        class: this.tableClass,
        style: this.tableStyle,
        scopedSlots: {
          before: header === null ? void 0 : () => header,
          default: this.getTableRowVirtual(h)
        }
      }) : get_table_middle(h, {
        staticClass: 'scroll',
        class: this.tableClass,
        style: this.tableStyle
      }, [header, this.getTableBody(h)]);
    },

    scrollTo(toIndex) {
      if (this.$refs.virtScroll !== void 0) {
        this.$refs.virtScroll.scrollTo(toIndex);
        return;
      }

      toIndex = parseInt(toIndex, 10);
      var rowEl = this.$el.querySelector("tbody tr:nth-of-type(".concat(toIndex + 1, ")"));

      if (rowEl !== null) {
        var scrollTarget = this.$el.querySelector('.q-table__middle.scroll');
        var offsetTop = rowEl.offsetTop;
        var direction = offsetTop < scrollTarget.scrollTop ? 'decrease' : 'increase';
        scrollTarget.scrollTop = offsetTop;
        this.$emit('virtual-scroll', {
          index: toIndex,
          from: 0,
          to: this.pagination.rowsPerPage - 1,
          direction
        });
      }
    },

    __onVScroll(info) {
      this.$emit('virtual-scroll', info);
    },

    __getProgress(h) {
      return [h(QLinearProgress, {
        staticClass: 'q-table__linear-progress',
        props: {
          color: this.color,
          dark: this.isDark,
          indeterminate: true,
          trackColor: 'transparent'
        }
      })];
    }

  }
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTr.js


/* harmony default export */ var QTr = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTr',
  props: {
    props: Object,
    noHover: Boolean
  },
  computed: {
    classes() {
      return 'q-tr' + (this.props === void 0 || this.props.header === true ? '' : ' ' + this.props.__trClass) + (this.noHover === true ? ' q-tr--no-hover' : '');
    }

  },

  render(h) {
    return h('tr', {
      on: this.$listeners,
      class: this.classes
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTd.js


/* harmony default export */ var QTd = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTd',
  props: {
    props: Object,
    autoWidth: Boolean,
    noHover: Boolean
  },
  computed: {
    classes() {
      return 'q-td' + (this.autoWidth === true ? ' q-table--col-auto-width' : '') + (this.noHover === true ? ' q-td--no-hover' : '');
    }

  },

  render(h) {
    var on = this.$listeners;

    if (this.props === void 0) {
      return h('td', {
        on,
        class: this.classes
      }, slot_slot(this, 'default'));
    }

    var name = this.$vnode.key;
    var col = this.props.colsMap !== void 0 && name ? this.props.colsMap[name] : this.props.col;

    if (col === void 0) {
      return;
    }

    return h('td', {
      on,
      style: col.__tdStyle,
      class: this.classes + ' ' + col.__tdClass
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/index.js





// CONCATENATED MODULE: ./node_modules/quasar/src/utils/router.js



var trailingSlashRE = /\/?$/;

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}

function isSameRoute(current, target) {
  if (!target) {
    return false;
  }

  if (current.path && target.path) {
    return current.path.replace(trailingSlashRE, '') === target.path.replace(trailingSlashRE, '') && current.hash === target.hash && isDeepEqual(current.query, target.query);
  }

  if (current.name && target.name) {
    return current.name === target.name && current.hash === target.hash && isDeepEqual(current.query, target.query) && isDeepEqual(current.params, target.params);
  }

  return false;
}
function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/QRouteTab.js







function QRouteTab_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QRouteTab_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QRouteTab_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QRouteTab_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/* harmony default export */ var QRouteTab = (vue_runtime_esm["a" /* default */].extend({
  name: 'QRouteTab',
  mixins: [QTab, RouterLinkMixin],
  props: {
    to: {
      required: true
    }
  },
  inject: {
    __activateRoute: {},
    __recalculateScroll: {}
  },
  watch: {
    $route() {
      this.__checkActivation();
    }

  },
  methods: {
    __activate(e, keyboard) {
      if (this.disable !== true) {
        this.__checkActivation(true);
      }

      if (keyboard === true) {
        this.$el.focus(e);
      } else {
        this.$refs.blurTarget !== void 0 && this.$refs.blurTarget.focus(e);
      }
    },

    __checkActivation() {
      var selected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var current = this.$route,
          _this$$router$resolve = this.$router.resolve(this.to, current, this.append),
          href = _this$$router$resolve.href,
          location = _this$$router$resolve.location,
          route = _this$$router$resolve.route,
          redirected = route.redirectedFrom !== void 0,
          checkFunction = this.exact === true ? isSameRoute : isIncludedRoute,
          params = {
        name: this.name,
        selected,
        exact: this.exact,
        priorityMatched: route.matched.length,
        priorityHref: href.length
      };

      checkFunction(current, route) && this.__activateRoute(QRouteTab_objectSpread({}, params, {
        redirected
      }));
      redirected === true && checkFunction(current, QRouteTab_objectSpread({
        path: route.redirectedFrom
      }, location)) && this.__activateRoute(params);
      this.isActive && this.__activateRoute();
    }

  },

  mounted() {
    this.__recalculateScroll();

    this.$router !== void 0 && this.__checkActivation();
  },

  beforeDestroy() {
    this.__recalculateScroll();

    this.__activateRoute({
      remove: true,
      name: this.name
    });
  },

  render(h) {
    return this.__renderTab(h, 'router-link', this.routerLinkProps);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/index.js




// CONCATENATED MODULE: ./node_modules/quasar/src/components/time/QTime.js













function QTime_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QTime_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QTime_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QTime_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










/* harmony default export */ var QTime = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTime',
  mixins: [datetime],
  directives: {
    TouchPan: TouchPan
  },
  props: {
    mask: {
      default: null
    },
    format24h: {
      type: Boolean,
      default: null
    },
    options: Function,
    hourOptions: Array,
    minuteOptions: Array,
    secondOptions: Array,
    withSeconds: Boolean,
    nowBtn: Boolean
  },

  data() {
    var model = __splitDate(this.value, this.__getComputedMask(), this.__getComputedLocale(), this.calendar);

    var view = 'Hour';

    if (model.hour !== null) {
      if (model.minute === null) {
        view = 'Minute';
      } else if (this.withSeconds === true && model.second === null) {
        view = 'Second';
      }
    }

    return {
      view,
      isAM: model.hour === null || model.hour < 12,
      innerModel: model
    };
  },

  watch: {
    value(v) {
      var model = __splitDate(v, this.computedMask, this.computedLocale, this.calendar);

      if (model.dateHash !== this.innerModel.dateHash || model.timeHash !== this.innerModel.timeHash) {
        this.innerModel = model;

        if (model.hour === null) {
          this.view = 'Hour';
        } else {
          this.isAM = model.hour < 12;
        }
      }
    }

  },
  computed: {
    classes() {
      return "q-time--".concat(this.landscape === true ? 'landscape' : 'portrait') + (this.isDark === true ? ' q-time--dark q-dark' : '') + (this.readonly === true && this.disable !== true ? ' q-time--readonly' : '') + (this.disable === true ? ' disable' : '') + (this.bordered === true ? " q-time--bordered" : '') + (this.square === true ? " q-time--square no-border-radius" : '') + (this.flat === true ? " q-time--flat no-shadow" : '');
    },

    computedMask() {
      return this.__getComputedMask();
    },

    stringModel() {
      var time = this.innerModel;
      return {
        hour: time.hour === null ? '--' : this.computedFormat24h === true ? pad(time.hour) : String(this.isAM === true ? time.hour === 0 ? 12 : time.hour : time.hour > 12 ? time.hour - 12 : time.hour),
        minute: time.minute === null ? '--' : pad(time.minute),
        second: time.second === null ? '--' : pad(time.second)
      };
    },

    computedFormat24h() {
      return this.format24h !== null ? this.format24h : this.$q.lang.date.format24h;
    },

    pointerStyle() {
      var forHour = this.view === 'Hour',
          divider = forHour === true ? 12 : 60,
          amount = this.innerModel[this.view.toLowerCase()],
          degrees = Math.round(amount * (360 / divider)) - 180;
      var transform = "rotate(".concat(degrees, "deg) translateX(-50%)");

      if (forHour === true && this.computedFormat24h === true && this.innerModel.hour >= 12) {
        transform += ' scale(.7)';
      }

      return {
        transform
      };
    },

    minLink() {
      return this.innerModel.hour !== null;
    },

    secLink() {
      return this.minLink === true && this.innerModel.minute !== null;
    },

    hourInSelection() {
      return this.hourOptions !== void 0 ? val => this.hourOptions.includes(val) : this.options !== void 0 ? val => this.options(val, null, null) : void 0;
    },

    minuteInSelection() {
      return this.minuteOptions !== void 0 ? val => this.minuteOptions.includes(val) : this.options !== void 0 ? val => this.options(this.innerModel.hour, val, null) : void 0;
    },

    secondInSelection() {
      return this.secondOptions !== void 0 ? val => this.secondOptions.includes(val) : this.options !== void 0 ? val => this.options(this.innerModel.hour, this.innerModel.minute, val) : void 0;
    },

    positions() {
      var start,
          end,
          offset = 0,
          step = 1,
          inSel;

      if (this.view === 'Hour') {
        inSel = this.hourInSelection;

        if (this.computedFormat24h === true) {
          start = 0;
          end = 23;
        } else {
          start = 0;
          end = 11;

          if (this.isAM === false) {
            offset = 12;
          }
        }
      } else {
        start = 0;
        end = 55;
        step = 5;

        if (this.view === 'Minute') {
          inSel = this.minuteInSelection;
        } else {
          inSel = this.secondInSelection;
        }
      }

      var pos = [];

      for (var val = start, index = start; val <= end; val += step, index++) {
        var actualVal = val + offset,
            disable = inSel !== void 0 && inSel(actualVal) === false,
            label = this.view === 'Hour' && val === 0 ? this.format24h === true ? '00' : '12' : val;
        pos.push({
          val: actualVal,
          index,
          disable,
          label
        });
      }

      return pos;
    }

  },
  methods: {
    setNow() {
      this.__updateValue(QTime_objectSpread({}, this.__getCurrentDate(), {}, this.__getCurrentTime()));

      this.view = 'Hour';
    },

    __click(evt) {
      // __activate() has already updated the offset
      // we only need to change the view now, so:
      if (this.$q.platform.is.desktop !== true) {
        this.__drag({
          isFirst: true,
          evt
        });
      }

      this.__drag({
        isFinal: true,
        evt
      });
    },

    __activate(evt) {
      this.__drag({
        isFirst: true,
        evt
      }, true);

      this.__drag({
        isFinal: true,
        evt
      }, true);
    },

    __drag(event, noViewChange) {
      // cases when on a popup getting closed
      // on previously emitted value
      if (this._isBeingDestroyed === true || this._isDestroyed === true) {
        return;
      }

      if (event.isFirst) {
        var clock = this.$refs.clock,
            _clock$getBoundingCli = clock.getBoundingClientRect(),
            top = _clock$getBoundingCli.top,
            left = _clock$getBoundingCli.left,
            width = _clock$getBoundingCli.width,
            dist = width / 2;

        this.dragging = {
          top: top + dist,
          left: left + dist,
          dist: dist * 0.7
        };
        this.dragCache = null;

        this.__updateClock(event.evt);

        return;
      }

      this.__updateClock(event.evt);

      if (event.isFinal && noViewChange !== true) {
        this.dragging = false;

        if (this.view === 'Hour') {
          this.view = 'Minute';
        } else if (this.withSeconds && this.view === 'Minute') {
          this.view = 'Second';
        }
      }
    },

    __updateClock(evt) {
      var val,
          pos = event_position(evt),
          height = Math.abs(pos.top - this.dragging.top),
          distance = Math.sqrt(Math.pow(Math.abs(pos.top - this.dragging.top), 2) + Math.pow(Math.abs(pos.left - this.dragging.left), 2)),
          angle = Math.asin(height / distance) * (180 / Math.PI);

      if (pos.top < this.dragging.top) {
        angle = this.dragging.left < pos.left ? 90 - angle : 270 + angle;
      } else {
        angle = this.dragging.left < pos.left ? angle + 90 : 270 - angle;
      }

      if (this.view === 'Hour') {
        val = Math.round(angle / 30);

        if (this.computedFormat24h === true) {
          if (distance < this.dragging.dist) {
            if (val < 12) {
              val += 12;
            }
          } else if (val === 12) {
            val = 0;
          }

          this.isAM = val < 12;
        } else if (this.isAM === true && val === 12) {
          val = 0;
        } else if (this.isAM === false && val !== 12) {
          val += 12;
        }
      } else {
        val = Math.round(angle / 6);

        if (val === 60) {
          val = 0;
        }
      }

      if (this.dragCache === val) {
        return;
      }

      var opt = this["".concat(this.view.toLowerCase(), "InSelection")];

      if (opt !== void 0 && opt(val) !== true) {
        return;
      }

      this.dragCache = val;
      this["__set".concat(this.view)](val);
    },

    __onKeyupHour(e) {
      if (e.keyCode === 13) {
        // ENTER
        this.view = 'Hour';
      } else {
        var wrap = this.computedFormat24h === true ? 24 : 12,
            offset = this.computedFormat24h !== true && this.isAM === false ? 12 : 0;

        if (e.keyCode === 37) {
          // ARROW LEFT
          this.__setHour(offset + (24 + this.innerModel.hour - 1) % wrap);
        } else if (e.keyCode === 39) {
          // ARROW RIGHT
          this.__setHour(offset + (24 + this.innerModel.hour + 1) % wrap);
        }
      }
    },

    __onKeyupMinute(e) {
      if (e.keyCode === 13) {
        // ENTER
        this.view = 'Minute';
      } else if (e.keyCode === 37) {
        // ARROW LEFT
        this.__setMinute((60 + this.innerModel.minute - 1) % 60);
      } else if (e.keyCode === 39) {
        // ARROW RIGHT
        this.__setMinute((60 + this.innerModel.minute + 1) % 60);
      }
    },

    __onKeyupSecond(e) {
      if (e.keyCode === 13) {
        // ENTER
        this.view = 'Second';
      } else if (e.keyCode === 37) {
        // ARROW LEFT
        this.__setSecond((60 + this.innerModel.second - 1) % 60);
      } else if (e.keyCode === 39) {
        // ARROW RIGHT
        this.__setSecond((60 + this.innerModel.second + 1) % 60);
      }
    },

    __getHeader(h) {
      var label = [h('div', {
        staticClass: 'q-time__link',
        class: this.view === 'Hour' ? 'q-time__link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'vH', {
          click: () => {
            this.view = 'Hour';
          },
          keyup: this.__onKeyupHour
        })
      }, [this.stringModel.hour]), h('div', [':']), h('div', this.minLink === true ? {
        staticClass: 'q-time__link',
        class: this.view === 'Minute' ? 'q-time__link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'vM', {
          click: () => {
            this.view = 'Minute';
          },
          keyup: this.__onKeyupMinute
        })
      } : {
        staticClass: 'q-time__link'
      }, [this.stringModel.minute])];

      if (this.withSeconds === true) {
        label.push(h('div', [':']), h('div', this.secLink === true ? {
          staticClass: 'q-time__link',
          class: this.view === 'Second' ? 'q-time__link--active' : 'cursor-pointer',
          attrs: {
            tabindex: this.computedTabindex
          },
          on: cache(this, 'vS', {
            click: () => {
              this.view = 'Second';
            },
            keyup: this.__onKeyupSecond
          })
        } : {
          staticClass: 'q-time__link'
        }, [this.stringModel.second]));
      }

      return h('div', {
        staticClass: 'q-time__header flex flex-center no-wrap',
        class: this.headerClass
      }, [h('div', {
        staticClass: 'q-time__header-label row items-center no-wrap',
        attrs: {
          dir: 'ltr'
        }
      }, label), this.computedFormat24h === false ? h('div', {
        staticClass: 'q-time__header-ampm column items-between no-wrap'
      }, [h('div', {
        staticClass: 'q-time__link',
        class: this.isAM === true ? 'q-time__link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'AM', {
          click: this.__setAm,
          keyup: e => {
            e.keyCode === 13 && this.__setAm();
          }
        })
      }, ['AM']), h('div', {
        staticClass: 'q-time__link',
        class: this.isAM !== true ? 'q-time__link--active' : 'cursor-pointer',
        attrs: {
          tabindex: this.computedTabindex
        },
        on: cache(this, 'PM', {
          click: this.__setPm,
          keyup: e => {
            e.keyCode === 13 && this.__setPm();
          }
        })
      }, ['PM'])]) : null]);
    },

    __getClock(h) {
      var view = this.view.toLowerCase(),
          current = this.innerModel[view];
      return h('div', {
        staticClass: 'q-time__content col relative-position'
      }, [h('transition', {
        props: {
          name: 'q-transition--scale'
        }
      }, [h('div', {
        key: 'clock' + this.view,
        staticClass: 'q-time__container-parent absolute-full'
      }, [h('div', {
        ref: 'clock',
        staticClass: 'q-time__container-child fit overflow-hidden'
      }, [h('div', {
        staticClass: 'q-time__clock cursor-pointer non-selectable',
        on: cache(this, 'click', {
          click: this.__click,
          mousedown: this.__activate
        }),
        directives: cache(this, 'touch', [{
          name: 'touch-pan',
          value: this.__drag,
          modifiers: {
            stop: true,
            prevent: true,
            mouse: true
          }
        }])
      }, [h('div', {
        staticClass: 'q-time__clock-circle fit'
      }, [this.innerModel[view] !== null ? h('div', {
        staticClass: 'q-time__clock-pointer',
        style: this.pointerStyle,
        class: this.color !== void 0 ? "text-".concat(this.color) : null
      }) : null, this.positions.map(pos => h('div', {
        staticClass: "q-time__clock-position row flex-center q-time__clock-pos-".concat(pos.index),
        class: pos.val === current ? this.headerClass.concat(' q-time__clock-position--active') : pos.disable === true ? 'q-time__clock-position--disable' : null
      }, [h('span', [pos.label])]))])])])])]), this.nowBtn === true ? h(QBtn, {
        staticClass: 'q-time__now-button absolute',
        props: {
          icon: this.$q.iconSet.datetime.now,
          unelevated: true,
          size: 'sm',
          round: true,
          color: this.color,
          textColor: this.textColor,
          tabindex: this.computedTabindex
        },
        on: cache(this, 'now', {
          click: this.setNow
        })
      }) : null]);
    },

    __setHour(hour) {
      if (this.innerModel.hour !== hour) {
        this.innerModel.hour = hour;
        this.innerModel.minute = null;
        this.innerModel.second = null;
      }
    },

    __setMinute(minute) {
      if (this.innerModel.minute !== minute) {
        this.innerModel.minute = minute;
        this.innerModel.second = null;
        this.withSeconds !== true && this.__updateValue({
          minute
        });
      }
    },

    __setSecond(second) {
      this.innerModel.second !== second && this.__updateValue({
        second
      });
    },

    __setAm() {
      if (this.isAM) {
        return;
      }

      this.isAM = true;

      if (this.innerModel.hour === null) {
        return;
      }

      this.innerModel.hour -= 12;

      this.__verifyAndUpdate();
    },

    __setPm() {
      if (!this.isAM) {
        return;
      }

      this.isAM = false;

      if (this.innerModel.hour === null) {
        return;
      }

      this.innerModel.hour += 12;

      this.__verifyAndUpdate();
    },

    __verifyAndUpdate() {
      if (this.hourInSelection !== void 0 && this.hourInSelection(this.innerModel.hour) !== true) {
        this.innerModel = __splitDate();
        this.isAM = true;
        this.view = 'Hour';
        return;
      }

      if (this.minuteInSelection !== void 0 && this.minuteInSelection(this.innerModel.minute) !== true) {
        this.innerModel.minute = null;
        this.innerModel.second = null;
        this.view = 'Minute';
        return;
      }

      if (this.withSeconds === true && this.secondInSelection !== void 0 && this.secondInSelection(this.innerModel.second) !== true) {
        this.innerModel.second = null;
        this.view = 'Second';
        return;
      }

      if (this.innerModel.hour === null || this.innerModel.minute === null || this.withSeconds === true && this.innerModel.second === null) {
        return;
      }

      this.__updateValue({});
    },

    __getComputedMask() {
      return this.calendar !== 'persian' && this.mask !== null ? this.mask : "HH:mm".concat(this.withSeconds === true ? ':ss' : '');
    },

    __updateValue(obj) {
      var date = QTime_objectSpread({}, this.innerModel, {}, obj);

      var val = this.calendar === 'persian' ? pad(date.hour) + ':' + pad(date.minute) + (this.withSeconds === true ? ':' + pad(date.second) : '') : formatDate(new Date(date.year, date.month === null ? null : date.month - 1, date.day, date.hour, date.minute, date.second, date.millisecond), this.computedMask, this.computedLocale, date.year);
      date.changed = val !== this.value;
      this.$emit('input', val, date);
    }

  },

  render(h) {
    var child = [this.__getClock(h)];
    var def = slot_slot(this, 'default');
    def !== void 0 && child.push(h('div', {
      staticClass: 'q-time__actions'
    }, def));
    return h('div', {
      staticClass: 'q-time',
      class: this.classes,
      on: this.$listeners,
      attrs: {
        tabindex: -1
      }
    }, [this.__getHeader(h), h('div', {
      staticClass: 'q-time__main col overflow-auto'
    }, child)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/time/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/timeline/QTimeline.js





/* harmony default export */ var QTimeline = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTimeline',
  mixins: [mixins_dark],

  provide() {
    return {
      __timeline: this
    };
  },

  props: {
    color: {
      type: String,
      default: 'primary'
    },
    side: {
      type: String,
      default: 'right',
      validator: v => ['left', 'right'].includes(v)
    },
    layout: {
      type: String,
      default: 'dense',
      validator: v => ['dense', 'comfortable', 'loose'].includes(v)
    }
  },
  computed: {
    classes() {
      return "q-timeline--".concat(this.layout, " q-timeline--").concat(this.layout, "--").concat(this.side) + (this.isDark === true ? ' q-timeline--dark' : '');
    }

  },

  render(h) {
    return h('ul', {
      staticClass: 'q-timeline',
      class: this.classes,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/timeline/QTimelineEntry.js






/* harmony default export */ var QTimelineEntry = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTimelineEntry',
  inject: {
    __timeline: {
      default() {
        console.error('QTimelineEntry needs to be child of QTimeline');
      }

    }
  },
  props: {
    heading: Boolean,
    tag: {
      type: String,
      default: 'h3'
    },
    side: {
      type: String,
      default: 'right',
      validator: v => ['left', 'right'].includes(v)
    },
    icon: String,
    avatar: String,
    color: String,
    title: String,
    subtitle: String,
    body: String
  },
  computed: {
    colorClass() {
      return "text-".concat(this.color || this.__timeline.color);
    },

    classes() {
      return "q-timeline__entry--".concat(this.side) + (this.icon !== void 0 || this.avatar !== void 0 ? ' q-timeline__entry--icon' : '');
    },

    reverse() {
      return this.__timeline.layout === 'comfortable' && this.__timeline.side === 'left';
    }

  },

  render(h) {
    var child = uniqueSlot(this, 'default', []);

    if (this.body !== void 0) {
      child.unshift(this.body);
    }

    if (this.heading === true) {
      var _content = [h('div'), h('div'), h(this.tag, {
        staticClass: 'q-timeline__heading-title'
      }, child)];
      return h('div', {
        staticClass: 'q-timeline__heading',
        on: this.$listeners
      }, this.reverse === true ? _content.reverse() : _content);
    }

    var dot;

    if (this.icon !== void 0) {
      dot = [h(QIcon, {
        staticClass: 'row items-center justify-center',
        props: {
          name: this.icon
        }
      })];
    } else if (this.avatar !== void 0) {
      dot = [h('img', {
        staticClass: 'q-timeline__dot-img',
        domProps: {
          src: this.avatar
        }
      })];
    }

    var content = [h('div', {
      staticClass: 'q-timeline__subtitle'
    }, [h('span', slot_slot(this, 'subtitle', [this.subtitle]))]), h('div', {
      staticClass: 'q-timeline__dot',
      class: this.colorClass
    }, dot), h('div', {
      staticClass: 'q-timeline__content'
    }, [h('h6', {
      staticClass: 'q-timeline__title'
    }, slot_slot(this, 'title', [this.title]))].concat(child))];
    return h('li', {
      staticClass: 'q-timeline__entry',
      class: this.classes,
      on: this.$listeners
    }, this.reverse === true ? content.reverse() : content);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/timeline/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/toggle/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/toolbar/QToolbar.js


/* harmony default export */ var QToolbar = (vue_runtime_esm["a" /* default */].extend({
  name: 'QToolbar',
  props: {
    inset: Boolean
  },

  render(h) {
    return h('div', {
      staticClass: 'q-toolbar row no-wrap items-center',
      class: this.inset ? 'q-toolbar--inset' : null,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/toolbar/QToolbarTitle.js


/* harmony default export */ var QToolbarTitle = (vue_runtime_esm["a" /* default */].extend({
  name: 'QToolbarTitle',
  props: {
    shrink: Boolean
  },

  render(h) {
    return h('div', {
      staticClass: 'q-toolbar__title ellipsis',
      class: this.shrink === true ? 'col-shrink' : null,
      on: this.$listeners
    }, slot_slot(this, 'default'));
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/toolbar/index.js



// CONCATENATED MODULE: ./node_modules/quasar/src/components/tooltip/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/tree/QTree.js





















/* harmony default export */ var QTree = (vue_runtime_esm["a" /* default */].extend({
  name: 'QTree',
  mixins: [mixins_dark],
  props: {
    nodes: {
      type: Array,
      required: true
    },
    nodeKey: {
      type: String,
      required: true
    },
    labelKey: {
      type: String,
      default: 'label'
    },
    color: String,
    controlColor: String,
    textColor: String,
    selectedColor: String,
    icon: String,
    tickStrategy: {
      type: String,
      default: 'none',
      validator: v => ['none', 'strict', 'leaf', 'leaf-filtered'].includes(v)
    },
    ticked: Array,
    // sync
    expanded: Array,
    // sync
    selected: {},
    // sync
    defaultExpandAll: Boolean,
    accordion: Boolean,
    filter: String,
    filterMethod: {
      type: Function,

      default(node, filter) {
        var filt = filter.toLowerCase();
        return node[this.labelKey] && node[this.labelKey].toLowerCase().indexOf(filt) > -1;
      }

    },
    duration: Number,
    noConnectors: Boolean,
    noNodesLabel: String,
    noResultsLabel: String
  },
  computed: {
    classes() {
      return "q-tree" + (this.noConnectors === true ? " q-tree--no-connectors" : '') + (this.isDark === true ? " q-tree--dark" : '') + (this.color !== void 0 ? " text-".concat(this.color) : '');
    },

    hasSelection() {
      return this.selected !== void 0;
    },

    computedIcon() {
      return this.icon || this.$q.iconSet.tree.icon;
    },

    computedControlColor() {
      return this.controlColor || this.color;
    },

    textColorClass() {
      if (this.textColor !== void 0) {
        return "text-".concat(this.textColor);
      }
    },

    selectedColorClass() {
      var color = this.selectedColor || this.color;

      if (color) {
        return "text-".concat(color);
      }
    },

    meta() {
      var meta = {};

      var travel = (node, parent) => {
        var tickStrategy = node.tickStrategy || (parent ? parent.tickStrategy : this.tickStrategy);
        var key = node[this.nodeKey],
            isParent = node.children && node.children.length > 0,
            isLeaf = isParent !== true,
            selectable = node.disabled !== true && this.hasSelection === true && node.selectable !== false,
            expandable = node.disabled !== true && node.expandable !== false,
            hasTicking = tickStrategy !== 'none',
            strictTicking = tickStrategy === 'strict',
            leafFilteredTicking = tickStrategy === 'leaf-filtered',
            leafTicking = tickStrategy === 'leaf' || tickStrategy === 'leaf-filtered';
        var tickable = node.disabled !== true && node.tickable !== false;

        if (leafTicking === true && tickable === true && parent && parent.tickable !== true) {
          tickable = false;
        }

        var lazy = node.lazy;

        if (lazy && this.lazy[key]) {
          lazy = this.lazy[key];
        }

        var m = {
          key,
          parent,
          isParent,
          isLeaf,
          lazy,
          disabled: node.disabled,
          link: node.disabled !== true && (selectable === true || expandable === true && (isParent === true || lazy === true)),
          children: [],
          matchesFilter: this.filter ? this.filterMethod(node, this.filter) : true,
          selected: key === this.selected && selectable === true,
          selectable,
          expanded: isParent === true ? this.innerExpanded.includes(key) : false,
          expandable,
          noTick: node.noTick === true || strictTicking !== true && lazy && lazy !== 'loaded',
          tickable,
          tickStrategy,
          hasTicking,
          strictTicking,
          leafFilteredTicking,
          leafTicking,
          ticked: strictTicking === true ? this.innerTicked.includes(key) : isLeaf === true ? this.innerTicked.includes(key) : false
        };
        meta[key] = m;

        if (isParent === true) {
          m.children = node.children.map(n => travel(n, m));

          if (this.filter) {
            if (m.matchesFilter !== true) {
              m.matchesFilter = m.children.some(n => n.matchesFilter);
            } else if (m.noTick !== true && m.disabled !== true && m.tickable === true && leafFilteredTicking === true && m.children.every(n => n.matchesFilter !== true || n.noTick === true || n.tickable !== true) === true) {
              m.tickable = false;
            }
          }

          if (m.matchesFilter === true) {
            if (m.noTick !== true && strictTicking !== true && m.children.every(n => n.noTick) === true) {
              m.noTick = true;
            }

            if (leafTicking) {
              m.ticked = false;
              m.indeterminate = m.children.some(node => node.indeterminate === true);
              m.tickable = m.tickable === true && m.children.some(node => node.tickable);

              if (m.indeterminate !== true) {
                var sel = m.children.reduce((acc, meta) => meta.ticked === true ? acc + 1 : acc, 0);

                if (sel === m.children.length) {
                  m.ticked = true;
                } else if (sel > 0) {
                  m.indeterminate = true;
                }
              }

              if (m.indeterminate === true) {
                m.indeterminateNextState = m.children.every(meta => meta.tickable !== true || meta.ticked !== true);
              }
            }
          }
        }

        return m;
      };

      this.nodes.forEach(node => travel(node, null));
      return meta;
    }

  },

  data() {
    return {
      lazy: {},
      innerTicked: this.ticked || [],
      innerExpanded: this.expanded || []
    };
  },

  watch: {
    ticked(val) {
      this.innerTicked = val;
    },

    expanded(val) {
      this.innerExpanded = val;
    }

  },
  methods: {
    getNodeByKey(key) {
      var reduce = [].reduce;

      var find = (result, node) => {
        if (result || !node) {
          return result;
        }

        if (Array.isArray(node) === true) {
          return reduce.call(Object(node), find, result);
        }

        if (node[this.nodeKey] === key) {
          return node;
        }

        if (node.children) {
          return find(null, node.children);
        }
      };

      return find(null, this.nodes);
    },

    getTickedNodes() {
      return this.innerTicked.map(key => this.getNodeByKey(key));
    },

    getExpandedNodes() {
      return this.innerExpanded.map(key => this.getNodeByKey(key));
    },

    isExpanded(key) {
      return key && this.meta[key] ? this.meta[key].expanded : false;
    },

    collapseAll() {
      if (this.expanded !== void 0) {
        this.$emit('update:expanded', []);
      } else {
        this.innerExpanded = [];
      }
    },

    expandAll() {
      var expanded = this.innerExpanded,
          travel = node => {
        if (node.children && node.children.length > 0) {
          if (node.expandable !== false && node.disabled !== true) {
            expanded.push(node[this.nodeKey]);
            node.children.forEach(travel);
          }
        }
      };

      this.nodes.forEach(travel);

      if (this.expanded !== void 0) {
        this.$emit('update:expanded', expanded);
      } else {
        this.innerExpanded = expanded;
      }
    },

    setExpanded(key, state) {
      var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getNodeByKey(key);
      var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.meta[key];

      if (meta.lazy && meta.lazy !== 'loaded') {
        if (meta.lazy === 'loading') {
          return;
        }

        this.$set(this.lazy, key, 'loading');
        this.$emit('lazy-load', {
          node,
          key,
          done: children => {
            this.lazy[key] = 'loaded';

            if (children) {
              this.$set(node, 'children', children);
            }

            this.$nextTick(() => {
              var m = this.meta[key];

              if (m && m.isParent === true) {
                this.__setExpanded(key, true);
              }
            });
          },
          fail: () => {
            this.$delete(this.lazy, key);
          }
        });
      } else if (meta.isParent === true && meta.expandable === true) {
        this.__setExpanded(key, state);
      }
    },

    __setExpanded(key, state) {
      var target = this.innerExpanded;
      var emit = this.expanded !== void 0;

      if (emit === true) {
        target = target.slice();
      }

      if (state) {
        if (this.accordion) {
          if (this.meta[key]) {
            var collapse = [];

            if (this.meta[key].parent) {
              this.meta[key].parent.children.forEach(m => {
                if (m.key !== key && m.expandable === true) {
                  collapse.push(m.key);
                }
              });
            } else {
              this.nodes.forEach(node => {
                var k = node[this.nodeKey];

                if (k !== key) {
                  collapse.push(k);
                }
              });
            }

            if (collapse.length > 0) {
              target = target.filter(k => collapse.includes(k) === false);
            }
          }
        }

        target = target.concat([key]).filter((key, index, self) => self.indexOf(key) === index);
      } else {
        target = target.filter(k => k !== key);
      }

      if (emit === true) {
        this.$emit("update:expanded", target);
      } else {
        this.innerExpanded = target;
      }
    },

    isTicked(key) {
      return key && this.meta[key] ? this.meta[key].ticked : false;
    },

    setTicked(keys, state) {
      var target = this.innerTicked;
      var emit = this.ticked !== void 0;

      if (emit === true) {
        target = target.slice();
      }

      if (state) {
        target = target.concat(keys).filter((key, index, self) => self.indexOf(key) === index);
      } else {
        target = target.filter(k => keys.includes(k) === false);
      }

      if (emit === true) {
        this.$emit("update:ticked", target);
      }
    },

    __getSlotScope(node, meta, key) {
      var scope = {
        tree: this,
        node,
        key,
        color: this.color,
        dark: this.isDark
      };
      Object.defineProperty(scope, 'expanded', {
        get: () => {
          return meta.expanded;
        },
        set: val => {
          val !== meta.expanded && this.setExpanded(key, val);
        },
        configurable: true,
        enumerable: true
      });
      Object.defineProperty(scope, 'ticked', {
        get: () => {
          return meta.ticked;
        },
        set: val => {
          val !== meta.ticked && this.setTicked([key], val);
        },
        configurable: true,
        enumerable: true
      });
      return scope;
    },

    __getChildren(h, nodes) {
      return (this.filter ? nodes.filter(n => this.meta[n[this.nodeKey]].matchesFilter) : nodes).map(child => this.__getNode(h, child));
    },

    __getNodeMedia(h, node) {
      if (node.icon !== void 0) {
        return h(QIcon, {
          staticClass: "q-tree__icon q-mr-sm",
          props: {
            name: node.icon,
            color: node.iconColor
          }
        });
      }

      var src = node.img || node.avatar;

      if (src) {
        return h('img', {
          staticClass: "q-tree__".concat(node.img ? 'img' : 'avatar', " q-mr-sm"),
          attrs: {
            src
          }
        });
      }
    },

    __getNode(h, node) {
      var key = node[this.nodeKey],
          meta = this.meta[key],
          header = node.header ? this.$scopedSlots["header-".concat(node.header)] || this.$scopedSlots['default-header'] : this.$scopedSlots['default-header'];
      var children = meta.isParent === true ? this.__getChildren(h, node.children) : [];
      var isParent = children.length > 0 || meta.lazy && meta.lazy !== 'loaded';
      var body = node.body ? this.$scopedSlots["body-".concat(node.body)] || this.$scopedSlots['default-body'] : this.$scopedSlots['default-body'],
          slotScope = header !== void 0 || body !== void 0 ? this.__getSlotScope(node, meta, key) : null;

      if (body !== void 0) {
        body = h('div', {
          staticClass: 'q-tree__node-body relative-position'
        }, [h('div', {
          class: this.textColorClass
        }, [body(slotScope)])]);
      }

      return h('div', {
        key,
        staticClass: 'q-tree__node relative-position',
        class: {
          'q-tree__node--parent': isParent,
          'q-tree__node--child': !isParent
        }
      }, [h('div', {
        staticClass: 'q-tree__node-header relative-position row no-wrap items-center',
        class: {
          'q-tree__node--link q-hoverable q-focusable': meta.link,
          'q-tree__node--selected': meta.selected,
          'q-tree__node--disabled': meta.disabled
        },
        attrs: {
          tabindex: meta.link ? 0 : -1
        },
        on: {
          click: e => {
            this.__onClick(node, meta, e);
          },
          keypress: e => {
            if (shouldIgnoreKey(e) !== true) {
              if (e.keyCode === 13) {
                this.__onClick(node, meta, e, true);
              } else if (e.keyCode === 32) {
                this.__onExpandClick(node, meta, e, true);
              }
            }
          }
        }
      }, [h('div', {
        staticClass: 'q-focus-helper',
        attrs: {
          tabindex: -1
        },
        ref: "blurTarget_".concat(meta.key)
      }), meta.lazy === 'loading' ? h(QSpinner, {
        staticClass: 'q-tree__spinner q-mr-xs',
        props: {
          color: this.computedControlColor
        }
      }) : isParent === true ? h(QIcon, {
        staticClass: 'q-tree__arrow q-mr-xs',
        class: {
          'q-tree__arrow--rotate': meta.expanded
        },
        props: {
          name: this.computedIcon
        },
        nativeOn: {
          click: e => {
            this.__onExpandClick(node, meta, e);
          }
        }
      }) : null, meta.hasTicking === true && meta.noTick !== true ? h(QCheckbox, {
        staticClass: 'q-mr-xs',
        props: {
          value: meta.indeterminate === true ? null : meta.ticked,
          color: this.computedControlColor,
          dark: this.isDark,
          dense: true,
          keepColor: true,
          disable: meta.tickable !== true
        },
        on: {
          keydown: stopAndPrevent,
          input: v => {
            this.__onTickedClick(meta, v);
          }
        }
      }) : null, h('div', {
        'staticClass': 'q-tree__node-header-content col row no-wrap items-center',
        class: meta.selected ? this.selectedColorClass : this.textColorClass
      }, [header ? header(slotScope) : [this.__getNodeMedia(h, node), h('div', node[this.labelKey])]])]), isParent === true ? h(QSlideTransition, {
        props: {
          duration: this.duration
        }
      }, [h('div', {
        staticClass: 'q-tree__node-collapsible',
        class: this.textColorClass,
        directives: [{
          name: 'show',
          value: meta.expanded
        }]
      }, [body, h('div', {
        staticClass: 'q-tree__children',
        class: {
          'q-tree__node--disabled': meta.disabled
        }
      }, children)])]) : body]);
    },

    __blur(key) {
      var blurTarget = this.$refs["blurTarget_".concat(key)];
      blurTarget !== void 0 && blurTarget.focus();
    },

    __onClick(node, meta, e, keyboard) {
      keyboard !== true && this.__blur(meta.key);

      if (this.hasSelection) {
        if (meta.selectable) {
          this.$emit('update:selected', meta.key !== this.selected ? meta.key : null);
        }
      } else {
        this.__onExpandClick(node, meta, e, keyboard);
      }

      if (typeof node.handler === 'function') {
        node.handler(node);
      }
    },

    __onExpandClick(node, meta, e, keyboard) {
      if (e !== void 0) {
        stopAndPrevent(e);
      }

      keyboard !== true && this.__blur(meta.key);
      this.setExpanded(meta.key, !meta.expanded, node, meta);
    },

    __onTickedClick(meta, state) {
      if (meta.indeterminate === true) {
        state = meta.indeterminateNextState;
      }

      if (meta.strictTicking) {
        this.setTicked([meta.key], state);
      } else if (meta.leafTicking) {
        var keys = [];

        var travel = meta => {
          if (meta.isParent) {
            if (state !== true && meta.noTick !== true && meta.tickable === true) {
              keys.push(meta.key);
            }

            if (meta.leafTicking === true) {
              meta.children.forEach(travel);
            }
          } else if (meta.noTick !== true && meta.tickable === true && (meta.leafFilteredTicking !== true || meta.matchesFilter === true)) {
            keys.push(meta.key);
          }
        };

        travel(meta);
        this.setTicked(keys, state);
      }
    }

  },

  render(h) {
    var children = this.__getChildren(h, this.nodes);

    return h('div', {
      class: this.classes
    }, children.length === 0 ? this.filter ? this.noResultsLabel || this.$q.lang.tree.noResults : this.noNodesLabel || this.$q.lang.tree.noNodes : children);
  },

  created() {
    this.defaultExpandAll === true && this.expandAll();
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/tree/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/uploader/QUploaderBase.js























function QUploaderBase_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function QUploaderBase_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { QUploaderBase_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { QUploaderBase_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









/* harmony default export */ var QUploaderBase = ({
  mixins: [mixins_dark],
  props: {
    label: String,
    color: String,
    textColor: String,
    square: Boolean,
    flat: Boolean,
    bordered: Boolean,
    multiple: Boolean,
    accept: String,
    maxFileSize: Number,
    maxTotalSize: Number,
    filter: Function,
    noThumbnails: Boolean,
    autoUpload: Boolean,
    hideUploadBtn: Boolean,
    disable: Boolean,
    readonly: Boolean
  },

  provide() {
    return {
      __qUploaderGetInput: this.__getInputControl
    };
  },

  data() {
    return {
      files: [],
      queuedFiles: [],
      uploadedFiles: [],
      dnd: false,
      expanded: false,
      uploadSize: 0,
      uploadedSize: 0
    };
  },

  watch: {
    isUploading(newVal, oldVal) {
      if (oldVal === false && newVal === true) {
        this.$emit('start');
      } else if (oldVal === true && newVal === false) {
        this.$emit('finish');
      }
    }

  },
  computed: {
    /*
     * When extending:
     *   Required : isUploading
     *   Optional: isBusy
     */
    canUpload() {
      return this.editable === true && this.isBusy !== true && this.isUploading !== true && this.queuedFiles.length > 0;
    },

    canAddFiles() {
      return this.editable && this.isUploading !== true && (this.multiple === true || this.queuedFiles.length === 0);
    },

    extensions() {
      if (this.accept !== void 0) {
        return this.accept.split(',').map(ext => {
          ext = ext.trim(); // support "image/*"

          if (ext.endsWith('/*')) {
            ext = ext.slice(0, ext.length - 1);
          }

          return ext;
        });
      }
    },

    uploadProgress() {
      return this.uploadSize === 0 ? 0 : this.uploadedSize / this.uploadSize;
    },

    uploadProgressLabel() {
      return this.__getProgressLabel(this.uploadProgress);
    },

    uploadedSizeLabel() {
      return humanStorageSize(this.uploadedSize);
    },

    uploadSizeLabel() {
      return humanStorageSize(this.uploadSize);
    },

    colorClass() {
      var cls = [];
      this.color !== void 0 && cls.push("bg-".concat(this.color));
      this.textColor !== void 0 && cls.push("text-".concat(this.textColor));
      return cls.join(' ');
    },

    editable() {
      return this.disable !== true && this.readonly !== true;
    }

  },
  methods: {
    pickFiles(e) {
      if (this.editable) {
        var input = this.__getFileInput();

        input && input.click(e);
      }
    },

    addFiles(files) {
      if (this.editable && files) {
        this.__addFiles(null, files);
      }
    },

    reset() {
      if (!this.disable) {
        this.abort();
        this.uploadedSize = 0;
        this.uploadSize = 0;
        this.files = [];
        this.queuedFiles = [];
        this.uploadedFiles = [];
      }
    },

    removeUploadedFiles() {
      if (!this.disable) {
        this.files = this.files.filter(f => f.__status !== 'uploaded');
        this.uploadedFiles = [];
      }
    },

    removeQueuedFiles() {
      if (!this.disable) {
        var removedFiles = [];
        this.files.forEach(file => {
          if (file.__status === 'idle' || file.__status === 'failed') {
            this.uploadSize -= file.size;
            removedFiles.push(file);
          }
        });

        if (removedFiles.length > 0) {
          this.files = this.files.filter(f => f.__status !== 'idle' && f.__status !== 'failed');
          this.queuedFiles = [];
          this.$emit('removed', removedFiles);
        }
      }
    },

    removeFile(file) {
      if (this.disable) {
        return;
      }

      if (file.__status === 'uploaded') {
        this.uploadedFiles = this.uploadedFiles.filter(f => f.name !== file.name);
      } else if (file.__status === 'uploading') {
        file.__abort();
      } else {
        this.uploadSize -= file.size;
      }

      this.files = this.files.filter(f => f.name !== file.name);
      this.queuedFiles = this.queuedFiles.filter(f => f.name !== file.name);
      this.$emit('removed', [file]);
    },

    __getFileInput() {
      return this.$refs.input || this.$el.getElementsByClassName('q-uploader__input')[0];
    },

    __getProgressLabel(p) {
      return (p * 100).toFixed(2) + '%';
    },

    __updateFile(file, status, uploadedSize) {
      file.__status = status;

      if (status === 'idle') {
        file.__uploaded = 0;
        file.__progress = 0;
        file.__sizeLabel = humanStorageSize(file.size);
        file.__progressLabel = '0.00%';
        return;
      }

      if (status === 'failed') {
        this.$forceUpdate();
        return;
      }

      file.__uploaded = status === 'uploaded' ? file.size : uploadedSize;
      file.__progress = status === 'uploaded' ? 1 : Math.min(0.9999, file.__uploaded / file.size);
      file.__progressLabel = this.__getProgressLabel(file.__progress);
      this.$forceUpdate();
    },

    __addFiles(e, files) {
      files = Array.prototype.slice.call(files || e.target.files);
      this.__getFileInput().value = ''; // make sure we don't duplicate files

      files = files.filter(file => !this.files.some(f => file.name === f.name));

      if (files.length === 0) {
        return;
      } // filter file types


      if (this.accept !== void 0) {
        files = Array.prototype.filter.call(files, file => {
          return this.extensions.some(ext => file.type.toUpperCase().startsWith(ext.toUpperCase()) || file.name.toUpperCase().endsWith(ext.toUpperCase()));
        });

        if (files.length === 0) {
          return;
        }
      } // filter max file size


      if (this.maxFileSize !== void 0) {
        files = Array.prototype.filter.call(files, file => file.size <= this.maxFileSize);

        if (files.length === 0) {
          return;
        }
      } // Cordova/iOS allows selecting multiple files even when the
      // multiple attribute is not specified. We also normalize drag'n'dropped
      // files here:


      if (this.multiple !== true) {
        files = [files[0]];
      }

      if (this.maxTotalSize !== void 0) {
        var size = this.uploadSize;

        for (var i = 0; i < files.length; i++) {
          size += files[i].size;

          if (size > this.maxTotalSize) {
            if (i > 0) {
              files = files.slice(0, i);
              break;
            } else {
              return;
            }
          }
        }

        if (files.length === 0) {
          return;
        }
      } // do we have custom filter function?


      if (typeof this.filter === 'function') {
        files = this.filter(files);
      }

      if (files.length === 0) {
        return;
      }

      var filesReady = []; // List of image load promises

      files.forEach(file => {
        this.__updateFile(file, 'idle');

        this.uploadSize += file.size;

        if (this.noThumbnails !== true && file.type.toUpperCase().startsWith('IMAGE')) {
          var reader = new FileReader();
          var p = new Promise((resolve, reject) => {
            reader.onload = e => {
              var img = new Image();
              img.src = e.target.result;
              file.__img = img;
              resolve(true);
            };

            reader.onerror = e => {
              reject(e);
            };
          });
          reader.readAsDataURL(file);
          filesReady.push(p);
        }
      });
      Promise.all(filesReady).then(() => {
        this.files = this.files.concat(files);
        this.queuedFiles = this.queuedFiles.concat(files);
        this.$emit('added', files);
        this.autoUpload === true && this.upload();
      });
    },

    __onDragOver(e) {
      stopAndPrevent(e);
      this.dnd = true;
    },

    __onDragLeave(e) {
      stopAndPrevent(e);
      this.dnd = false;
    },

    __onDrop(e) {
      stopAndPrevent(e);
      var files = e.dataTransfer.files;

      if (files.length > 0) {
        this.__addFiles(null, files);
      }

      this.dnd = false;
    },

    __getBtn(h, show, icon, fn) {
      if (show === true) {
        return h(QBtn, {
          props: {
            type: 'a',
            icon: this.$q.iconSet.uploader[icon],
            flat: true,
            dense: true
          },
          on: icon === 'add' ? null : {
            click: fn
          }
        }, icon === 'add' ? this.__getInputControl(h) : null);
      }
    },

    __getInputControl(h) {
      return [h('input', {
        ref: 'input',
        staticClass: 'q-uploader__input overflow-hidden absolute-full',
        attrs: QUploaderBase_objectSpread({
          tabindex: -1,
          type: 'file',
          title: '',
          // try to remove default tooltip
          accept: this.accept
        }, this.multiple === true ? {
          multiple: true
        } : {}),
        on: cache(this, 'input', {
          mousedown: event_stop,
          // need to stop refocus from QBtn
          change: this.__addFiles
        })
      })];
    },

    __getHeader(h) {
      if (this.$scopedSlots.header !== void 0) {
        return this.$scopedSlots.header(this);
      }

      return [h('div', {
        staticClass: 'q-uploader__header-content flex flex-center no-wrap q-gutter-xs'
      }, [this.__getBtn(h, this.queuedFiles.length > 0, 'removeQueue', this.removeQueuedFiles), this.__getBtn(h, this.uploadedFiles.length > 0, 'removeUploaded', this.removeUploadedFiles), this.isUploading === true ? h(QSpinner, {
        staticClass: 'q-uploader__spinner'
      }) : null, h('div', {
        staticClass: 'col column justify-center'
      }, [this.label !== void 0 ? h('div', {
        staticClass: 'q-uploader__title'
      }, [this.label]) : null, h('div', {
        staticClass: 'q-uploader__subtitle'
      }, [this.uploadSizeLabel + ' / ' + this.uploadProgressLabel])]), this.__getBtn(h, this.canAddFiles, 'add', this.pickFiles), this.__getBtn(h, this.hideUploadBtn === false && this.canUpload === true, 'upload', this.upload), this.__getBtn(h, this.isUploading, 'clear', this.abort)])];
    },

    __getList(h) {
      if (this.$scopedSlots.list !== void 0) {
        return this.$scopedSlots.list(this);
      }

      return this.files.map(file => h('div', {
        key: file.name,
        staticClass: 'q-uploader__file relative-position',
        class: {
          'q-uploader__file--img': file.__img !== void 0,
          'q-uploader__file--failed': file.__status === 'failed',
          'q-uploader__file--uploaded': file.__status === 'uploaded'
        },
        style: file.__img !== void 0 ? {
          backgroundImage: 'url(' + file.__img.src + ')'
        } : null
      }, [h('div', {
        staticClass: 'q-uploader__file-header row flex-center no-wrap'
      }, [file.__status === 'failed' ? h(QIcon, {
        staticClass: 'q-uploader__file-status',
        props: {
          name: this.$q.iconSet.type.negative,
          color: 'negative'
        }
      }) : null, h('div', {
        staticClass: 'q-uploader__file-header-content col'
      }, [h('div', {
        staticClass: 'q-uploader__title'
      }, [file.name]), h('div', {
        staticClass: 'q-uploader__subtitle row items-center no-wrap'
      }, [file.__sizeLabel + ' / ' + file.__progressLabel])]), file.__status === 'uploading' ? h(QCircularProgress, {
        props: {
          value: file.__progress,
          min: 0,
          max: 1,
          indeterminate: file.__progress === 0
        }
      }) : h(QBtn, {
        props: {
          round: true,
          dense: true,
          flat: true,
          icon: this.$q.iconSet.uploader[file.__status === 'uploaded' ? 'done' : 'clear']
        },
        on: {
          click: () => {
            this.removeFile(file);
          }
        }
      })])]));
    }

  },

  beforeDestroy() {
    this.isUploading === true && this.abort();
  },

  render(h) {
    return h('div', {
      staticClass: 'q-uploader column no-wrap',
      class: {
        'q-uploader--dark q-dark': this.isDark,
        'q-uploader--bordered': this.bordered,
        'q-uploader--square no-border-radius': this.square,
        'q-uploader--flat no-shadow': this.flat,
        'disabled q-uploader--disable': this.disable
      },
      on: this.canAddFiles === true ? cache(this, 'drag', {
        dragover: this.__onDragOver
      }) : null
    }, [h('div', {
      staticClass: 'q-uploader__header',
      class: this.colorClass
    }, this.__getHeader(h)), h('div', {
      staticClass: 'q-uploader__list scroll'
    }, this.__getList(h)), this.dnd === true ? h('div', {
      staticClass: 'q-uploader__dnd absolute-full',
      on: cache(this, 'dnd', {
        dragenter: stopAndPrevent,
        dragover: stopAndPrevent,
        dragleave: this.__onDragLeave,
        drop: this.__onDrop
      })
    }) : null, this.isBusy === true ? h('div', {
      staticClass: 'q-uploader__overlay absolute-full flex flex-center'
    }, [h(QSpinner)]) : null]);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/uploader/uploader-xhr-mixin.js






function getFn(prop) {
  return typeof prop === 'function' ? prop : () => prop;
}

/* harmony default export */ var uploader_xhr_mixin = ({
  props: {
    url: [Function, String],
    method: {
      type: [Function, String],
      default: 'POST'
    },
    fieldName: {
      type: [Function, String],
      default: file => file.name
    },
    headers: [Function, Array],
    formFields: [Function, Array],
    withCredentials: [Function, Boolean],
    sendRaw: [Function, Boolean],
    batch: [Function, Boolean],
    factory: Function
  },

  data() {
    return {
      xhrs: [],
      promises: [],
      workingThreads: 0
    };
  },

  computed: {
    xhrProps() {
      return {
        url: getFn(this.url),
        method: getFn(this.method),
        headers: getFn(this.headers),
        formFields: getFn(this.formFields),
        fieldName: getFn(this.fieldName),
        withCredentials: getFn(this.withCredentials),
        sendRaw: getFn(this.sendRaw),
        batch: getFn(this.batch)
      };
    },

    isUploading() {
      return this.workingThreads > 0;
    },

    isBusy() {
      return this.promises.length > 0;
    }

  },
  methods: {
    abort() {
      this.xhrs.forEach(x => {
        x.abort();
      });

      if (this.promises.length > 0) {
        this.abortPromises = true;
      }
    },

    upload() {
      if (this.canUpload === false) {
        return;
      }

      var queue = this.queuedFiles.slice(0);
      this.queuedFiles = [];

      if (this.xhrProps.batch(queue)) {
        this.__runFactory(queue);
      } else {
        queue.forEach(file => {
          this.__runFactory([file]);
        });
      }
    },

    __runFactory(files) {
      this.workingThreads++;

      if (typeof this.factory !== 'function') {
        this.__uploadFiles(files, {});

        return;
      }

      var res = this.factory(files);

      if (!res) {
        this.$emit('factory-failed', new Error('QUploader: factory() does not return properly'), files);
        this.workingThreads--;
      } else if (typeof res.catch === 'function' && typeof res.then === 'function') {
        this.promises.push(res);

        var failed = err => {
          if (this._isBeingDestroyed !== true && this._isDestroyed !== true) {
            this.promises = this.promises.filter(p => p !== res);

            if (this.promises.length === 0) {
              this.abortPromises = false;
            }

            this.queuedFiles = this.queuedFiles.concat(files);
            files.forEach(f => {
              this.__updateFile(f, 'failed');
            });
            this.$emit('factory-failed', err, files);
            this.workingThreads--;
          }
        };

        res.then(factory => {
          if (this.abortPromises === true) {
            failed(new Error('Aborted'));
          } else if (this._isBeingDestroyed !== true && this._isDestroyed !== true) {
            this.promises = this.promises.filter(p => p !== res);

            this.__uploadFiles(files, factory);
          }
        }).catch(failed);
      } else {
        this.__uploadFiles(files, res || {});
      }
    },

    __uploadFiles(files, factory) {
      var form = new FormData(),
          xhr = new XMLHttpRequest();

      var getProp = (name, arg) => {
        return factory[name] !== void 0 ? getFn(factory[name])(arg) : this.xhrProps[name](arg);
      };

      var url = getProp('url', files);

      if (!url) {
        console.error('q-uploader: invalid or no URL specified');
        this.workingThreads--;
        return;
      }

      var fields = getProp('formFields', files);
      fields !== void 0 && fields.forEach(field => {
        form.append(field.name, field.value);
      });
      var uploadIndex = 0,
          uploadIndexSize = 0,
          uploadedSize = 0,
          maxUploadSize = 0,
          aborted;
      xhr.upload.addEventListener('progress', e => {
        if (aborted === true) {
          return;
        }

        var loaded = Math.min(maxUploadSize, e.loaded);
        this.uploadedSize += loaded - uploadedSize;
        uploadedSize = loaded;
        var size = uploadedSize - uploadIndexSize;

        for (var i = uploadIndex; size > 0 && i < files.length; i++) {
          var file = files[i],
              uploaded = size > file.size;

          if (uploaded) {
            size -= file.size;
            uploadIndex++;
            uploadIndexSize += file.size;

            this.__updateFile(file, 'uploading', file.size);
          } else {
            this.__updateFile(file, 'uploading', size);

            return;
          }
        }
      }, false);

      xhr.onreadystatechange = () => {
        if (xhr.readyState < 4) {
          return;
        }

        if (xhr.status && xhr.status < 400) {
          this.uploadedFiles = this.uploadedFiles.concat(files);
          files.forEach(f => {
            this.__updateFile(f, 'uploaded');
          });
          this.$emit('uploaded', {
            files,
            xhr
          });
        } else {
          aborted = true;
          this.uploadedSize -= uploadedSize;
          this.queuedFiles = this.queuedFiles.concat(files);
          files.forEach(f => {
            this.__updateFile(f, 'failed');
          });
          this.$emit('failed', {
            files,
            xhr
          });
        }

        this.workingThreads--;
        this.xhrs = this.xhrs.filter(x => x !== xhr);
      };

      xhr.open(getProp('method', files), url);

      if (getProp('withCredentials', files) === true) {
        xhr.withCredentials = true;
      }

      var headers = getProp('headers', files);
      headers !== void 0 && headers.forEach(head => {
        xhr.setRequestHeader(head.name, head.value);
      });
      var sendRaw = getProp('sendRaw', files);
      files.forEach(file => {
        this.__updateFile(file, 'uploading', 0);

        if (sendRaw !== true) {
          form.append(getProp('fieldName', file), file);
        }

        file.xhr = xhr;
        file.__abort = xhr.abort;
        maxUploadSize += file.size;
      });
      this.$emit('uploading', {
        files,
        xhr
      });
      this.xhrs.push(xhr);

      if (sendRaw === true) {
        xhr.send(new Blob(files));
      } else {
        xhr.send(form);
      }
    }

  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/uploader/QUploader.js



/* harmony default export */ var QUploader = (vue_runtime_esm["a" /* default */].extend({
  name: 'QUploader',
  mixins: [QUploaderBase, uploader_xhr_mixin]
}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/uploader/QUploaderAddTrigger.js

/* harmony default export */ var QUploaderAddTrigger = (vue_runtime_esm["a" /* default */].extend({
  name: 'QUploaderAddTrigger',
  inject: {
    __qUploaderGetInput: {
      default() {
        console.error('QUploaderAddTrigger needs to be child of QUploader');
      }

    }
  },

  render(h) {
    return this.__qUploaderGetInput(h);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/uploader/index.js




// CONCATENATED MODULE: ./node_modules/quasar/src/components/video/QVideo.js


/* harmony default export */ var QVideo = (vue_runtime_esm["a" /* default */].extend({
  name: 'QVideo',
  mixins: [mixins_ratio],
  props: {
    src: {
      type: String,
      required: true
    }
  },
  computed: {
    iframeData() {
      return {
        attrs: {
          src: this.src,
          frameborder: '0',
          allowfullscreen: true
        }
      };
    },

    classes() {
      return 'q-video' + (this.ratio !== void 0 ? ' q-video--responsive' : '');
    }

  },

  render(h) {
    return h('div', {
      class: this.classes,
      style: this.ratioStyle,
      on: this.$listeners
    }, [h('iframe', this.iframeData)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/components/video/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components/virtual-scroll/index.js


// CONCATENATED MODULE: ./node_modules/quasar/src/components.js













































































// CONCATENATED MODULE: ./node_modules/quasar/src/directives/ClosePopup.js


/*
 * depth
 *   < 0  --> close all chain
 *   0    --> disabled
 *   > 0  --> close chain up to N parent
 */

function getDepth(value) {
  if (value === false) {
    return 0;
  }

  if (value === true || value === void 0) {
    return 1;
  }

  var depth = parseInt(value, 10);
  return isNaN(depth) ? 0 : depth;
}

/* harmony default export */ var ClosePopup = ({
  name: 'close-popup',

  bind(el, _ref, vnode) {
    var value = _ref.value;
    var ctx = {
      depth: getDepth(value),

      handler(evt) {
        // allow @click to be emitted
        ctx.depth !== 0 && setTimeout(() => {
          closePortals(vnode.componentInstance || vnode.context, evt, ctx.depth);
        });
      },

      handlerKey(evt) {
        isKeyCode(evt, 13) === true && ctx.handler(evt);
      }

    };

    if (el.__qclosepopup !== void 0) {
      el.__qclosepopup_old = el.__qclosepopup;
    }

    el.__qclosepopup = ctx;
    el.addEventListener('click', ctx.handler);
    el.addEventListener('keyup', ctx.handlerKey);
  },

  update(el, _ref2) {
    var value = _ref2.value,
        oldValue = _ref2.oldValue;

    if (value !== oldValue) {
      el.__qclosepopup.depth = getDepth(value);
    }
  },

  unbind(el) {
    var ctx = el.__qclosepopup_old || el.__qclosepopup;

    if (ctx !== void 0) {
      el.removeEventListener('click', ctx.handler);
      el.removeEventListener('keyup', ctx.handlerKey);
      delete el[el.__qclosepopup_old ? '__qclosepopup_old' : '__qclosepopup'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/GoBack.js



/* harmony default export */ var GoBack = ({
  name: 'go-back',

  bind(el, _ref, vnode) {
    var value = _ref.value,
        modifiers = _ref.modifiers;
    var ctx = {
      value,
      position: window.history.length - 1,
      single: modifiers.single,

      goBack() {
        var router = vnode.context.$router;

        if (ctx.single) {
          router.go(-1);
        } else if (client.is.nativeMobile === true) {
          router.go(ctx.position - window.history.length);
        } else {
          router.replace(ctx.value);
        }
      },

      goBackKey(e) {
        // if ENTER key
        isKeyCode(e, 13) === true && ctx.goBack();
      }

    };

    if (el.__qgoback) {
      el.__qgoback_old = el.__qgoback;
    }

    el.__qgoback = ctx;
    el.addEventListener('click', ctx.goBack);
    el.addEventListener('keyup', ctx.goBackKey);
  },

  update(el, _ref2) {
    var value = _ref2.value,
        oldValue = _ref2.oldValue;

    if (value !== oldValue) {
      el.__qgoback.value = value;
    }
  },

  unbind(el) {
    var ctx = el.__qgoback_old || el.__qgoback;

    if (ctx !== void 0) {
      el.removeEventListener('click', ctx.goBack);
      el.removeEventListener('keyup', ctx.goBackKey);
      delete el[el.__qgoback_old ? '__qgoback_old' : '__qgoback'];
    }
  }

});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js
var es_object_keys = __webpack_require__("b64b");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js


function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js



function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/Mutation.js


var Mutation_defaultCfg = {
  childList: true,
  subtree: true,
  attributes: true,
  characterData: true,
  attributeOldValue: true,
  characterDataOldValue: true
};

function Mutation_update(el, ctx, _ref) {
  var _ref$modifiers = _ref.modifiers,
      once = _ref$modifiers.once,
      mod = _objectWithoutProperties(_ref$modifiers, ["once"]),
      value = _ref.value;

  var changed;
  ctx.once = once;

  if (ctx.handler !== value) {
    changed = true;
    ctx.handler = value;
  }

  if (ctx.opts === void 0 || isDeepEqual(mod, ctx.mod) === false) {
    changed = true;
    ctx.mod = mod;
    ctx.opts = Object.keys(mod).length === 0 ? Mutation_defaultCfg : mod;
  }

  if (changed === true) {
    ctx.observer !== void 0 && ctx.observer.disconnect();
    ctx.observer = new MutationObserver(list => {
      if (typeof ctx.handler === 'function') {
        var res = ctx.handler(list);

        if (res === false || ctx.once === true) {
          Mutation_destroy(el);
        }
      }
    });
    ctx.observer.observe(el, ctx.opts);
  }
}

function Mutation_destroy(el) {
  var ctx = el.__qmutation;

  if (ctx !== void 0) {
    ctx.observer !== void 0 && ctx.observer.disconnect();
    delete el.__qmutation;
  }
}

/* harmony default export */ var Mutation = ({
  name: 'mutation',

  inserted(el, binding) {
    var ctx = {};
    Mutation_update(el, ctx, binding);
    el.__qmutation = ctx;
  },

  update(el, binding) {
    var ctx = el.__qmutation;
    ctx !== void 0 && Mutation_update(el, ctx, binding);
  },

  unbind: Mutation_destroy
});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/ScrollFire.js





function updateBinding(el, _ref) {
  var value = _ref.value,
      oldValue = _ref.oldValue;
  var ctx = el.__qscrollfire;

  if (typeof value !== 'function') {
    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll);
    return;
  }

  ctx.handler = value;

  if (typeof oldValue !== 'function') {
    ctx.scrollTarget.addEventListener('scroll', ctx.scroll, listenOpts.passive);
    ctx.scroll();
  }
}

/* harmony default export */ var ScrollFire = ({
  name: 'scroll-fire',

  bind(el) {
    var ctx = {
      scroll: debounce(() => {
        var containerBottom, elBottom;

        if (ctx.scrollTarget === window) {
          elBottom = el.getBoundingClientRect().bottom;
          containerBottom = window.innerHeight;
        } else {
          elBottom = dom_offset(el).top + dom_height(el);
          containerBottom = dom_offset(ctx.scrollTarget).top + dom_height(ctx.scrollTarget);
        }

        if (elBottom > 0 && elBottom < containerBottom) {
          ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, listenOpts.passive);
          ctx.handler(el);
        }
      }, 25)
    };

    if (el.__qscrollfire) {
      el.__qscrollfire_old = el.__qscrollfire;
    }

    el.__qscrollfire = ctx;
  },

  inserted(el, binding) {
    var ctx = el.__qscrollfire;
    ctx.scrollTarget = getScrollTarget(el);
    updateBinding(el, binding);
  },

  update(el, binding) {
    if (binding.value !== binding.oldValue) {
      updateBinding(el, binding);
    }
  },

  unbind(el) {
    var ctx = el.__qscrollfire_old || el.__qscrollfire;

    if (ctx !== void 0) {
      ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, listenOpts.passive);
      delete el[el.__qscrollfire_old ? '__qscrollfire_old' : '__qscrollfire'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/Scroll.js



function Scroll_updateBinding(el, _ref) {
  var value = _ref.value,
      oldValue = _ref.oldValue;
  var ctx = el.__qscroll;

  if (typeof value !== 'function') {
    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, listenOpts.passive);
    return;
  }

  ctx.handler = value;

  if (typeof oldValue !== 'function') {
    ctx.scrollTarget.addEventListener('scroll', ctx.scroll, listenOpts.passive);
  }
}

/* harmony default export */ var Scroll = ({
  name: 'scroll',

  bind(el) {
    var ctx = {
      scroll() {
        ctx.handler(getScrollPosition(ctx.scrollTarget), getHorizontalScrollPosition(ctx.scrollTarget));
      }

    };

    if (el.__qscroll) {
      el.__qscroll_old = el.__qscroll;
    }

    el.__qscroll = ctx;
  },

  inserted(el, binding) {
    var ctx = el.__qscroll;
    ctx.scrollTarget = getScrollTarget(el);
    Scroll_updateBinding(el, binding);
  },

  update(el, binding) {
    if (binding.oldValue !== binding.value) {
      Scroll_updateBinding(el, binding);
    }
  },

  unbind(el) {
    var ctx = el.__qscroll_old || el.__qscroll;

    if (ctx !== void 0) {
      ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, listenOpts.passive);
      delete el[el.__qscroll_old ? '__qscroll_old' : '__qscroll'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/TouchHold.js








function TouchHold_update(el, binding) {
  var ctx = el.__qtouchhold;

  if (ctx !== void 0) {
    if (binding.oldValue !== binding.value) {
      typeof binding.value !== 'function' && ctx.end();
      ctx.handler = binding.value;
    } // duration in ms, touch in pixels, mouse in pixels


    var data = [600, 5, 7];

    if (typeof binding.arg === 'string' && binding.arg.length) {
      binding.arg.split(':').forEach((val, index) => {
        var v = parseInt(val, 10);
        v && (data[index] = v);
      });
    }

    ctx.duration = data[0];
    ctx.touchSensitivity = data[1];
    ctx.mouseSensitivity = data[2];
  }
}

/* harmony default export */ var TouchHold = ({
  name: 'touch-hold',

  bind(el, binding) {
    var modifiers = binding.modifiers; // early return, we don't need to do anything

    if (modifiers.mouse !== true && client.has.touch !== true) {
      return;
    }

    var ctx = {
      noop() {},

      mouseStart(evt) {
        if (typeof ctx.handler === 'function' && leftClick(evt) === true) {
          addEvt(ctx, 'temp', [[document, 'mousemove', 'move', 'passiveCapture'], [document, 'click', 'end', 'notPassiveCapture']]);
          ctx.start(evt, true);
        }
      },

      touchStart(evt) {
        if (evt.target !== void 0 && typeof ctx.handler === 'function') {
          var target = getTouchTarget(evt.target);
          addEvt(ctx, 'temp', [[target, 'touchmove', 'move', 'passiveCapture'], [target, 'touchcancel', 'end', 'notPassiveCapture'], [target, 'touchend', 'end', 'notPassiveCapture']]);
          ctx.start(evt);
        }
      },

      start(evt, mouseEvent) {
        ctx.origin = event_position(evt);
        var startTime = Date.now();

        if (client.is.mobile === true) {
          document.body.classList.add('non-selectable');
          clearSelection();

          ctx.styleCleanup = withDelay => {
            ctx.styleCleanup = void 0;

            var remove = () => {
              document.body.classList.remove('non-selectable');
            };

            if (withDelay === true) {
              clearSelection();
              setTimeout(remove, 10);
            } else {
              remove();
            }
          };
        }

        ctx.triggered = false;
        ctx.sensitivity = mouseEvent === true ? ctx.mouseSensitivity : ctx.touchSensitivity;
        ctx.timer = setTimeout(() => {
          clearSelection();
          ctx.triggered = true;
          ctx.handler({
            evt,
            touch: mouseEvent !== true,
            mouse: mouseEvent === true,
            position: ctx.origin,
            duration: Date.now() - startTime
          });
        }, ctx.duration);
      },

      move(evt) {
        var _position = event_position(evt),
            top = _position.top,
            left = _position.left;

        if (Math.abs(left - ctx.origin.left) >= ctx.sensitivity || Math.abs(top - ctx.origin.top) >= ctx.sensitivity) {
          clearTimeout(ctx.timer);
        }
      },

      end(evt) {
        cleanEvt(ctx, 'temp'); // delay needed otherwise selection still occurs

        ctx.styleCleanup !== void 0 && ctx.styleCleanup(ctx.triggered);

        if (ctx.triggered === true) {
          evt !== void 0 && stopAndPrevent(evt);
        } else {
          clearTimeout(ctx.timer);
        }
      }

    };

    if (el.__qtouchhold) {
      el.__qtouchhold_old = el.__qtouchhold;
    }

    el.__qtouchhold = ctx;
    TouchHold_update(el, binding);
    modifiers.mouse === true && addEvt(ctx, 'main', [[el, 'mousedown', 'mouseStart', "passive".concat(modifiers.mouseCapture === true ? 'Capture' : '')]]);
    client.has.touch === true && addEvt(ctx, 'main', [[el, 'touchstart', 'touchStart', "passive".concat(modifiers.capture === true ? 'Capture' : '')], [el, 'touchend', 'noop', 'notPassiveCapture']]);
  },

  update: TouchHold_update,

  unbind(el) {
    var ctx = el.__qtouchhold_old || el.__qtouchhold;

    if (ctx !== void 0) {
      cleanEvt(ctx, 'main');
      cleanEvt(ctx, 'temp');
      clearTimeout(ctx.timer);
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el[el.__qtouchhold_old ? '__qtouchhold_old' : '__qtouchhold'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives/TouchRepeat.js










var TouchRepeat_keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
},
    keyRegex = new RegExp("^([\\d+]+|".concat(Object.keys(TouchRepeat_keyCodes).join('|'), ")$"), 'i');

function shouldEnd(evt, origin) {
  var _position = event_position(evt),
      top = _position.top,
      left = _position.left;

  return Math.abs(left - origin.left) >= 7 || Math.abs(top - origin.top) >= 7;
}

/* harmony default export */ var TouchRepeat = ({
  name: 'touch-repeat',

  bind(el, _ref) {
    var modifiers = _ref.modifiers,
        value = _ref.value,
        arg = _ref.arg;
    var keyboard = Object.keys(modifiers).reduce((acc, key) => {
      if (keyRegex.test(key) === true) {
        var keyCode = isNaN(parseInt(key, 10)) ? TouchRepeat_keyCodes[key.toLowerCase()] : parseInt(key, 10);
        keyCode >= 0 && acc.push(keyCode);
      }

      return acc;
    }, []); // early return, we don't need to do anything

    if (modifiers.mouse !== true && client.has.touch !== true && keyboard.length === 0) {
      return;
    }

    var durations = typeof arg === 'string' && arg.length > 0 ? arg.split(':').map(val => parseInt(val, 10)) : [0, 600, 300];
    var durationsLast = durations.length - 1;
    var ctx = {
      keyboard,
      handler: value,

      noop() {},

      mouseStart(evt) {
        if (ctx.event === void 0 && typeof ctx.handler === 'function' && leftClick(evt) === true) {
          addEvt(ctx, 'temp', [[document, 'mousemove', 'move', 'passiveCapture'], [document, 'click', 'end', 'notPassiveCapture']]);
          ctx.start(evt, true);
        }
      },

      keyboardStart(evt) {
        if (typeof ctx.handler === 'function' && isKeyCode(evt, keyboard) === true) {
          if (durations[0] === 0 || ctx.event !== void 0) {
            stopAndPrevent(evt);
            el.focus();

            if (ctx.event !== void 0) {
              return;
            }
          }

          addEvt(ctx, 'temp', [[document, 'keyup', 'end', 'notPassiveCapture'], [document, 'click', 'end', 'notPassiveCapture']]);
          ctx.start(evt, false, true);
        }
      },

      touchStart(evt) {
        if (evt.target !== void 0 && typeof ctx.handler === 'function') {
          var target = getTouchTarget(evt.target);
          addEvt(ctx, 'temp', [[target, 'touchmove', 'move', 'passiveCapture'], [target, 'touchcancel', 'end', 'notPassiveCapture'], [target, 'touchend', 'end', 'notPassiveCapture']]);
          ctx.start(evt);
        }
      },

      start(evt, mouseEvent, keyboardEvent) {
        if (keyboardEvent !== true) {
          ctx.origin = event_position(evt);
        }

        function styleCleanup(withDelay) {
          ctx.styleCleanup = void 0;
          document.documentElement.style.cursor = '';

          var remove = () => {
            document.body.classList.remove('non-selectable');
          };

          if (withDelay === true) {
            clearSelection();
            setTimeout(remove, 10);
          } else {
            remove();
          }
        }

        if (client.is.mobile === true) {
          document.body.classList.add('non-selectable');
          clearSelection();
          ctx.styleCleanup = styleCleanup;
        }

        ctx.event = {
          touch: mouseEvent !== true && keyboardEvent !== true,
          mouse: mouseEvent === true,
          keyboard: keyboardEvent === true,
          startTime: Date.now(),
          repeatCount: 0
        };

        var fn = () => {
          if (ctx.event === void 0) {
            return;
          }

          if (ctx.event.repeatCount === 0) {
            ctx.event.evt = evt;

            if (keyboardEvent === true) {
              ctx.event.keyCode = evt.keyCode;
            } else {
              ctx.event.position = event_position(evt);
            }

            if (client.is.mobile !== true) {
              document.documentElement.style.cursor = 'pointer';
              document.body.classList.add('non-selectable');
              clearSelection();
              ctx.styleCleanup = styleCleanup;
            }
          }

          ctx.event.duration = Date.now() - ctx.event.startTime;
          ctx.event.repeatCount += 1;
          ctx.handler(ctx.event);
          var index = durationsLast < ctx.event.repeatCount ? durationsLast : ctx.event.repeatCount;
          ctx.timer = setTimeout(fn, durations[index]);
        };

        if (durations[0] === 0) {
          fn();
        } else {
          ctx.timer = setTimeout(fn, durations[0]);
        }
      },

      move(evt) {
        if (ctx.event !== void 0 && shouldEnd(evt, ctx.origin) === true) {
          clearTimeout(ctx.timer);
        }
      },

      end(evt) {
        if (ctx.event === void 0) {
          return;
        }

        ctx.styleCleanup !== void 0 && ctx.styleCleanup(true);
        evt !== void 0 && ctx.event.repeatCount > 0 && stopAndPrevent(evt);
        cleanEvt(ctx, 'temp');
        clearTimeout(ctx.timer);
        ctx.event = void 0;
      }

    };

    if (el.__qtouchrepeat) {
      el.__qtouchrepeat_old = el.__qtouchrepeat;
    }

    el.__qtouchrepeat = ctx;
    modifiers.mouse === true && addEvt(ctx, 'main', [[el, 'mousedown', 'mouseStart', "passive".concat(modifiers.mouseCapture === true ? 'Capture' : '')]]);
    client.has.touch === true && addEvt(ctx, 'main', [[el, 'touchstart', 'touchStart', "passive".concat(modifiers.capture === true ? 'Capture' : '')], [el, 'touchend', 'noop', 'notPassiveCapture']]);
    keyboard.length > 0 && addEvt(ctx, 'main', [[el, 'keydown', 'keyboardStart', "notPassive".concat(modifiers.keyCapture === true ? 'Capture' : '')]]);
  },

  update(el, binding) {
    var ctx = el.__qtouchrepeat;

    if (ctx !== void 0 && binding.oldValue !== binding.value) {
      typeof binding.value !== 'function' && ctx.end();
      ctx.handler = binding.value;
    }
  },

  unbind(el) {
    var ctx = el.__qtouchrepeat_old || el.__qtouchrepeat;

    if (ctx !== void 0) {
      clearTimeout(ctx.timer);
      cleanEvt(ctx, 'main');
      cleanEvt(ctx, 'temp');
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el[el.__qtouchrepeat_old ? '__qtouchrepeat_old' : '__qtouchrepeat'];
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/directives.js












// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/AddressbarColor.js


var metaValue;

function getProp() {
  if (plugins_Platform.is.winphone) {
    return 'msapplication-navbutton-color';
  }

  if (plugins_Platform.is.safari) {
    return 'apple-mobile-web-app-status-bar-style';
  } // Chrome, Firefox OS, Opera, Vivaldi


  return 'theme-color';
}

function getMetaTag(v) {
  var els = document.getElementsByTagName('META');

  for (var i in els) {
    if (els[i].name === v) {
      return els[i];
    }
  }
}

function setColor(hexColor) {
  if (metaValue === void 0) {
    // cache it
    metaValue = getProp();
  }

  var metaTag = getMetaTag(metaValue);
  var newTag = metaTag === void 0;

  if (newTag) {
    metaTag = document.createElement('meta');
    metaTag.setAttribute('name', metaValue);
  }

  metaTag.setAttribute('content', hexColor);

  if (newTag) {
    document.head.appendChild(metaTag);
  }
}

/* harmony default export */ var AddressbarColor = ({
  install(_ref) {
    var $q = _ref.$q,
        cfg = _ref.cfg;
    this.set = isSSR === false && plugins_Platform.is.mobile === true && (plugins_Platform.is.nativeMobile === true || plugins_Platform.is.winphone === true || plugins_Platform.is.safari === true || plugins_Platform.is.webkit === true || plugins_Platform.is.vivaldi === true) ? hexColor => {
      var val = hexColor || getBrand('primary');

      if (plugins_Platform.is.nativeMobile === true && window.StatusBar) {
        window.StatusBar.backgroundColorByHexString(val);
      } else {
        setColor(val);
      }
    } : () => {};
    $q.addressbarColor = this;
    cfg.addressbarColor && this.set(cfg.addressbarColor);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/AppFullscreen.js






var prefixes = {}; // needed for consistency across browsers,
// including IE11 which does not return anything

function promisify(target, fn) {
  try {
    var res = target[fn]();
    return res === void 0 ? Promise.resolve() : res;
  } catch (err) {
    return Promise.reject(err);
  }
}

/* harmony default export */ var AppFullscreen = ({
  isCapable: false,
  isActive: false,

  request(target) {
    return this.isCapable && !this.isActive ? promisify(target || document.documentElement, prefixes.request) : this.__getErr();
  },

  exit() {
    return this.isCapable && this.isActive ? promisify(document, prefixes.exit) : this.__getErr();
  },

  toggle(target) {
    return this.isActive ? this.exit() : this.request(target);
  },

  install(_ref) {
    var $q = _ref.$q;
    $q.fullscreen = this;

    if (isSSR === true) {
      return;
    }

    prefixes.request = ['requestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen', 'webkitRequestFullscreen'].find(request => document.documentElement[request]);
    this.isCapable = prefixes.request !== void 0;

    if (this.isCapable === false) {
      // it means the browser does NOT support it
      this.__getErr = () => Promise.reject('Not capable');

      return;
    }

    this.__getErr = () => Promise.resolve();

    prefixes.exit = ['exitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen', 'webkitExitFullscreen'].find(exit => document[exit]);
    this.isActive = !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement);
    ['onfullscreenchange', 'onmsfullscreenchange', 'onwebkitfullscreenchange'].forEach(evt => {
      document[evt] = () => {
        this.isActive = !this.isActive;
      };
    });
    vue_runtime_esm["a" /* default */].util.defineReactive(this, 'isActive', this.isActive);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/AppVisibility.js


/* harmony default export */ var AppVisibility = ({
  appVisible: false,

  install(_ref) {
    var $q = _ref.$q;

    if (isSSR === true) {
      this.appVisible = $q.appVisible = true;
      return;
    }

    var prop, evt;

    if (typeof document.hidden !== 'undefined') {
      // Opera 12.10 and Firefox 18 and later support
      prop = 'hidden';
      evt = 'visibilitychange';
    } else if (typeof document.msHidden !== 'undefined') {
      prop = 'msHidden';
      evt = 'msvisibilitychange';
    } else if (typeof document.webkitHidden !== 'undefined') {
      prop = 'webkitHidden';
      evt = 'webkitvisibilitychange';
    }

    var update = () => {
      this.appVisible = $q.appVisible = !document[prop];
    };

    update();

    if (evt && typeof document[prop] !== 'undefined') {
      vue_runtime_esm["a" /* default */].util.defineReactive($q, 'appVisible', this.appVisible);
      document.addEventListener(evt, update, false);
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/dialog-bottom-sheet/BottomSheet.js








function BottomSheet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function BottomSheet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { BottomSheet_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { BottomSheet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











/* harmony default export */ var BottomSheet = (vue_runtime_esm["a" /* default */].extend({
  name: 'BottomSheetPlugin',
  mixins: [mixins_dark],
  inheritAttrs: false,
  props: {
    title: String,
    message: String,
    actions: Array,
    grid: Boolean,
    cardClass: [String, Array, Object],
    cardStyle: [String, Array, Object]
  },
  methods: {
    show() {
      this.$refs.dialog.show();
    },

    hide() {
      this.$refs.dialog.hide();
    },

    onOk(action) {
      this.$emit('ok', action);
      this.hide();
    },

    __getGrid(h) {
      return this.actions.map(action => {
        var img = action.avatar || action.img;
        return action.label === void 0 ? h(QSeparator, {
          staticClass: 'col-all',
          props: {
            dark: this.isDark
          }
        }) : h('div', {
          staticClass: 'q-bottom-sheet__item q-hoverable q-focusable cursor-pointer relative-position',
          class: action.classes,
          attrs: {
            tabindex: 0
          },
          on: {
            click: () => this.onOk(action),
            keyup: e => {
              e.keyCode === 13 && this.onOk(action);
            }
          }
        }, [h('div', {
          staticClass: 'q-focus-helper'
        }), action.icon ? h(QIcon, {
          props: {
            name: action.icon,
            color: action.color
          }
        }) : img ? h('img', {
          attrs: {
            src: img
          },
          staticClass: action.avatar ? 'q-bottom-sheet__avatar' : null
        }) : h('div', {
          staticClass: 'q-bottom-sheet__empty-icon'
        }), h('div', [action.label])]);
      });
    },

    __getList(h) {
      return this.actions.map(action => {
        var img = action.avatar || action.img;
        return action.label === void 0 ? h(QSeparator, {
          props: {
            spaced: true,
            dark: this.isDark
          }
        }) : h(QItem, {
          staticClass: 'q-bottom-sheet__item',
          class: action.classes,
          props: {
            tabindex: 0,
            clickable: true,
            dark: this.isDark
          },
          on: {
            click: () => this.onOk(action),
            keyup: e => {
              e.keyCode === 13 && this.onOk(action);
            }
          }
        }, [h(QItemSection, {
          props: {
            avatar: true
          }
        }, [action.icon ? h(QIcon, {
          props: {
            name: action.icon,
            color: action.color
          }
        }) : img ? h('img', {
          attrs: {
            src: img
          },
          staticClass: action.avatar ? 'q-bottom-sheet__avatar' : null
        }) : null]), h(QItemSection, [action.label])]);
      });
    }

  },

  render(h) {
    var child = [];

    if (this.title) {
      child.push(h(QCardSection, {
        staticClass: 'q-dialog__title'
      }, [this.title]));
    }

    if (this.message) {
      child.push(h(QCardSection, {
        staticClass: 'q-dialog__message scroll'
      }, [this.message]));
    }

    child.push(this.grid === true ? h('div', {
      staticClass: 'scroll row items-stretch justify-start'
    }, this.__getGrid(h)) : h('div', {
      staticClass: 'scroll'
    }, this.__getList(h)));
    return h(QDialog, {
      ref: 'dialog',
      props: BottomSheet_objectSpread({}, this.$attrs, {
        position: 'bottom'
      }),
      on: cache(this, 'hide', {
        hide: () => {
          this.$emit('hide');
        }
      })
    }, [h(QCard, {
      staticClass: "q-bottom-sheet q-bottom-sheet--".concat(this.grid === true ? 'grid' : 'list') + (this.isDark === true ? ' q-bottom-sheet--dark q-dark' : ''),
      style: this.cardStyle,
      class: this.cardClass
    }, child)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/global-dialog.js




var ssrAPI = {
  onOk: () => ssrAPI,
  okCancel: () => ssrAPI,
  hide: () => ssrAPI
};
/* harmony default export */ var global_dialog = (function (DefaultComponent) {
  return (_ref) => {
    var className = _ref.className,
        klass = _ref.class,
        style = _ref.style,
        component = _ref.component,
        root = _ref.root,
        parent = _ref.parent,
        props = _objectWithoutProperties(_ref, ["className", "class", "style", "component", "root", "parent"]);

    if (isSSR === true) {
      return ssrAPI;
    }

    klass !== void 0 && (props.cardClass = klass);
    style !== void 0 && (props.cardStyle = style);
    var okFns = [],
        cancelFns = [],
        API = {
      onOk(fn) {
        okFns.push(fn);
        return API;
      },

      onCancel(fn) {
        cancelFns.push(fn);
        return API;
      },

      onDismiss(fn) {
        okFns.push(fn);
        cancelFns.push(fn);
        return API;
      },

      hide() {
        vm.$refs.dialog.hide();
        return API;
      }

    };
    var node = document.createElement('div');
    document.body.appendChild(node);
    var emittedOK = false;
    var on = {
      ok: data => {
        emittedOK = true;
        okFns.forEach(fn => {
          fn(data);
        });
      },
      hide: () => {
        vm.$destroy();
        vm.$el.remove();
        vm = null;

        if (emittedOK !== true) {
          cancelFns.forEach(fn => {
            fn();
          });
        }
      }
    };
    vue_runtime_esm["a" /* default */].observable(props);
    var DialogComponent = component !== void 0 ? component : DefaultComponent;
    var attrs = component === void 0 ? props : void 0;
    var vm = new vue_runtime_esm["a" /* default */]({
      name: 'QGlobalDialog',
      el: node,
      parent: parent === void 0 ? root : parent,

      render(h) {
        return h(DialogComponent, {
          ref: 'dialog',
          props,
          attrs,
          on
        });
      },

      mounted() {
        this.$refs.dialog.show();
      }

    });
    return API;
  };
});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/BottomSheet.js


/* harmony default export */ var plugins_BottomSheet = ({
  install(_ref) {
    var $q = _ref.$q;
    this.create = $q.bottomSheet = global_dialog(BottomSheet);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Cookies.js
















function Cookies_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Cookies_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Cookies_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Cookies_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



function encode(string) {
  return encodeURIComponent(string);
}

function decode(string) {
  return decodeURIComponent(string);
}

function stringifyCookieValue(value) {
  return encode(value === Object(value) ? JSON.stringify(value) : '' + value);
}

function read(string) {
  if (string === '') {
    return string;
  }

  if (string.indexOf('"') === 0) {
    // This is a quoted cookie as according to RFC2068, unescape...
    string = string.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  } // Replace server-side written pluses with spaces.
  // If we can't decode the cookie, ignore it, it's unusable.
  // If we can't parse the cookie, ignore it, it's unusable.


  string = decode(string.replace(/\+/g, ' '));

  try {
    string = JSON.parse(string);
  } catch (e) {}

  return string;
}

function getString(msOffset) {
  var time = new Date();
  time.setMilliseconds(time.getMilliseconds() + msOffset);
  return time.toUTCString();
}

function parseExpireString(str) {
  var timestamp = 0;
  var days = str.match(/(\d+)d/);
  var hours = str.match(/(\d+)h/);
  var minutes = str.match(/(\d+)m/);
  var seconds = str.match(/(\d+)s/);

  if (days) {
    timestamp += days[1] * 864e+5;
  }

  if (hours) {
    timestamp += hours[1] * 36e+5;
  }

  if (minutes) {
    timestamp += minutes[1] * 6e+4;
  }

  if (seconds) {
    timestamp += seconds[1] * 1000;
  }

  return timestamp === 0 ? str : getString(timestamp);
}

function _set(key, val) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ssr = arguments.length > 3 ? arguments[3] : undefined;
  var expire, expireValue;

  if (opts.expires !== void 0) {
    // if it's a Date Object
    if (Object.prototype.toString.call(opts.expires) === '[object Date]') {
      expire = opts.expires.toUTCString();
    } // if it's a String (eg. "15m", "1h", "13d", "1d 15m", "31s")
    // possible units: d (days), h (hours), m (minutes), s (seconds)
    else if (typeof opts.expires === 'string') {
        expire = parseExpireString(opts.expires);
      } // otherwise it must be a Number (defined in days)
      else {
          expireValue = parseFloat(opts.expires);
          expire = isNaN(expireValue) === false ? getString(expireValue * 864e+5) : opts.expires;
        }
  }

  var keyValue = "".concat(encode(key), "=").concat(stringifyCookieValue(val));
  var cookie = [keyValue, expire !== void 0 ? '; Expires=' + expire : '', // use expires attribute, max-age is not supported by IE
  opts.path ? '; Path=' + opts.path : '', opts.domain ? '; Domain=' + opts.domain : '', opts.sameSite ? '; SameSite=' + opts.sameSite : '', opts.httpOnly ? '; HttpOnly' : '', opts.secure ? '; Secure' : '', opts.other ? '; ' + opts.other : ''].join('');

  if (ssr) {
    if (ssr.req.qCookies) {
      ssr.req.qCookies.push(cookie);
    } else {
      ssr.req.qCookies = [cookie];
    }

    ssr.res.setHeader('Set-Cookie', ssr.req.qCookies); // make temporary update so future get()
    // within same SSR timeframe would return the set value

    var all = ssr.req.headers.cookie || '';

    if (expire !== void 0 && expireValue < 0) {
      var _val = _get(key, ssr);

      if (_val !== undefined) {
        all = all.replace("".concat(key, "=").concat(_val, "; "), '').replace("; ".concat(key, "=").concat(_val), '').replace("".concat(key, "=").concat(_val), '');
      }
    } else {
      all = all ? "".concat(keyValue, "; ").concat(all) : cookie;
    }

    ssr.req.headers.cookie = all;
  } else {
    document.cookie = cookie;
  }
}

function _get(key, ssr) {
  var result = key ? null : {},
      cookieSource = ssr ? ssr.req.headers : document,
      cookies = cookieSource.cookie ? cookieSource.cookie.split('; ') : [],
      i = 0,
      l = cookies.length,
      parts,
      name,
      cookie;

  for (; i < l; i++) {
    parts = cookies[i].split('=');
    name = decode(parts.shift());
    cookie = parts.join('=');

    if (!key) {
      result[name] = cookie;
    } else if (key === name) {
      result = read(cookie);
      break;
    }
  }

  return result;
}

function _remove(key, options, ssr) {
  _set(key, '', Cookies_objectSpread({
    expires: -1
  }, options), ssr);
}

function _has(key, ssr) {
  return _get(key, ssr) !== null;
}

function getObject() {
  var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ssr = ctx.ssr;
  return {
    get: key => _get(key, ssr),
    set: (key, val, opts) => _set(key, val, opts, ssr),
    has: key => _has(key, ssr),
    remove: (key, options) => _remove(key, options, ssr),
    getAll: () => _get(null, ssr)
  };
}
/* harmony default export */ var Cookies = ({
  parseSSR(
  /* ssrContext */
  ssr) {
    return ssr ? getObject({
      ssr
    }) : this;
  },

  install(_ref) {
    var $q = _ref.$q,
        queues = _ref.queues;

    if (isSSR === true) {
      queues.server.push((q, ctx) => {
        q.cookies = getObject(ctx);
      });
    } else {
      Object.assign(this, getObject());
      $q.cookies = this;
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/components/dialog-plugin/DialogPlugin.js








function DialogPlugin_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function DialogPlugin_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DialogPlugin_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DialogPlugin_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }













/* harmony default export */ var DialogPlugin = (vue_runtime_esm["a" /* default */].extend({
  name: 'DialogPlugin',
  mixins: [mixins_dark],
  inheritAttrs: false,
  props: {
    title: String,
    message: String,
    prompt: Object,
    options: Object,
    html: Boolean,
    ok: {
      type: [String, Object, Boolean],
      default: true
    },
    cancel: [String, Object, Boolean],
    focus: {
      type: String,
      default: 'ok',
      validator: v => ['ok', 'cancel', 'none'].includes(v)
    },
    stackButtons: Boolean,
    color: String,
    cardClass: [String, Array, Object],
    cardStyle: [String, Array, Object]
  },
  computed: {
    hasForm() {
      return this.prompt || this.options;
    },

    okLabel() {
      return this.ok === true ? this.$q.lang.label.ok : this.ok;
    },

    cancelLabel() {
      return this.cancel === true ? this.$q.lang.label.cancel : this.cancel;
    },

    vmColor() {
      return this.color || (this.isDark === true ? 'amber' : 'primary');
    },

    okProps() {
      return Object(this.ok) === this.ok ? DialogPlugin_objectSpread({
        color: this.vmColor,
        label: this.$q.lang.label.ok,
        ripple: false
      }, this.ok) : {
        color: this.vmColor,
        flat: true,
        label: this.okLabel,
        ripple: false
      };
    },

    cancelProps() {
      return Object(this.cancel) === this.cancel ? DialogPlugin_objectSpread({
        color: this.vmColor,
        label: this.$q.lang.label.cancel,
        ripple: false
      }, this.cancel) : {
        color: this.vmColor,
        flat: true,
        label: this.cancelLabel,
        ripple: false
      };
    }

  },
  methods: {
    show() {
      this.$refs.dialog.show();
    },

    hide() {
      this.$refs.dialog.hide();
    },

    getPrompt(h) {
      return [h(QInput, {
        props: {
          value: this.prompt.model,
          type: this.prompt.type || 'text',
          color: this.vmColor,
          dense: true,
          autofocus: true,
          dark: this.isDark
        },
        on: cache(this, 'prompt', {
          input: v => {
            this.prompt.model = v;
          },
          keyup: evt => {
            // if ENTER key
            if (this.prompt.type !== 'textarea' && isKeyCode(evt, 13) === true) {
              this.onOk();
            }
          }
        })
      })];
    },

    getOptions(h) {
      return [h(QOptionGroup, {
        props: {
          value: this.options.model,
          type: this.options.type,
          color: this.vmColor,
          inline: this.options.inline,
          options: this.options.items,
          dark: this.isDark
        },
        on: cache(this, 'opts', {
          input: v => {
            this.options.model = v;
          }
        })
      })];
    },

    getButtons(h) {
      var child = [];

      if (this.cancel) {
        child.push(h(QBtn, {
          props: this.cancelProps,
          attrs: {
            'data-autofocus': this.focus === 'cancel' && !this.hasForm
          },
          on: cache(this, 'cancel', {
            click: this.onCancel
          })
        }));
      }

      if (this.ok) {
        child.push(h(QBtn, {
          props: this.okProps,
          attrs: {
            'data-autofocus': this.focus === 'ok' && !this.hasForm
          },
          on: cache(this, 'ok', {
            click: this.onOk
          })
        }));
      }

      if (child.length > 0) {
        return h(QCardActions, {
          staticClass: this.stackButtons === true ? 'items-end' : null,
          props: {
            vertical: this.stackButtons,
            align: 'right'
          }
        }, child);
      }
    },

    onOk() {
      this.$emit('ok', utils_clone(this.getData()));
      this.hide();
    },

    onCancel() {
      this.hide();
    },

    getData() {
      if (this.prompt) {
        return this.prompt.model;
      }

      if (this.options) {
        return this.options.model;
      }
    },

    getSection(h, staticClass, text) {
      return this.html === true ? h(QCardSection, {
        staticClass,
        domProps: {
          innerHTML: text
        }
      }) : h(QCardSection, {
        staticClass
      }, [text]);
    }

  },

  render(h) {
    var child = [];

    if (this.title) {
      child.push(this.getSection(h, 'q-dialog__title', this.title));
    }

    if (this.message) {
      child.push(this.getSection(h, 'q-dialog__message scroll', this.message));
    }

    if (this.hasForm) {
      child.push(h(QCardSection, {
        staticClass: 'scroll'
      }, this.prompt ? this.getPrompt(h) : this.getOptions(h)));
    }

    if (this.ok || this.cancel) {
      child.push(this.getButtons(h));
    }

    return h(QDialog, {
      ref: 'dialog',
      props: DialogPlugin_objectSpread({}, this.$attrs, {
        value: this.value
      }),
      on: cache(this, 'hide', {
        hide: () => {
          this.$emit('hide');
        }
      })
    }, [h(QCard, {
      staticClass: 'q-dialog-plugin' + (this.isDark === true ? ' q-dialog-plugin--dark q-dark' : ''),
      style: this.cardStyle,
      class: this.cardClass,
      props: {
        dark: this.isDark
      }
    }, child)]);
  }

}));
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Dialog.js


/* harmony default export */ var Dialog = ({
  install(_ref) {
    var $q = _ref.$q;
    this.create = $q.dialog = global_dialog(DialogPlugin);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/LoadingBar.js








function LoadingBar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function LoadingBar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LoadingBar_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LoadingBar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ var LoadingBar = ({
  isActive: false,

  start() {},

  stop() {},

  increment() {},

  setDefaults() {},

  install(_ref) {
    var $q = _ref.$q,
        cfg = _ref.cfg;

    if (isSSR === true) {
      $q.loadingBar = this;
      return;
    }

    var props = cfg.loadingBar !== void 0 ? LoadingBar_objectSpread({}, cfg.loadingBar) : {};
    var bar = $q.loadingBar = new vue_runtime_esm["a" /* default */]({
      name: 'LoadingBar',
      render: h => h(QAjaxBar, {
        ref: 'bar',
        props
      })
    }).$mount().$refs.bar;
    Object.assign(this, {
      start: speed => {
        bar.start(speed);
        this.isActive = bar.isActive = bar.calls > 0;
      },
      stop: () => {
        bar.stop();
        this.isActive = bar.isActive = bar.calls > 0;
      },
      increment: bar.increment,
      setDefaults: opts => {
        opts === Object(opts) && Object.assign(props, opts);
        bar.$parent.$forceUpdate();
      }
    });
    vue_runtime_esm["a" /* default */].util.defineReactive(this, 'isActive', this.isActive);
    vue_runtime_esm["a" /* default */].util.defineReactive(bar, 'isActive', this.isActive);
    bar.setDefaults = this.setDefaults;
    document.body.appendChild(bar.$parent.$el);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Loading.js









function Loading_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Loading_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Loading_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Loading_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var Loading_vm,
    Loading_uid = 0,
    Loading_timeout,
    Loading_props = {},
    originalDefaults = {
  delay: 0,
  message: false,
  spinnerSize: 80,
  spinnerColor: 'white',
  messageColor: 'white',
  backgroundColor: 'black',
  spinner: QSpinner,
  customClass: ''
},
    defaults = Loading_objectSpread({}, originalDefaults);

var Loading = {
  isActive: false,

  show(opts) {
    if (isSSR === true) {
      return;
    }

    Loading_props = opts === Object(opts) && opts.ignoreDefaults === true ? Loading_objectSpread({}, originalDefaults, {}, opts) : Loading_objectSpread({}, defaults, {}, opts);
    Loading_props.customClass += " text-".concat(Loading_props.backgroundColor);
    Loading_props.uid = "l_".concat(Loading_uid++);
    this.isActive = true;

    if (Loading_vm !== void 0) {
      Loading_vm.$forceUpdate();
      return;
    }

    clearTimeout(Loading_timeout);
    Loading_timeout = setTimeout(() => {
      Loading_timeout = void 0;
      var node = document.createElement('div');
      document.body.appendChild(node);
      Loading_vm = new vue_runtime_esm["a" /* default */]({
        name: 'QLoading',
        el: node,

        mounted() {
          preventScroll(true, client);
        },

        render: h => {
          return h('transition', {
            props: {
              name: 'q-transition--fade',
              appear: true
            },
            on: cache(this, 'tr', {
              'after-leave': () => {
                // might be called to finalize
                // previous leave, even if it was cancelled
                if (this.isActive !== true && Loading_vm !== void 0) {
                  preventScroll(false, client);
                  Loading_vm.$destroy();
                  Loading_vm.$el.remove();
                  Loading_vm = void 0;
                }
              }
            })
          }, [this.isActive === true ? h('div', {
            staticClass: 'q-loading fullscreen column flex-center z-max',
            key: Loading_props.uid,
            class: Loading_props.customClass.trim()
          }, [h(Loading_props.spinner, {
            props: {
              color: Loading_props.spinnerColor,
              size: Loading_props.spinnerSize
            }
          }), Loading_props.message && h('div', {
            class: "text-".concat(Loading_props.messageColor),
            domProps: {
              [Loading_props.sanitize === true ? 'textContent' : 'innerHTML']: Loading_props.message
            }
          }) || void 0]) : null]);
        }
      });
    }, Loading_props.delay);
  },

  hide() {
    if (this.isActive === true) {
      if (Loading_timeout !== void 0) {
        clearTimeout(Loading_timeout);
        Loading_timeout = void 0;
      }

      this.isActive = false;
    }
  },

  setDefaults(opts) {
    opts === Object(opts) && Object.assign(defaults, opts);
  },

  install(_ref) {
    var $q = _ref.$q,
        loading = _ref.cfg.loading;
    this.setDefaults(loading);
    $q.loading = this;
  }

};

if (isSSR === false) {
  vue_runtime_esm["a" /* default */].util.defineReactive(Loading, 'isActive', Loading.isActive);
}

/* harmony default export */ var plugins_Loading = (Loading);
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Meta.js











var updateId, ssrTakeover;

function normalize(meta) {
  if (meta.title) {
    meta.title = meta.titleTemplate ? meta.titleTemplate(meta.title) : meta.title;
    delete meta.titleTemplate;
  }

  ;
  [['meta', 'content'], ['link', 'href']].forEach(type => {
    var metaType = meta[type[0]],
        metaProp = type[1];

    for (var name in metaType) {
      var metaLink = metaType[name];

      if (metaLink.template) {
        if (Object.keys(metaLink).length === 1) {
          delete metaType[name];
        } else {
          metaLink[metaProp] = metaLink.template(metaLink[metaProp] || '');
          delete metaLink.template;
        }
      }
    }
  });
}

function Meta_changed(old, def) {
  if (Object.keys(old).length !== Object.keys(def).length) {
    return true;
  }

  for (var key in old) {
    if (old[key] !== def[key]) {
      return true;
    }
  }
}

function bodyFilter(name) {
  return ['class', 'style'].includes(name) === false;
}

function htmlFilter(name) {
  return ['lang', 'dir'].includes(name) === false;
}

function Meta_diff(meta, other) {
  var add = {},
      remove = {};

  if (meta === void 0) {
    return {
      add: other,
      remove
    };
  }

  if (meta.title !== other.title) {
    add.title = other.title;
  }

  ;
  ['meta', 'link', 'script', 'htmlAttr', 'bodyAttr'].forEach(type => {
    var old = meta[type],
        cur = other[type];
    remove[type] = [];

    if (old === void 0 || old === null) {
      add[type] = cur;
      return;
    }

    add[type] = {};

    for (var key in old) {
      if (cur.hasOwnProperty(key) === false) {
        remove[type].push(key);
      }
    }

    for (var _key in cur) {
      if (old.hasOwnProperty(_key) === false) {
        add[type][_key] = cur[_key];
      } else if (Meta_changed(old[_key], cur[_key]) === true) {
        remove[type].push(_key);
        add[type][_key] = cur[_key];
      }
    }
  });
  return {
    add,
    remove
  };
}

function Meta_apply(_ref) {
  var add = _ref.add,
      remove = _ref.remove;

  if (add.title) {
    document.title = add.title;
  }

  if (Object.keys(remove).length > 0) {
    ['meta', 'link', 'script'].forEach(type => {
      remove[type].forEach(name => {
        document.head.querySelector("".concat(type, "[data-qmeta=\"").concat(name, "\"]")).remove();
      });
    });
    remove.htmlAttr.filter(htmlFilter).forEach(name => {
      document.documentElement.removeAttribute(name);
    });
    remove.bodyAttr.filter(bodyFilter).forEach(name => {
      document.body.removeAttribute(name);
    });
  }

  ;
  ['meta', 'link', 'script'].forEach(type => {
    var metaType = add[type];

    for (var name in metaType) {
      var tag = document.createElement(type);

      for (var att in metaType[name]) {
        if (att !== 'innerHTML') {
          tag.setAttribute(att, metaType[name][att]);
        }
      }

      tag.setAttribute('data-qmeta', name);

      if (type === 'script') {
        tag.innerHTML = metaType[name].innerHTML || '';
      }

      document.head.appendChild(tag);
    }
  });
  Object.keys(add.htmlAttr).filter(htmlFilter).forEach(name => {
    document.documentElement.setAttribute(name, add.htmlAttr[name] || '');
  });
  Object.keys(add.bodyAttr).filter(bodyFilter).forEach(name => {
    document.body.setAttribute(name, add.bodyAttr[name] || '');
  });
}

function parseMeta(component, meta) {
  if (component._inactive === true) {
    return;
  } // if it has meta


  if (hasMeta(component) === true) {
    extend(true, meta, component.__qMeta);

    if (component.$options.meta.stopPropagation === true) {
      return;
    }
  }

  component.$children.forEach(child => {
    parseMeta(child, meta);
  });
}

function updateClient() {
  if (ssrTakeover === true) {
    ssrTakeover = false;
    this.$root.__currentMeta = window.__Q_META__;
    document.body.querySelector('script[data-qmeta-init]').remove();
    return;
  }

  var meta = {
    title: '',
    titleTemplate: null,
    meta: {},
    link: {},
    script: {},
    htmlAttr: {},
    bodyAttr: {}
  };
  parseMeta(this.$root, meta);
  normalize(meta);
  Meta_apply(Meta_diff(this.$root.__currentMeta, meta));
  this.$root.__currentMeta = meta;
}

function getAttr(seed) {
  return att => {
    var val = seed[att];
    return att + (val !== void 0 ? "=\"".concat(val, "\"") : '');
  };
}

function getHead(meta) {
  var output = '';

  if (meta.title) {
    output += "<title>".concat(meta.title, "</title>");
  }

  ;
  ['meta', 'link', 'script'].forEach(type => {
    var metaType = meta[type];

    for (var att in metaType) {
      var attrs = Object.keys(metaType[att]).filter(att => att !== 'innerHTML').map(getAttr(metaType[att]));
      output += "<".concat(type, " ").concat(attrs.join(' '), " data-qmeta=\"").concat(att, "\">");

      if (type === 'script') {
        output += (metaType[att].innerHTML || '') + "</script>";
      }
    }
  });
  return output;
}

function getServerMeta(app, html) {
  var meta = {
    title: '',
    titleTemplate: null,
    meta: {},
    link: {},
    htmlAttr: {},
    bodyAttr: {},
    noscript: {}
  };
  parseMeta(app, meta);
  normalize(meta);
  var tokens = {
    '%%Q_HTML_ATTRS%%': Object.keys(meta.htmlAttr).filter(htmlFilter).map(getAttr(meta.htmlAttr)).join(' '),
    '%%Q_HEAD_TAGS%%': getHead(meta),
    '%%Q_BODY_ATTRS%%': Object.keys(meta.bodyAttr).filter(bodyFilter).map(getAttr(meta.bodyAttr)).join(' '),
    '%%Q_BODY_TAGS%%': Object.keys(meta.noscript).map(name => "<noscript data-qmeta=\"".concat(name, "\">").concat(meta.noscript[name], "</noscript>")).join('') + "<script data-qmeta-init>window.__Q_META__=".concat(delete meta.noscript && JSON.stringify(meta), "</script>")
  };
  Object.keys(tokens).forEach(key => {
    html = html.replace(key, tokens[key]);
  });
  return html;
}

function beforeCreate() {
  if (typeof this.$options.meta === 'function') {
    if (this.$options.computed === void 0) {
      this.$options.computed = {};
    }

    this.$options.computed.__qMeta = this.$options.meta;
  } else if (hasMeta(this) === true) {
    this.__qMeta = this.$options.meta;
  }
} // needs to be really fast


function hasMeta(vm) {
  return vm.$options.meta !== void 0 && vm.$options.meta !== null;
}

function triggerMeta() {
  hasMeta(this) === true && this.__qMetaUpdate();
}

/* harmony default export */ var Meta = ({
  install(_ref2) {
    var queues = _ref2.queues;

    if (isSSR === true) {
      vue_runtime_esm["a" /* default */].prototype.$getMetaHTML = app => html => getServerMeta(app, html);

      vue_runtime_esm["a" /* default */].mixin({
        beforeCreate
      });
      queues.server.push((_, ctx) => {
        ctx.ssr.Q_HTML_ATTRS += ' %%Q_HTML_ATTRS%%';
        Object.assign(ctx.ssr, {
          Q_HEAD_TAGS: '%%Q_HEAD_TAGS%%',
          Q_BODY_ATTRS: '%%Q_BODY_ATTRS%%',
          Q_BODY_TAGS: '%%Q_BODY_TAGS%%'
        });
      });
    } else {
      ssrTakeover = fromSSR;
      vue_runtime_esm["a" /* default */].mixin({
        beforeCreate,

        created() {
          if (hasMeta(this) === true) {
            this.__qMetaUnwatch = this.$watch('__qMeta', this.__qMetaUpdate);
          }
        },

        activated: triggerMeta,
        deactivated: triggerMeta,
        beforeMount: triggerMeta,

        destroyed() {
          if (hasMeta(this) === true) {
            this.__qMetaUnwatch();

            this.__qMetaUpdate();
          }
        },

        methods: {
          __qMetaUpdate() {
            clearTimeout(updateId);
            updateId = setTimeout(updateClient.bind(this), 50);
          }

        }
      });
    }
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/Notify.js













function Notify_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Notify_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Notify_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Notify_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var Notify_uid = 0;
var Notify_defaults = {};
var positionList = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'top', 'bottom', 'left', 'right', 'center'];
var Notifications = {
  name: 'QNotifications',
  data: {
    notifs: {
      center: [],
      left: [],
      right: [],
      top: [],
      'top-left': [],
      'top-right': [],
      bottom: [],
      'bottom-left': [],
      'bottom-right': []
    }
  },
  methods: {
    add(config) {
      if (!config) {
        console.error('Notify: parameter required');
        return false;
      }

      var notif = {
        textColor: 'white'
      };

      if (typeof config === 'string' || config.ignoreDefaults !== true) {
        Object.assign(notif, Notify_defaults);
      }

      Object.assign(notif, typeof config === 'string' ? {
        message: config
      } : utils_clone(config));

      if (notif.position) {
        if (!positionList.includes(notif.position)) {
          console.error("Notify: wrong position: ".concat(notif.position));
          return false;
        }
      } else {
        notif.position = 'bottom';
      }

      notif.__uid = Notify_uid++;

      if (notif.timeout === void 0) {
        notif.timeout = 5000;
      } else {
        var t = parseInt(notif.timeout, 10);

        if (isNaN(t) || t < 0) {
          console.error("Notify: wrong timeout: ".concat(notif.timeout));
          return false;
        }

        notif.timeout = t;
      }

      var close = () => {
        this.remove(notif);
      };

      var actions = (config.actions || []).concat(config.ignoreDefaults !== true && Array.isArray(Notify_defaults.actions) === true ? Notify_defaults.actions : []);
      notif.actions = actions.length > 0 ? actions.map(item => {
        var handler = item.handler,
            action = utils_clone(item);
        action.handler = typeof handler === 'function' ? () => {
          handler();
          !item.noDismiss && close();
        } : () => close();
        return action;
      }) : void 0;

      if (typeof config.onDismiss === 'function') {
        notif.onDismiss = config.onDismiss;
      }

      if (typeof notif.closeBtn === 'string') {
        var btn = {
          label: notif.closeBtn,
          handler: close
        };
        notif.actions = notif.actions ? notif.actions.concat(btn) : [btn];
      }

      if (notif.timeout > 0) {
        notif.__timeout = setTimeout(() => {
          close();
        }, notif.timeout +
        /* show duration */
        1000);
      }

      if (notif.multiLine === void 0 && notif.actions) {
        notif.multiLine = notif.actions.length > 1;
      }

      notif.staticClass = ["q-notification row items-center", notif.color && "bg-".concat(notif.color), notif.textColor && "text-".concat(notif.textColor), "q-notification--".concat(notif.multiLine === true ? 'multi-line' : 'standard'), notif.classes].filter(n => n).join(' ');
      var action = notif.position.indexOf('top') > -1 ? 'unshift' : 'push';
      this.notifs[notif.position][action](notif);
      return close;
    },

    remove(notif) {
      if (notif.__timeout) {
        clearTimeout(notif.__timeout);
      }

      var index = this.notifs[notif.position].indexOf(notif);

      if (index !== -1) {
        var el = this.$refs["notif_".concat(notif.__uid)];

        if (el) {
          var _getComputedStyle = getComputedStyle(el),
              width = _getComputedStyle.width,
              height = _getComputedStyle.height;

          el.style.left = "".concat(el.offsetLeft, "px");
          el.style.width = width;
          el.style.height = height;
        }

        this.notifs[notif.position].splice(index, 1);

        if (typeof notif.onDismiss === 'function') {
          notif.onDismiss();
        }
      }
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'q-notifications'
    }, positionList.map(pos => {
      var vert = ['left', 'center', 'right'].includes(pos) ? 'center' : pos.indexOf('top') > -1 ? 'top' : 'bottom',
          align = pos.indexOf('left') > -1 ? 'start' : pos.indexOf('right') > -1 ? 'end' : 'center',
          classes = ['left', 'right'].includes(pos) ? "items-".concat(pos === 'left' ? 'start' : 'end', " justify-center") : pos === 'center' ? 'flex-center' : "items-".concat(align);
      return h('transition-group', {
        key: pos,
        staticClass: "q-notifications__list q-notifications__list--".concat(vert, " fixed column ").concat(classes),
        tag: 'div',
        props: {
          name: "q-notification--".concat(pos),
          mode: 'out-in'
        }
      }, this.notifs[pos].map(notif => {
        var msgChild;
        var msgData = {
          staticClass: 'q-notification__message col'
        };

        if (notif.html === true) {
          msgData.domProps = {
            innerHTML: notif.caption ? "<div>".concat(notif.message, "</div><div class=\"q-notification__caption\">").concat(notif.caption, "</div>") : notif.message
          };
        } else {
          var msgNode = [notif.message];
          msgChild = notif.caption ? [h('div', msgNode), h('div', {
            staticClass: 'q-notification__caption'
          }, [notif.caption])] : msgNode;
        }

        var mainChild = [];

        if (notif.icon) {
          mainChild.push(h(QIcon, {
            staticClass: 'q-notification__icon col-auto',
            props: {
              name: notif.icon
            }
          }));
        } else if (notif.avatar) {
          mainChild.push(h(QAvatar, {
            staticClass: 'q-notification__avatar col-auto'
          }, [h('img', {
            attrs: {
              src: notif.avatar
            }
          })]));
        }

        mainChild.push(h('div', msgData, msgChild));
        var child = [h('div', {
          staticClass: 'row items-center ' + (notif.multiLine === true ? 'col-all' : 'col')
        }, mainChild)];
        notif.actions !== void 0 && child.push(h('div', {
          staticClass: 'q-notification__actions row items-center ' + (notif.multiLine === true ? 'col-all justify-end' : 'col-auto')
        }, notif.actions.map(action => h(QBtn, {
          props: Notify_objectSpread({
            flat: true
          }, action),
          on: {
            click: action.handler
          }
        }))));
        return h('div', {
          ref: "notif_".concat(notif.__uid),
          key: notif.__uid,
          staticClass: notif.staticClass
        }, child);
      }));
    }));
  }

};
/* harmony default export */ var Notify = ({
  create(opts) {
    if (isSSR === true) {
      return () => {};
    }

    return this.__vm.add(opts);
  },

  setDefaults(opts) {
    opts === Object(opts) && Object.assign(Notify_defaults, opts);
  },

  install(_ref) {
    var cfg = _ref.cfg,
        $q = _ref.$q;

    if (isSSR === true) {
      $q.notify = () => {};

      $q.notify.setDefaults = () => {};

      return;
    }

    this.setDefaults(cfg.notify);
    $q.notify = this.create.bind(this);
    $q.notify.setDefaults = this.setDefaults;
    var node = document.createElement('div');
    document.body.appendChild(node);
    this.__vm = new vue_runtime_esm["a" /* default */](Notifications);

    this.__vm.$mount(node);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/web-storage.js





function web_storage_encode(value) {
  if (Object.prototype.toString.call(value) === '[object Date]') {
    return '__q_date|' + value.toUTCString();
  }

  if (Object.prototype.toString.call(value) === '[object RegExp]') {
    return '__q_expr|' + value.source;
  }

  if (typeof value === 'number') {
    return '__q_numb|' + value;
  }

  if (typeof value === 'boolean') {
    return '__q_bool|' + (value ? '1' : '0');
  }

  if (typeof value === 'string') {
    return '__q_strn|' + value;
  }

  if (typeof value === 'function') {
    return '__q_strn|' + value.toString();
  }

  if (value === Object(value)) {
    return '__q_objt|' + JSON.stringify(value);
  } // hmm, we don't know what to do with it,
  // so just return it as is


  return value;
}

function web_storage_decode(value) {
  var type, length, source;
  length = value.length;

  if (length < 9) {
    // then it wasn't encoded by us
    return value;
  }

  type = value.substr(0, 8);
  source = value.substring(9);

  switch (type) {
    case '__q_date':
      return new Date(source);

    case '__q_expr':
      return new RegExp(source);

    case '__q_numb':
      return Number(source);

    case '__q_bool':
      return Boolean(source === '1');

    case '__q_strn':
      return '' + source;

    case '__q_objt':
      return JSON.parse(source);

    default:
      // hmm, we reached here, we don't know the type,
      // then it means it wasn't encoded by us, so just
      // return whatever value it is
      return value;
  }
}

function getEmptyStorage() {
  var fn = () => {};

  return {
    has: fn,
    getLength: fn,
    getItem: fn,
    getIndex: fn,
    getAll: fn,
    set: fn,
    remove: fn,
    clear: fn,
    isEmpty: fn
  };
}
function getStorage(type) {
  var webStorage = window[type + 'Storage'],
      get = key => {
    var item = webStorage.getItem(key);
    return item ? web_storage_decode(item) : null;
  };

  return {
    has: key => webStorage.getItem(key) !== null,
    getLength: () => webStorage.length,
    getItem: get,
    getIndex: index => {
      return index < webStorage.length ? get(webStorage.key(index)) : null;
    },
    getAll: () => {
      var result = {},
          key,
          len = webStorage.length;

      for (var i = 0; i < len; i++) {
        key = webStorage.key(i);
        result[key] = get(key);
      }

      return result;
    },
    set: (key, value) => {
      webStorage.setItem(key, web_storage_encode(value));
    },
    remove: key => {
      webStorage.removeItem(key);
    },
    clear: () => {
      webStorage.clear();
    },
    isEmpty: () => webStorage.length === 0
  };
}
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/LocalStorage.js



/* harmony default export */ var LocalStorage = ({
  install(_ref) {
    var $q = _ref.$q;
    var storage = isSSR === true || client.has.webStorage === false ? getEmptyStorage() : getStorage('local');
    $q.localStorage = storage;
    Object.assign(this, storage);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/SessionStorage.js



/* harmony default export */ var SessionStorage = ({
  install(_ref) {
    var $q = _ref.$q;
    var storage = isSSR === true || client.has.webStorage === false ? getEmptyStorage() : getStorage('session');
    $q.sessionStorage = storage;
    Object.assign(this, storage);
  }

});
// CONCATENATED MODULE: ./node_modules/quasar/src/plugins.js
















// CONCATENATED MODULE: ./node_modules/quasar/src/utils/copy-to-clipboard.js



function fallback(text) {
  var area = document.createElement('textarea');
  area.value = text;
  area.style.position = 'fixed'; // avoid scrolling to bottom

  document.body.appendChild(area);
  area.focus();
  area.select();
  var res = document.execCommand('copy');
  area.remove();
  return res;
}

/* harmony default export */ var copy_to_clipboard = (function (text) {
  return navigator.clipboard !== void 0 ? navigator.clipboard.writeText(text) : new Promise((resolve, reject) => {
    var res = fallback(text);

    if (res) {
      resolve(true);
    } else {
      reject(res);
    }
  });
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js
var web_url = __webpack_require__("2b3d");

// CONCATENATED MODULE: ./node_modules/quasar/src/utils/export-file.js





function clean(link) {
  // allow time for iOS
  setTimeout(() => {
    window.URL.revokeObjectURL(link.href);
  }, 10000);
  link.remove();
}

/* harmony default export */ var export_file = (function (fileName, rawData, mimeType) {
  var blob = new Blob([rawData], {
    type: mimeType || 'text/plain'
  }); // IE11 has its own stuff...

  if (window.navigator.msSaveOrOpenBlob) {
    return window.navigator.msSaveOrOpenBlob(blob, fileName);
  }

  var link = document.createElement('a');
  link.download = fileName;
  link.href = window.URL.createObjectURL(blob);
  link.classList.add('hidden');
  link.style.position = 'fixed'; // avoid scrolling to bottom

  document.body.appendChild(link);

  try {
    link.click();
    clean(link);
    return true;
  } catch (err) {
    clean(link);
    return err;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils/open-url.js


/* harmony default export */ var open_url = ((url, reject) => {
  var open = window.open;

  if (plugins_Platform.is.cordova === true) {
    if (cordova !== void 0 && cordova.InAppBrowser !== void 0 && cordova.InAppBrowser.open !== void 0) {
      open = cordova.InAppBrowser.open;
    } else if (navigator !== void 0 && navigator.app !== void 0) {
      return navigator.app.loadUrl(url, {
        openExternal: true
      });
    }
  } else if (vue_runtime_esm["a" /* default */].prototype.$q.electron !== void 0) {
    return vue_runtime_esm["a" /* default */].prototype.$q.electron.shell.openExternal(url);
  }

  var win = open(url, '_blank');

  if (win) {
    win.focus();
    return win;
  } else {
    reject && reject();
  }
});
// CONCATENATED MODULE: ./node_modules/quasar/src/utils.js

















function noop() {}


// CONCATENATED MODULE: ./node_modules/quasar/src/index.esm.js







function index_esm_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function index_esm_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { index_esm_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { index_esm_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









/* harmony default export */ var index_esm = (index_esm_objectSpread({}, vue_plugin, {
  install(Vue, opts) {
    vue_plugin.install(Vue, index_esm_objectSpread({
      components: components_namespaceObject,
      directives: directives_namespaceObject,
      plugins: plugins_namespaceObject
    }, opts));
  }

}));
// CONCATENATED MODULE: ./src/components/HelloWorld.vue



function injectStyles (context) {
  
  
}

/* normalize component */

var HelloWorld_component = normalizeComponent(
  components_HelloWorldvue_type_script_lang_js_,
  HelloWorldvue_type_template_id_a70599c0_render,
  HelloWorldvue_type_template_id_a70599c0_staticRenderFns,
  false,
  injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var HelloWorld = (HelloWorld_component.exports);

HelloWorld_component.options.components = Object.assign({QPage: QPage}, HelloWorld_component.options.components || {})

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!./node_modules/cache-loader/dist/cjs.js??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var Appvue_type_script_lang_js_ = ({
  name: 'LayoutDefault',
  components: {
    HelloWorld: HelloWorld
  },

  data() {
    return {
      leftDrawerOpen: false
    };
  }

});
// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_Appvue_type_script_lang_js_ = (Appvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/App.vue



function App_injectStyles (context) {
  
  
}

/* normalize component */

var App_component = normalizeComponent(
  src_Appvue_type_script_lang_js_,
  Appvue_type_template_id_30580dee_render,
  staticRenderFns,
  false,
  App_injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var App = (App_component.exports);

App_component.options.components = Object.assign({QLayout: QLayout,QHeader: QHeader,QToolbar: QToolbar,QBtn: QBtn,QToolbarTitle: QToolbarTitle,QDrawer: QDrawer,QList: QList,QItemLabel: QItemLabel,QItem: QItem,QItemSection: QItemSection,QIcon: QIcon,QPageContainer: QPageContainer}, App_component.options.components || {})

// EXTERNAL MODULE: ./src/styles/quasar.scss
var quasar = __webpack_require__("0e21");

// EXTERNAL MODULE: ./node_modules/quasar/dist/quasar.ie.polyfills.js
var quasar_ie_polyfills = __webpack_require__("5c7d");

// EXTERNAL MODULE: ./node_modules/@quasar/extras/roboto-font/roboto-font.css
var roboto_font = __webpack_require__("7d6e");

// EXTERNAL MODULE: ./node_modules/@quasar/extras/material-icons/material-icons.css
var material_icons_material_icons = __webpack_require__("e54f");

// CONCATENATED MODULE: ./src/quasar.js






vue_runtime_esm["a" /* default */].use(vue_plugin, {
  config: {},
  components: {
    /* not needed if importStrategy is not 'manual' */
  },
  directives: {
    /* not needed if importStrategy is not 'manual' */
  },
  plugins: {}
});
// CONCATENATED MODULE: ./src/main.js



vue_runtime_esm["a" /* default */].config.productionTip = false;
new vue_runtime_esm["a" /* default */]({
  render: function render(h) {
    return h(App);
  }
}).$mount('#app');
// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib-no-default.js




/***/ }),

/***/ "fb6a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var isObject = __webpack_require__("861d");
var isArray = __webpack_require__("e8b5");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");
var toIndexedObject = __webpack_require__("fc6a");
var createProperty = __webpack_require__("8418");
var wellKnownSymbol = __webpack_require__("b622");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var arrayMethodUsesToLength = __webpack_require__("ae40");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "fc6a":
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("44ad");
var requireObjectCoercible = __webpack_require__("1d80");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "fdbc":
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "fdbf":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__("4930");

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "fea9":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = global.Promise;


/***/ })

/******/ });
});
//# sourceMappingURL=hello-world.umd.js.map